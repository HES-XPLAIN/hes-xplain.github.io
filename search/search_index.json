{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"algos/","title":"Algorithms","text":"<p>HES-XPLAIN includes a variety of algorithms developed by our team, while also supporting integration with a wide range of modern XAI algorithms via the OmniXAI library.</p> <p>This section provides a concise overview of our algorithms, detailing how they can be used individually and how they can be used in conjonction with those provided by OmniXAI through our comprehensive package.</p> <ul> <li> <p> Individual usage: Each algorithm is available as a separate package, allowing users to select and use them individually based on their specific needs.</p> </li> <li> <p> Unified integration: The platform is able to function as a cohesive ensemble where these individual packages can be accessed and used together through an overarching package.</p> </li> </ul> <p>To access our Python packages, see the page Usage.</p>"},{"location":"algos/#individual-algorithms","title":"Individual algorithms","text":"<p>Overview of our own developed algorithms.</p>"},{"location":"algos/#rules-extraction","title":"Rules Extraction","text":"<p>Rules Extraction focuses on developing high-level explanation algorithms.</p> <p>This module includes three distinct approaches:</p> <ol> <li>Rule Extraction: Deriving rules that represent the decision logic of the AI model.</li> <li>Local Identification of Relevant Patterns: Identifying patterns that are significant in localized regions of the data.</li> <li>Generation of Global Meaningful Patterns: Creating patterns that provide a global understanding of the model's behavior.</li> </ol> <p>Additionally, a novel algorithm is developed to combine these approaches, resulting in comprehensive and coherent explanations.</p>"},{"location":"algos/#dimlpfidex","title":"DIMLPFidex","text":"<p>DIMLPFidex is a module gathering an ensemble of algorithms designed to provide low-level explanations. It focuses on extracting propositional rules from deep models. This module contains many training algorithms modified to permit the usage of our explanation algorithms.</p> <p>We present three explanation algorithms:</p> <ul> <li>Fidex: Provides localized explanations by generating rules that describe the model\u2019s behavior for specific data samples.</li> <li>FidexGlo: Offers a global understanding of the model's behavior by aggregating local rules into a comprehensive ruleset.</li> <li>Dimlp: Extracts global propositional rules from deep models, specifically trained using the <code>Dimlp</code> architecture, to explain the model's overall decision-making process.</li> </ul>"},{"location":"algos/#fuzzy-coco","title":"Fuzzy-CoCo","text":"<p>Fuzzy-CoCo is an algorithm developed to construct fuzzy systems using genetic algorithms based on the following paper done by Prof. Carlos Andr\u00e9s Pe\u00f1a-Reyes : A fuzzy-genetic approach to breast cancer diagnosis</p> <p>These systems predict human decision-making outcomes and provide understandable explanations. FUGE combines the predictive power of fuzzy logic with the clarity of human-like reasoning.</p> <p>The newest implementation of Fuzzy-Coco is currently in development and will be distributed in our HES-XPLAIN platform.  The modern development of Fuzzy-CoCO is done here under the name FUGE. </p>"},{"location":"algos/#omnixai-integration","title":"OmniXAI integration","text":"<p>Overview of the overarching package for use via an unified interface.</p>"},{"location":"algos/#mlxplain","title":"MLXplain","text":"<p>MLXplain serves as the code framework that unifies our various algorithms, creating a cohesive platform for eXplainable AI (XAI).</p> <p>Built on the robust capabilities of OmniXAI, a comprehensive Python library dedicated to explainable AI, MLXplain enhances this foundation by incorporating our additional algorithms, resulting in a powerful and versatile environment for practitioners.</p> <p>By reusing all modern standard algorithms available through the OmniXAI library, MLXplain ensures users have access to a broad spectrum of XAI techniques and functionalities. This integration allows users to make full use of the explainable AI potential, facilitating the comparison between different methods and simplifying experimentation and implementation.</p>"},{"location":"introduction/","title":"Introduction to XAI","text":"<p>What is Explainable AI, why is it needed, and where can it be used?</p>"},{"location":"introduction/#traditional-ai-models","title":"Traditional AI models","text":"<p>Traditional AI model</p> <ul> <li>Why did the model do that?</li> <li>Why not something else?</li> <li>When does the model succeed?</li> <li>When does it fail?</li> <li>When can we trust it?</li> <li>How do we correct an error?</li> </ul> <p>Artificial intelligence (AI) is rapidly permeating numerous aspects of our lives and is evolving into a game-changer in many areas, including healthcare, energy, marketing, finance, security, transportation, robotics, and image/speech recognition. AI growth is fuelled by the rapid increase of available computational power, the abundance of data for training and testing sophisticated AI models, and the resurgence of Machine learning (ML) in the last decade.</p> <pre><code>graph LR\nE(Input data) --&gt; C;\nA(Training Data) --&gt; B[Learning Process Algorithm];\nB --&gt; C(Learned Function);\nC --&gt; D[Output Prediction];\nD ---&gt;|Why?| F((Lack of Transparency));</code></pre> <p>A major drawback with artificial neural networks is that it is very difficult to explain their responses because their knowledge is embedded within the values of the parameters and neuron activations, which are at first glance incomprehensible. The transparency of AI models is an important research topic, as transparency is essential with respect to the European General Data Protection Regulation (GDPR). In general, under the GDPR, every individual has the right to receive an explanation when a decision has been made about them.</p> <p>Artificial intelligence (AI) is rapidly growing in various fields due to the availability of computational power and data for training models. However, the lack of transparency in AI models, particularly deep neural networks, is a major concern as it raises ethical and legal questions limiting their societal acceptance.</p> <p>Explainable AI (XAI) aims to address this issue by explaining how a model produces its results.</p>"},{"location":"introduction/#explainable-ai-models","title":"Explainable AI models","text":"<p>Explainable AI model</p> <ul> <li>We can understand why</li> <li>We can understand why not</li> <li>We know when it will succeed</li> <li>We know when it will fail</li> <li>We know when to trust it</li> <li>We know when it erred</li> </ul> <p>The impressive effectiveness of AI applications based on DL is often shadowed by their inability to explain their behaviours to human users. Understanding how these algorithms operate, would allow demystifying AI, making such black-boxes intelligible and explainable, and improving everyone's confidence in these tools. Explainable AI encompasses AI methods aimed at explaining to a given audience, why or how a model produces its results.</p> <pre><code>graph LR\nE(Input data) --&gt; C;\nA(Training Data) --&gt; B[New Learning Process];\nB --&gt; C(Explainable Model);\nC --&gt; D[Explanation Interface];\nD --&gt; F((User Understanding));</code></pre> <p>XAI seeks to address this issue by developing AI models that can provide explanations that are clear, concise, and relevant to the user's context. By providing interpretable explanations for its decisions, XAI can help users better understand the reasoning behind AI models and build trust in their reliability and accuracy.</p> <p>The benefits of XAI are many. For example, it can help to improve the accuracy and performance of AI models by enabling users to identify and correct errors or biases in the data or the model itself. XAI can also enhance the accountability and transparency of AI systems, which is essential for ensuring ethical and fair use of AI in society.</p> <p>Explainability is a cornerstone for attaining some of the fundamental principles of responsible AI: fairness, transparency, privacy, accountability, safety, security, and reliability.</p>"},{"location":"introduction/#application-domains","title":"Application domains","text":"<p>Explainable AI (XAI) is relevant across a diverse array of domains, including but not limited to:</p> <ul> <li> <p> Healthcare: Explainable algorithms can significantly enhance diagnostic tools by providing transparent decision-making processes. This transparency helps clinicians understand and trust the outputs of AI systems, which can lead to improved patient outcomes. For instance, when an AI system suggests a diagnosis, the ability to trace back the reasoning behind that suggestion allows healthcare professionals to make more informed decisions, ultimately benefiting patient care.</p> </li> <li> <p> Finances: In the financial sector, explainable algorithms offer crucial transparency in risk assessment and trading strategies. Financial professionals can gain insights into the factors driving model predictions, enabling them to make more informed decisions. This is particularly important in an industry where trust and accountability are paramount, as understanding the rationale behind automated decisions can help mitigate risks and enhance compliance with regulatory standards.</p> </li> <li> <p> Marketing: Explainable AI provides valuable insights into customer segmentation and behavior analysis. By elucidating the underlying reasons behind customer trends, marketers can develop more effective and targeted marketing strategies. For example, understanding why certain demographics respond positively to specific campaigns allows for the optimization of marketing efforts, leading to increased engagement and conversion rates.</p> </li> <li> <p> Engineering: In the field of engineering, explainability in models allows for better system design and optimization. By providing clear insights into how various factors influence the model's predictions, engineers can create more reliable and robust solutions. This is particularly beneficial in complex systems where understanding the interplay of different variables is essential for effective design and implementation.</p> </li> <li> <p> Research: Explainability tools play a vital role in data analysis and hypothesis testing within research. By making the model's decision processes transparent, researchers can validate their findings and ensure the reliability of their studies. This transparency fosters a deeper understanding of the data and the models used, which is crucial for advancing knowledge in various scientific fields.</p> </li> </ul> <p>Explainability is a transformative approach that increases transparency and trust across multiple domains.</p>"},{"location":"introduction/#hes-so-flagship-project","title":"HES-SO flagship project","text":"<p>The HES-XPLAIN project is associated to the Swiss AI Center, the flagship project of the HES-SO (University of Applied Sciences and Arts of Western Switzerland).</p> <p>The Swiss AI Center\u2019s mission is to accelerate the adoption of artificial intelligence in the digital transition of Swiss SMEs. The associated socio-economic challenge is to increase their competitiveness, to limit relocation and to create new competences at the interface of laboratories and the practical use of artificial intelligence.</p> <p>As such, a demonstration module on AI explainability has been integrated within the Swiss AI Center online platform Core Engine. The implementation of a GradCAM module using a pre-trained model based on our use cases has been carried out. The choice of this specific algorithm was driven by its explicitly visual presentation, which facilitates understanding of explainability for non-experts.</p>"},{"location":"notebooks/","title":"Use cases notebooks","text":"<p>Welcome to the interactive notebooks section, dedicated to showcase Explainable Artificial Intelligence (XAI) techniques in various use cases.</p> <p>These notebooks aim to make XAI more approachable by providing practical examples and explanations. We have curated a diverse range of notebooks for audiences with varying levels of expertise.</p> <p>Explore our collection of notebooks to understand how AI models make decisions, interpret their outputs, and gain insights into their predictions.</p> <p>There are 2 categories of notebooks:</p> <ul> <li> Tutorials: Explore various notebooks illustrating practical uses of XAI techniques in different machine learning scenarios.</li> <li> Use cases: Focus on a particular goal-oriented ML task with notebooks demonstrating the integration of XAI techniques for greater interpretability.</li> </ul> <p>To launch the notebooks, refer to Using notebooks.</p> <p>Warning</p> <p>Important: To run the notebook on Google Colab successfully, ensure to change the variable <code>use_colab</code> in the first cell to True.</p>"},{"location":"notebooks/#tutorials","title":"Tutorials","text":""},{"location":"notebooks/#class-activation-maps-cam","title":"Class Activation Maps (CAM)","text":"<p>Through this use case, we present the potential of CAM as a tool for transparent and interpretable sport image classification.</p> <p>Sport Image Classification with Class Activation Maps (CAM)</p> <p></p> <p>Class Activation Maps (CAM)</p> <ul> <li> Online: Exploring Class Activation Maps for Sport Image Classification</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul> <p>In this use case, we dive into sport image classification and showcase the power of Class Activation Maps (CAM) as an interpretability tool.</p> <p>CAM allows us to visualize the regions of an image that contribute most to the model's classification decision. By overlaying heatmaps onto the original images, we gain insights into the model's attention and its understanding of different sports.</p> <p>While focusing on a specific image classification task using a pre-trained model, our goal is to demonstrate how XAI empowers users to explore and interpret image classifiers effectively.</p> <p>By the end of this use case, you will have a solid understanding of CAM and how to integrate it into your own projects.</p>"},{"location":"notebooks/#rules-extraction","title":"Rules Extraction","text":"<p>Through this use case, we aim to present the potential of Rules Extraction package as a tool for transparent and interpretable sport image classification.</p> <p>Sport Image Classification with Rules Extarction</p> <p></p> <p>Rules Extraction</p> <ul> <li> Online: Exploring Rules Extraction for Sport Image Classification</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul> <p>In this use case, we dive into the same specific sport image classification task using a pre-trained model. We demonstrate the power of Rules Extraction as an interpretability tool, allowing to explore and interpret image classifiers effectively.</p> <p>By the end of this notebook, you will have a solid understanding of Rules Extraction and how to integrate it into your own projects.</p>"},{"location":"notebooks/#feature-visualisation","title":"Feature Visualisation","text":"<p>Through this use case, we aim to present the potential of Feature Visualisation as a tool for transparent and interpretable sport image classification.</p> <p>Sport Image Classification with Feature Visualisation</p> <p></p> <p>Feature Visualisation</p> <ul> <li> Online: Exploring Feature Visualisation for Sport Image Classification</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul> <p>In this use case, we dive into  the same specific sport image classification task using a pre-trained model. We demonstrate the power of Feature Visualisation as an interpretability tool, allowing to explore and interpret image classifiers effectively.</p> <p>By the end of this notebook, you will have a solid understanding of Feature Visualisation and how to integrate it into your own projects.</p>"},{"location":"notebooks/#use-cases","title":"Use Cases","text":""},{"location":"notebooks/#aptos-2019-blindness-detection","title":"APTOS 2019 Blindness Detection","text":"<p>Through this use case, we aim to to show how to use XAI techniques and methods to create an explainable model to classify images from the APTOS 2019 Blindness Detection dataset. We also builds post-hoc local and global explanations to explain the model and its prediction. </p> <p>We used the MLxplain package that we developed to put together our explainability methods and the omniXAI explainers.</p> <p>APTOS 2019 Blindness Detection</p> <p></p> <p>APTOS 2019 Blindness Detection</p> <ul> <li> Online: XAI for APTOS 2019 Blindness Detection</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul>"},{"location":"notebooks/#sport-image-classification","title":"Sport Image Classification","text":"<p>Through this use case, we aim to to show how to use XAI techniques and methods to create an explainable model to classify images from the Sports Image Classification dataset. We also builds post-hoc explanations to explain the model and its prediction.</p> <p>Sport Image Classification</p> <p></p> <p>Sports Image Classification</p> <ul> <li> Online: XAI for Sport Image Classification</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul>"},{"location":"notebooks/#mnist","title":"MNIST","text":"<p>Through this use case, we aim to to show how to use XAI techniques and methods to create an explainable model to classify images from the MNIST dataset. We also builds post-hoc explanations to explain the model and its prediction.</p> <p>MNIST Image Classification</p> <p></p> <p>MNIST Image Classification</p> <ul> <li> Online: XAI for MNIST</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul>"},{"location":"notebooks/#cracks","title":"Cracks","text":"<p>Through this use case, we aim to show how to use XAI techniques and methods to create an explainable model to classify images from cracked concrete image dataset. We also builds post-hoc explanations to explain the model and its prediction.</p> <p>Cracks Image Classification</p> <p></p> <p>Cracks Image Classification</p> <ul> <li> Online: XAI for Cracks Images Classification</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul>"},{"location":"notebooks/#breast-cancer-classification","title":"Breast cancer classification","text":"<p>Through this use case, we demonstrate how to use Dimlp to train a model based on breast cancer tumors dataset and the Fidex algorithms to extract rules.</p> <p>Breast cancer classification</p> <p></p> <p>Breast cancer classification</p> <ul> <li> Online: XAI for Breast cancer classification</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul>"},{"location":"notebooks/#obesity-cardiovascular-risk-classification","title":"Obesity Cardiovascular risk classification","text":"<p>As an alternative to the previous notebook, this use case aims to use a different dataset and training model to show the versatility of our explainability tools. In addition, we will cover how to pre-process a dataset that is not initially usable by a model and convert it to an exploitable dataset.</p> <p>Obesity Cardiovascular Risk Classification</p> <p></p> <p>Obesity Cardiovascular Risk Classification</p> <ul> <li> Online: XAI for Obesity Cardiovascular Risk Classification</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul>"},{"location":"notebooks/#use-dimlpfidex-within-the-omnixai-library","title":"Use dimlpfidex within the OmniXAI library","text":"<p>Through this use case, learn to use dimlpfidex with OmniXAI by exploring the heart attack prediction dataset and extracting explanatory rules. We will also generate local and global explanation graphs in a dashboard using this library.</p> <p>Heart attack prediction with OmniXAI</p> <p></p> <p>Heart Attack Risk Prediction</p> <ul> <li> Online: XAI for Heart Attack Risk Prediction</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul>"},{"location":"notebooks/#generate-dimlpfidex-json-configuration-files-with-the-gui","title":"Generate dimlpfidex JSON configuration files with the GUI","text":"<p>Info</p> <p>You should install the GUI before following this notebook.</p> <p>If you are not used to deal with JSON configuration files and would like to get over it as fast as possible, a GUI is available to help you. Through this short notebook, you will learn how to generate a configuration file using this app and input it in one of the Fidex algorithms.</p> <p>Dimlpfidex GUI</p> <p></p> <p>Dimlpfidex GUI</p> <ul> <li> Online: Learn how to use the Dimlpfidex Graphical User Interface (GUI)</li> <li> Local: Docker Compose file (Right click, \"Save link as\")</li> </ul>"},{"location":"platform/","title":"Platform","text":"<p>The HES-XPLAIN platform, is designed to democratize access to eXplainable Artificial Intelligence (XAI) for a wide range of audiences. We offer an intuitive platform where users can access resources to enhance their understanding, including datasets, experimental models, and easy-to-apply XAI algorithms.</p> <ul> <li> <p>Broad coverage: The platform brings together a comprehensive suite of tools and resources to help users understand, apply, and compare various XAI techniques. It includes State of the Art and also novel XAI techniques.</p> </li> <li> <p>Low barrier to adoption: The platform is easy to use, and can be integrated with exsting Machine Learning pipeline. By making XAI tools more accessible and user-friendly, it aims to accelerate the development of transparent and trustworthy AI systems across multiple sectors.</p> </li> <li> <p>Open Source: The platform and included algorithms is entirely open-source. It is free to use and can be easily extended to include more XAI techniques in the future. It is licensed under the BSD-license.</p> </li> </ul> <ul> <li> <p> Audience</p> <p>Take a look at our target audience and provided benefits.</p> <p> Audience</p> </li> <li> <p> Usage</p> <p>Start using our tools and algorithms.</p> <p> Usage</p> </li> <li> <p> Algorithms</p> <p>Discover our own developed explainability algorithms.</p> <p> Algorithms</p> </li> <li> <p> Architecture</p> <p>Find information on the architecture of the platform.</p> <p> Architecture</p> </li> </ul>"},{"location":"platform/#audience","title":"Audience","text":"<p>The HES-XPLAIN platform is specifically designed to meet the needs of different key users. It provides the essential tools and resources for data scientists, decision makers, engineers, or educators to effectively understand and apply XAI.</p> <p>You are ...</p> a decision makeran engineera data scientista professor <p> You want to understand the relevance of XAI for your business.</p> <p>Get an overview of explainability opportunities</p> <ul> <li>Get insights and visualizations that facilitate informed decision-making</li> <li>Access resources and use case scenarios to guide XAI choices</li> </ul> <p> You want to try XAI algorithms.</p> <p>Get access to exploratory use cases notebooks and datasets</p> <ul> <li>Discover use cases as Jupyter notebooks</li> <li>Get datasets, algorithms and Python code</li> </ul> <p> You want to use XAI algorithms along your models.</p> <p>Get access to algorithms and API documentation.</p> <ul> <li>Obtain Python PyPI packages</li> <li>Get extensive API documentation</li> </ul> <p> You want a tool to facilitate teaching of explainable AI.</p> <p>Get access to tutorials and comprehensive guides.</p> <ul> <li>Provide students with practical knowledge and hands-on experience in XAI methodologies</li> <li>Deploy the platform on school IT infrastructure or public cloud</li> <li>Adapt provided use cases to teaching needs</li> </ul>"},{"location":"platform/#benefits","title":"Benefits","text":"<p>HES-XPLAIN brings several benefits to its users:</p> <ul> <li>Accessibility: HES-XPLAIN makes explainable AI (XAI) tools and techniques available to users of all skill levels, from novices to seasoned experts.</li> <li>User-Friendly Design: With an intuitive interface and extensive resources, HES-XPLAIN simplifies the application of XAI, making it easy for users to navigate and use its features.</li> <li>Educational Value: The platform enhances the teaching and learning experience of XAI through a variety of tutorials and guides, helping users to deepen their understanding.</li> <li>Versatility: HES-XPLAIN supports diverse data types and integrates multiple XAI methods, allowing for comprehensive analysis and insights across various applications.</li> </ul>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#api-reference","title":"API reference","text":"<ul> <li>rules extraction</li> <li>dimlpfidex</li> </ul> <p>OmniXAI integration:</p> <ul> <li>mlxplain</li> <li>OmniXAI</li> </ul>"},{"location":"team/","title":"Who we are","text":""},{"location":"team/#the-hes-so","title":"The HES-SO","text":"<p>The HES-SO is a Swiss university of applied sciences that offers various academic programs, research projects, and services in the fields of technology, design, economy, and social work. It has a strong focus on practical and applied knowledge, and its mission is to contribute to the economic and social development of Switzerland through its research and innovation activities.</p> <p>Regarding the advancement of machine learning, the HES-SO is a leading institution in Switzerland that provides high-quality education, research, and development in this field. It has a team of experienced and knowledgeable professors, researchers, and practitioners who work on cutting-edge projects and initiatives in collaboration with industry partners and other academic institutions.</p> <p>The HES-SO also has a strong network of alumni and professional contacts in the industry, which ensures that its graduates are well-prepared and have excellent job prospects in the machine learning field.</p> <p>Overall, the HES-SO is a dynamic and innovative institution that contributes to the development of machine learning in Switzerland and beyond.</p>"},{"location":"team/#team-members","title":"Team members","text":""},{"location":"team/#prof-carlos-andres-pena-reyes","title":"Prof. Carlos Andr\u00e9s Pe\u00f1a-Reyes","text":"<p>PhD, Director of the Institute of Information and Communication Technologies (IICT), HEIG-VD</p> <p></p> <p>Professor Pe\u00f1a has extensive expertise in Explainable  Artificial Intelligence (XAI). Across several CTI and SNSF projects (DiagnoSuite, BossExplorer,  nanoFUGE, ISyPeM) he has developed and successfully applied his interpretable modelling  approach, dubbed Fuzzy CoCo and based on evolutionary algorithms and fuzzy logic, to several diagnostic and biomarker-discovery tasks. Based on this algorithm he has published open-source  packages (Trefle<sup>1</sup>, fugeR<sup>2</sup>) and produced an unpublished package that led to the creation of SimplicityBio, a company today integrated into Precision QuartzBio and that also led to the obtention of a patent (WO/2017/199067).</p> <p>From 2016 to 2018, with the project \"D-Rex: Rule extraction from deep neural networks\", (Hasler foundation grant)<sup>3</sup>, <sup>4</sup>, his group focused on the investigation of knowledge extraction methods from deep neural networks (CNNs). The methods developed in this  project were able to extract simple rules based on high-level features<sup>4</sup>, extract class-relevant input features and highlight them in specific inputs <sup>4</sup>, and recreate prototypical images for specific classes or internal features allowing users to gain insights into the inner representations of the  trained network<sup>4</sup>.</p> <p>Since 2020, the team participates to the SNSF NRP77 project \"EXPLaiN: Ethical and Legal issues of Mobile Health Data \u2013 Improving understanding and eXPlainability of  digitaL transformAtion and data technologies using artificial IntelligeNce\", which focus on the implementation and test of explainable models in the context of mobile health data.</p>"},{"location":"team/#prof-marcel-graf","title":"Prof. Marcel Graf","text":"<p>PhD, Professor, HEIG-VD</p> <p></p> <p>Professor Graf has more than 20 years of experience in  software engineering, including 16 years at IBM Research. He has developed digital platforms that  give structure to technical expertise and make it available to a broader non-technical audience<sup>5</sup>. In an Innosuisse project with Avalia Systems he has developed a platform that allows experts in software engineering to organise and streamline their work in software assessments and  communicate their insights to business clients. The platform can be flexibly deployed on Avalia's or  the client's IT. In another Innosuisse project with Flybotix he is developing a cloud-based platform for drone inspection flights. The platform uses short-lived massive cloud resources for  photogrammetric processing with low latency and enables remote inspection experts to follow and  supervise a drone flight remotely.</p>"},{"location":"team/#prof-guido-bologna","title":"Prof. Guido Bologna","text":"<p>PhD, Professor, HEPIA-GE</p> <p></p> <p>Professor Bologna introduced a neural network model  from which propositional rules are generated <sup>6</sup>. These rules are natural with respect to the logic of human reasoning. A clear advantage of the introduced model, which is called Discretized Interpretable Multi Layer Perceptron (DIMLP) is that for a given input, we can refer the activated rules and determine range inputs relevant to the decision. Later, the DIMLP transparency framework  was applied to ensembles <sup>7</sup>. A rule extraction technique that is essential to the explicability of deep Multi-Layer Perceptrons (MLPs) was presented in <sup>8</sup>. Subsequently, a comprehensive comparison of rule extraction techniques was proposed for 25 classification problems <sup>9</sup>. The compared models were ensembles of DIMLPs, ensembles of decision trees and Support Vector Machines (SVMs).  Later, in <sup>10</sup> the rule extraction problem was tackled from a simple convolutional architecture with respect to textual data and melanoma images <sup>11</sup>. Finally, in <sup>12</sup>, he introduced in collaboration  with Jean-Marc Boutay and Damian Boquete Costa, a newly developed algorithm called Fidex, as a significant advancement in rule extraction. Fidex is notably faster and capable of deriving rules from data trained by various models, including Convolutional Neural Networks (CNNs). Many of about 100 papers he has authored or co-authored are available on ResearchGate <sup>13</sup>.</p>"},{"location":"team/#xavier-brochet","title":"Xavier Brochet","text":"<p>Senior R&amp;D Scientist in Bioinformatics, PhD, HEIG-VD</p> <p></p> <p>Senior bioinformatician with over 12 years of experience, Xavier Brochet is passionate about working at the interface of disciplines and he enjoys solving real-world problems, specially those related with life sciences and biomedical. He has a significant experience in public research and has been working in multidisciplinary teams (biology and computer science). Working within a stimulating research framework and with researchers from other disciplines is particularly adapted to his education and is a significant motivation for him. He is an expert in creating information systems and developing bioinformatics analysis tools, softwares and web interfaces.</p>"},{"location":"team/#arthur-babey","title":"Arthur Babey","text":"<p>Ra&amp;D Collaborator, HEIG-VD</p> <p></p> <p>Arthur Babey is a Life Sciences Engineer working as an Ra&amp;D Collaborator at HEIG-VD. His expertise in Life Sciences, coupled with a strong inclination towards data science and machine learning, equips him with a distinctive set of skills. Currently, he is focused on the domain of machine learning and explainable artificial intelligence. By utilizing computational techniques and data science, he is deeply interested in solving intricate problems related to health and biology. Whether it involves the complexities of bioinformatics or the potential of deep learning, Arthur strives to push the boundaries of innovation and make meaningful contributions to the field.</p>"},{"location":"team/#jean-marc-boutay","title":"Jean-Marc Boutay","text":"<p>HES Assistant, HEPIA-GE</p> <p></p> <p>Jean-Marc Boutay is an HES Assistant at HEPIA-GE and a proficient Machine Learning Engineer. He obtained his master's degree in computer science in 2022, focusing his thesis on real-time object detection using deep learning. He is currently developing and optimizing cutting-edge algorithms in Python and C++. He developed the Fidex<sup>12</sup> algorithm in collaboration with Damian Boquete Costa. He is a serious-minded individual who takes his work very seriously and is always striving for excellence in his projects. Jean-Marc is a great team player and is always willing to lend a helping hand to his colleagues whenever needed.</p>"},{"location":"team/#remy-marquis","title":"R\u00e9my Marquis","text":"<p>Ra&amp;D Collaborator, HEIG-VD</p> <p></p> <p>R\u00e9my Marquis is an R&amp;D Collaborator at HEIG-VD, with a background in sciences and environmental engineering. His growing interest in the capabilities and wide-ranging applications of Machine Learning led him to embark on a gradual transition into the field. Currently, R\u00e9my focuses on Machine Learning Infrastructure Engineering, with a specific emphasis on  Machine Learning Operations (MLOps). He continuously expands his expertise in building and managing scalable systems for ML workflows, ensuring seamless integration and deployment of ML models. R\u00e9my's proficiency in MLOps is steadily growing, as he remains committed to delivering high-quality work in this evolving field.</p>"},{"location":"team/#damian-boquete-costa","title":"Damian Boquete Costa","text":"<p>HES Assistant, HEPIA-GE</p> <p></p> <p>Damian Boquete Costa is an HES Assistant at HEPIA-GE and a versatile Software Engineer. He earned a Bachelor's  degree in Computer Science in 2023 and joined the team later that year to work with Jean-Marc Boutay and developed the Fidex<sup>12</sup> algorithm with him. His tasks focus on optimizing Machine Learning algorithms, developing graphic solutions, and enhancing tool documentation. Damian's diverse skills bring fresh perspectives, and he is committed to finding innovative solutions. His motivation  and dedication to continuously sharpening his skills are valuable assets to the project's progress.</p> <ol> <li> <p>https://pypi.org/project/trefle/ \u21a9</p> </li> <li> <p>https://cran.r-project.org/web/packages/fugeR/ \u21a9</p> </li> <li> <p>Gomez Schnyder, St\u00e9phane, Despraz, J\u00e9r\u00e9mie, et Pe\u00f1a-Reyes, Carlos Andr\u00e9s, \u00ab Improving neural network interpretability via rule extraction \u00bb, Greece, p. 811\u2011813, octobre 2018.\u00a0\u21a9</p> </li> <li> <p>J. Despraz, S. Gomez, H. F. Satiz\u00e1bal, et C. A. Pe\u00f1a-Reyes, \u00ab Exploring Internal Representations of Deep Neural Networks \u00bb, in Computational Intelligence, vol. 829, C. Sabourin, J. J. Merelo, K. Madani, et K.Warwick, \u00c9d. Cham: Springer International Publishing, 2019, p. 119\u2011138. doi: 10.1007/978-3-030-16469-0_7.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>T. Grandison et al., \u00ab Elevating the Discussion on Security Management: The Data Centric Paradigm \u00bb, in 2007 2<sup>nd</sup> IEEE/IFIP International Workshop on Business-Driven IT Management, Munich, Germany, mai 2007, p. 84\u201193. doi: 10.1109/BDIM.2007.375015.\u00a0\u21a9</p> </li> <li> <p>Bologna, Guido et Pellegrini, Christian, \u00ab Three medical examples in neural network rule extraction \u00bb, 183\u2011187, 1997.\u00a0\u21a9</p> </li> <li> <p>G. Bologna, \u00ab Is it worth generating rules from neural network ensembles? \u00bb, Journal of Applied Logic, vol. 2, no 3, p. 325\u2011348, sept. 2004, doi: 10.1016/j.jal.2004.03.004.\u00a0\u21a9</p> </li> <li> <p>G. Bologna et Y. Hayashi, \u00ab Characterization of Symbolic Rules Embedded in Deep DIMLP Networks: A Challenge to Transparency of Deep Learning \u00bb, Journal of Artificial Intelligence and Soft Computing Research, vol. 7, no 4, p. 265\u2011286, oct. 2017, doi: 10.1515/jaiscr-2017-0019.\u00a0\u21a9</p> </li> <li> <p>G. Bologna et Y. Hayashi, \u00ab A Comparison Study on Rule Extraction from Neural Network Ensembles, Boosted Shallow Trees, and SVMs \u00bb, Applied Computational Intelligence and Soft Computing, vol. 2018, p. 1\u201120, 2018, doi: 10.1155/2018/4084850.\u00a0\u21a9</p> </li> <li> <p>G. Bologna, \u00ab A Simple Convolutional Neural Network with Rule Extraction \u00bb, Applied Sciences, vol. 9, no 12, p. 2411, juin 2019, doi: 10.3390/app9122411.\u00a0\u21a9</p> </li> <li> <p>G. Bologna et S. Fossati, \u00ab A Two-Step Rule-Extraction Technique for a CNN \u00bb, Electronics, vol. 9, no 6, p. 990, juin 2020, doi: 10.3390/electronics9060990.\u00a0\u21a9</p> </li> <li> <p>G. Bologna, J.-M. Boutay, Q. Leblanc, et D. Boquete. \u00ab Fidex: An Algorithm for the Explainability of Ensembles and SVMs \u00bb, in International Work-Conference on the Interplay Between Natural and Artificial Computation, p. 378388. Cham: Springer Nature Switzerland, may 2024,  doi: 10.1007/978-3-031-61137-7_35.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>https://www.researchgate.net/profile/Guido-Bologna \u21a9</p> </li> </ol>"},{"location":"usage/","title":"Usage","text":"<p>Despite advancements in the field of eXplainable Artificial Intelligence (XAI), many existing XAI tools remain complex and challenging to use.</p> <p>The XPLAIN platform aims to address this challenge by making XAI more accessible, by providing an intuitive, ready-to-use environment that consolidates various XAI techniques helping users to better understand and apply AI insights effectively.</p>"},{"location":"usage/#notebooks-datasets","title":"Notebooks &amp; Datasets","text":"<p>We offer a range of tutorials and how-to guides presented as use cases in interactive notebooks. Users can explore and experiment with these resources to explore various XAI methods available. Additionally, datasets and trained models are accessible in our HuggingFace repository, and the notebooks can be opened and tested directly on Google Colab.</p> <p>On our website, you will thus find:</p> <ul> <li>Tutorial Notebooks: Step-by-step guides to help users understand and apply XAI methods.</li> <li>Use Case Notebooks: Demonstrations of how XAI and our platform can address real-world problems.</li> <li>Datasets and Models: Embedded datasets and pre-trained models to facilitate experimentation.</li> <li>Other XAI Resourcse: Literature and resources that explain how Explainable Artificial Intelligence works.</li> </ul> <p>These practical resources aim to help users understand and utilize the various features available on our platform.</p> <pre><code>graph LR\n    subgraph Huggingface[\"Huggingface Repository\"]\n        direction LR\n        models[\"Pre-trained models\"]\n        datasets[\"Datasets\"]\n    end\n\n    notebooks[\"Use cases Notebooks\"]\n    colab[\"Google Colab\"]\n\n    models --&gt; notebooks\n    datasets --&gt; notebooks\n    notebooks --&gt; |interactive session|colab</code></pre> <p>Online deployment through Google Colab allows for easy access and experimentation with our algorithms, tutorials, and use cases, without the need to install Python and XAI libraries on a local machine.</p> <p>The interactive notebooks can be found in the Notebooks section.</p>  Using notebooks <p>How to use interactive sessions with notebooks</p> <p>You can launch notebooks conveniently in an online interactive session. Simply choose launching an online session in Google Colab.</p> <p>Note: A Google account is required to access Google Colab free of charge.</p>  Online session: How to launch Google Colab <ul> <li>Click on the provided link to open the notebook in your browser.</li> <li>In the upper right corner of the editor, click on the downward arrow right of the Connect and then Change runtime type.</li> <li>Select T4 GPU to make use of GPU accelleration, then Save.</li> <li>Click on Connect.</li> </ul> <p>When you are done, the environment will be shutdown after 30 minutes of inactivity. You can also shut it down manually by clicking on Runtime menu then by selecting Disconnect and delete runtime.</p>"},{"location":"usage/#algorithms-code","title":"Algorithms code","text":"<p>In algos we introduce our XAI algorithms. They are developed in an open source manner in our GitHub repositories. They consist of Python and C++ code using the pybind11 binding library.</p> <pre><code>graph TB\n    subgraph Repo[\"GitHub repository\"]\n        subgraph hesxplainAlgo[\"Our XAI algorithms\"]\n            direction LR\n            algoRuleextract[\"rule-extraction\"]\n            algoFuge[\"fuge\"]\n            algoDimlp[\"dimlpfidex\"]\n        end\n\n        mlxplain[\"mlxplain\"]\n    end\n\n    subgraph ExternalAlgo[\"Existing XAI algorithms\"]\n        existingAlgo1[\"SHAP\"]\n        existingAlgo2[\"LIME\"]\n        existingAlgo3[\"...\"]\n        omnixai[\"OmniXAI\"]\n    end\n\n    hesxplainAlgo --&gt; mlxplain\n    existingAlgo1 --&gt; omnixai\n    existingAlgo2 --&gt; omnixai\n    existingAlgo3 --&gt; omnixai\n    omnixai --&gt; mlxplain\n</code></pre> <p>The platform assembles our own developed algorithms as well as incorporating all algorithms proposed by OmniXAI through the overaching MLXplain package. This comprehensive suite of tools for XAI enables users to compare and choose the best techniques for their needs.</p> <p>Explore our algorithms in the Algorithms section.</p>"},{"location":"usage/#python-packages","title":"Python packages","text":"<p>Our algorithms are packaged in the latest standards-compliant formats and stored on our platform under an open, permissive, and business friendly licence.</p> Obtaining the Python packages <p>The algorithms and overaching python packages is available on the Python Package Index:</p> <ul> <li> rules-extraction</li> <li> dimlpfidex</li> <li> mlxplain</li> </ul> <p>The packaging process is entirely automated from the source repositories. This simplifies code maintenance and release processes on the public Python Index, allowing data scientists to obtain these algorithms quickly from their command line to  integrate them into their workflow without friction.</p> <pre><code>graph LR\n    subgraph repository[\"GitHub Repository\"]\n        sourcecode[\"Source Code\"]\n    end\n\n    subgraph pypi[\"Python Index Repository\"]\n        direction LR\n        mlxplain[\"MLxplain package\"]\n        dimlpfidex[\"dimlpfidex package\"]\n        rulesextract[\"rules-extraction package\"]\n    end\n\n    subgraph user[\"User\"]\n        cli[\"Terminal CLI\"]\n    end\n\n    repository --&gt; |automated compilation|pypi\n    pypi --&gt; |pip install|cli</code></pre> <p>To obtain the Python package, follow the Installation guide.</p>"},{"location":"usage/#containerized-images","title":"Containerized images","text":"<p>Additionally to the use cases available as online interactive session, the platform offers ready-to-use deployment solutions in the form of downloadable Docker images available in the public GitHub artifact registry. This streamlined deployment of notebooks and datasets includes all the necessary libraries, allowing users to concentrate on explainability issues.</p> <p>The following solutions are provided to facilitate deployment:</p> <ul> <li>Notebook Server Package: A pre-configured environment for running Jupyter notebooks.</li> <li>Python XAI Libraries: All essential XAI libraries, including our custom algorithms and OmniXAI.</li> <li>CUDA Support: Hardware-accelerated support for notebooks for users with NVIDIA graphics cards.</li> </ul> <pre><code>graph LR\n    subgraph Repo[\"GitHub repository\"]\n            subgraph Docker[\"Docker Resources\"]\n                direction LR\n                notebookServer[\"Jupyter server\"]\n                notebookLibs[\"PyTorch &amp; CUDA\"]\n                dockerfile[\"Dockerfile\"]\n            end\n        end\n\n        subgraph Registry[\"Artifact Registry\"]\n            dockerImages[\"Docker Images\"]\n        end\n\n        subgraph user[\"User\"]\n            privateServer[\"Private deployment\"]\n        end\n\n    Docker --&gt; Registry\n    Registry --&gt; privateServer</code></pre>  Using Docker images in a local session <p>How to use notebooks locally</p> <p>If you prefer the flexibility of a local session, we provid you with the necessary tools to launch notebooks conveniently on your machine. Simply set up a local session with our provided Docker Compose files.</p>  Local session: How to install Docker Desktop <p>The provided Docker Compose files allow you to easily launch Jupyter notebooks and embedded data locally, giving you convenient access to the notebook content and data.</p> <p>You only need to install Docker Desktop and then download the Docker Compose file.</p> <ul> <li>Go to the Docker website</li> <li>Download the appropriate Docker Desktop version for your operating system (:simple-windows11:  ).</li> <li>Open a terminal or command prompt and run <code>docker version</code> to verify the installation.</li> <li>Ensure Docker Desktop is running.</li> <li>Download the Docker Compose files on this page and launch them with <code>docker compose up -f path/to/docker-compose.yml</code>.</li> </ul> <p>These containerized versions of our platform components allow for easy deployment on local machines or within private cloud environments. This is especially useful for advanced users and enterprises, where a private deployment of the platform allows some key advantages:</p> <ul> <li>Private Datasets: Securely manage and use private datasets within the HES-XPLAIN platform.</li> <li>Deployment Flexibility: Deploy our solutions within private infrastructures using Kubernetes or other orchestration tools.</li> </ul>"},{"location":"usage/#platform-expansion","title":"Platform expansion","text":"<p>The platform is designed to be a flexible and collaborative tool,  allowing anyone to add new algorithms to improve its explanatory capabilities. It also supports the creation of new notebooks for improved usability.</p> <p>We have already used and extended the existing OmniXAI framework, leveraging its extensive documentation to incorporate new algorithms and ensure their seamless integration.</p> <p>We strongly encourage contributions not only to the platform itself but also to the development of our algorithms. We aim to continuously improve the platform and expand its functionality in a collaborative manner, making it a valuable resource for the community.</p>"},{"location":"usage/#architecture-overview","title":"Architecture overview","text":"<pre><code>graph LR\n\n    subgraph External[\"External projects\"]\n        direction LR\n        omnixai[\"OmniXAI\"]\n    end\n\n    subgraph Repo[\"GitHub repository\"]\n        direction LR\n        souceCode[\"Source code\"]\n        dockerres[\"Docker resources\"]\n        notebooksSrc[\"Notebook sources\"]\n    end\n\n    subgraph Pypi[\"Python Index repository\"]\n        direction TB\n        mlxplain[\"MLxplain package\"]\n        dimlpfidex[\"dimlpfidex package\"]\n        rulesextract[\"rules-extraction package\"]\n    end\n\n    subgraph Website[\"Website\"]\n        direction LR\n        overview[\"Project overview\"]\n        notebookLinks[\"Notebooks index\"]\n        docs[\"Docs. &amp; API ref.\"]\n    end\n\n    subgraph Datasets[\"Dataset repositories\"]\n        direction LR\n        kaggle[\"Kaggle\"]\n        huggingface[\"Hugging face\"]\n    end\n\n    subgraph Notebooks[\"Notebooks\"]\n        direction LR\n        colab[\"Google colab\"]\n        docker[\"Docker images\"]\n    end\n\n    subgraph Endusers[\"End users\"]\n        direction LR\n        decisionMakers[\"Decision makers\"]\n        engineers[\"Engineers\"]\n        dataScientists[\"Data scientists\"]\n        enthousiasts[\"Students &amp; ML enthousiasts\"]\n    end\n\n    omnixai-- \"empowers\" --&gt;mlxplain\n    souceCode-- \"is compiled into\" --&gt;Pypi\n    dockerres-- \"supplies\" --&gt;docker\n    souceCode-- \"is documented in\" --&gt;docs \n    notebooksSrc-- \"are hosted by\" --&gt;Notebooks\n    Notebooks-- \"provide help to\" --&gt;Endusers\n    Datasets-- \"can be used with\" --&gt;Notebooks\n    notebookLinks-- \"links to\" --&gt;Notebooks\n    Website-- \"enlight\" --&gt;Endusers\n    Pypi-- \"can be used by\" --&gt;Endusers\n    Pypi-- \"are used in\" --&gt;Notebooks\n</code></pre>"},{"location":"documentation/glossary/","title":"Glossary","text":""},{"location":"documentation/glossary/#definition-of-key-terms","title":"Definition of key terms","text":"Term Meaning Rule Logical statement defining conditions based on input data to predict a specific class. Local Rule Rule explaining the model's prediction for a specific data sample by focusing on the conditions relevant to that particular instance. Global rule Rule providing a general explanation of the model's behavior across the entire dataset. Antecedent A condition or statement in a rule that must be true for the rule to be activated. Fidel/Fidelity Measures how well a rule or a set of rules aligns with the model\u2019s predictions. Accuracy Proportion of correctly predicted classes compared to the total number of predictions. Covered samples Set of data samples that satisfy the conditions of a specific rule. Discriminant hyperplanes Boundaries in the feature space that separate different classes based on the conditions defined by a model."},{"location":"documentation/glossary/#acronyms-and-abbreviations","title":"Acronyms and abbreviations","text":"Acronym/abbreviation Meaning DIMLP Discretized Interpretable Multi-Layer Perceptron dimlpBT DIMLP + Bag Training dimlpCls DIMLP + Classification dimlpTrn DIMLP + Training dimlpRul DIMLP + Rules extraction dimlpPred DIMLP + Predictions densCls Dense + Classification svmTrn Support Vector Machine + Training mlpTrn MultiLayer Perceptron + Training gradBoostTrn Gradient Boosting + Training randForestsTrn Random Forest + Training cnnTrn Convolutional Neural Network + Training Fidex Fidel Explaination FidexGlo Fidex + Global AI Artificial Intelligence XAI eXplainable AI CLI Command Line Interface GUI Graphical User Interface"},{"location":"documentation/installation-guide/","title":"Installation guide","text":""},{"location":"documentation/installation-guide/#prerequisites","title":"Prerequisites","text":"<p>Before starting the installation process, ensure to have <code>python 3.9</code> or newer (<code>3.11</code> is recommended) installed on your machine. Please refer to the Python official website for further information concerning the installation process.</p> <p>This can be achieved on <code>Windows</code>, <code>Linux</code>, and <code>macOS</code>.</p> <pre><code>python --version\n</code></pre> <p>The output of the command above should tell you what version is installed on your machine.</p> <p>Then, check if you also have <code>pip</code> installed. Note you might need to install <code>python3-pip</code> on some Linux distributions.</p> WindowsLinuxmacOS <pre><code>python -m pip --version\n</code></pre> <pre><code>pip --version\n</code></pre> <pre><code>pip --version\n</code></pre> <p>It should respond with an output similar to the example below: <pre><code>pip 22.0.2 from /usr/lib/python3/dist-packages/pip (python 3.10)\n</code></pre></p> <p>You are now ready to continue with the desired installation guide below.</p>"},{"location":"documentation/installation-guide/#virtual-environment","title":"Virtual environment","text":"<p>Create a virtual environment for your project and activate it. Note you might need to install <code>python3-venv</code> on some Linux distributions.</p> WindowsLinuxmacOS <pre><code>python3 -m venv .venv\n.venv/Scripts/activate\n</code></pre> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre>"},{"location":"documentation/installation-guide/#mlxplain-installation","title":"MLxplain installation","text":"<p>Here you can find the only step to follow to install the <code>mlxplain</code> package on your machine.</p> <p>Install the <code>mlxplain</code> package using <code>pip</code>:</p> <pre><code>python -m pip install mlxplain\n</code></pre> <p>Now, you should be ready to use the <code>mlxplain</code> library. You can continue to follow the mlxplain examples to learn more about how to use this tool.</p>"},{"location":"documentation/installation-guide/#rules-extraction-installation","title":"Rules extraction installation","text":"<p>Here you can find the only step to follow to install the <code>rules-extraction</code> project on your machine.</p> <p>Install the <code>rule-extraction</code> package using <code>pip</code>:</p> <pre><code>python -m pip install rules-extraction\n</code></pre> <p>Now, you should be ready to use the <code>rules-extraction</code> library. You can continue to follow the rules extraction examples to learn more about how to use this tool.</p>"},{"location":"documentation/installation-guide/#dimlpfidex-installation","title":"Dimlpfidex installation","text":"<p>Here you can find the only step to follow to install the <code>dimlpfidex</code> project on your machine.</p> <p>Install the <code>dimlpfidex</code> package using <code>pip</code>:</p> <pre><code>python -m pip install dimlpfidex\n</code></pre> <p>To validate all the above steps, try to call one of the algorithms from the <code>dimlpfidex</code> package. To do so, import <code>Fidex</code> from <code>dimlpfidex</code> and call the <code>FidexGloRules</code> function inside your python interpreter:</p> <pre><code>&gt;&gt;&gt; from dimlpfidex import fidex\n&gt;&gt;&gt; fidex.fidexGloRules()\n</code></pre> <p>Ensure you have the same output as below: <pre><code>---------------------------------------------------------------------\n\nWarning! The files are located with respect to the root folder dimlpfidex.\nThe arguments can be specified in the command or in a json configuration file with --json_config_file your_config_file.json.\n\n----------------------------\n\nRequired parameters:\n\n--train_data_file &lt;str&gt;       Path to the file containing the train portion of the dataset\n--train_class_file &lt;str&gt;      Path to the file containing the train true classes of the dataset, not mandatory if classes are specified in train data file\n(...)\n</code></pre></p> <p>You are now set to use all <code>dimlpfidex</code> tools! You can continue to follow the getting-started tutorial to learn more about how to use the different tools available.</p>"},{"location":"documentation/license/","title":"Licenses","text":"<p>Note</p> <p>Please always consider the license inside the Github repositories as the real reference.</p>"},{"location":"documentation/license/#bsd-3-clause-license","title":"BSD 3-Clause License","text":"<p>Terms of the BSD 3-Clause License, used for our algorithms code, documentation and website:</p> <pre><code>BSD 3-Clause License\n\nCopyright (c) 2023, HES-XPLAIN\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"documentation/license/#mit-license","title":"MIT License","text":"<p>Terms of the MIT License from nlohmann/json, a dependency of the DIMLPfidex library.</p> <pre><code>MIT License \n\nCopyright (c) 2013-2022 Niels Lohmann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"documentation/overview/","title":"Documentation","text":"<p>Welcome to the HES-XPLAIN official documentation. This page holds the entire project documentation for our collection of algorithms designed for various computational tasks in the XAI field.</p> <p>Here is a selection of subjects that may fit your needs.</p> <ul> <li> <p> Installation guide</p> <p>How to rapidly install <code>dimlpfidex</code>, <code>rule-extraction</code>, and <code>MLxplain</code>.</p> <p> get the installation guide</p> </li> <li> <p> Dimlpfidex graphical User Interface</p> <p>Having trouble trying to deal with JSON configuration files? </p> <p> Try the GUI</p> </li> <li> <p> Dimlpfidex documentation</p> <p>All <code>dimlpfidex</code> algorithms are described here.</p> <p> Dive in</p> </li> <li> <p> Rules extraction documentation</p> <p>All about the <code>rules extractions</code> library.</p> <p> Dive in</p> </li> <li> <p> MLxplain documentation</p> <p>All about the <code>MLxplain</code> library.</p> <p> Dive in</p> </li> <li> <p> API reference</p> <p>Technical documentation for core features.</p> <p> API reference</p> </li> <li> <p> References</p> <p>Academic papers and online ressources.</p> <p> References</p> </li> <li> <p> License</p> <p>HES-XPLAIN licenses.</p> <p> License</p> </li> </ul>"},{"location":"documentation/references/","title":"References","text":""},{"location":"documentation/references/#related-academic-papers","title":"Related academic papers","text":""},{"location":"documentation/references/#fidex-an-algorithm-for-the-explainability-of-ensembles-and-svms","title":"Fidex: An Algorithm for the Explainability of Ensembles and SVMs","text":"<p>2024, by Prof. Guido Bologna, Jean-Marc Boutay, Quentin Leblanc &amp; Damian Boquete</p>"},{"location":"documentation/references/#a-rule-extraction-technique-applied-to-ensembles-of-neural-networks-random-forests-and-gradient-boosted-trees","title":"A Rule Extraction Technique Applied to Ensembles of Neural Networks, Random Forests, and Gradient-Boosted Trees","text":"<p>2021, by Prof. Guido Bologna</p>"},{"location":"documentation/references/#a-two-step-rule-extraction-technique-for-a-cnn","title":"A Two-Step Rule-Extraction Technique for a CNN","text":"<p>2020, by Prof. Guido Bologna &amp; Silvio Fossati</p>"},{"location":"documentation/references/#a-simple-convolutional-neural-network-with-rule-extraction","title":"A Simple Convolutional Neural Network with Rule Extraction","text":"<p>2019, by Prof. Guido Bologna</p>"},{"location":"documentation/references/#exploring-internal-representations-of-deep-neural-networks","title":"Exploring Internal Representations of Deep Neural Networks","text":"<p>2019, by J\u00e9r\u00e9mie Despraz, St\u00e9phane Gomez, H\u00e9ctor F. Satiz\u00e1bal &amp; Prof. Carlos Andr\u00e9s Pe\u00f1a-Reyes</p>"},{"location":"documentation/references/#improving-neural-network-interpretability-via-rule-extraction","title":"Improving neural network interpretability via rule extraction","text":"<p>2018, by St\u00e9phane Gomez Schnyder, J\u00e9r\u00e9mie Despraz &amp; Prof. Carlos Andr\u00e9s Pe\u00f1a-Reyes</p>"},{"location":"documentation/references/#a-comparison-study-on-rule-extraction-from-neural-network-ensembles-boosted-shallow-trees-and-svms","title":"A Comparison Study on Rule Extraction from Neural Network Ensembles, Boosted Shallow Trees, and SVMs","text":"<p>2018, by Prof. Guido Bologna &amp; Yoichi Hayashi</p>"},{"location":"documentation/references/#qsvm-a-support-vector-machine-for-rule-extraction","title":"QSVM: A support vector machine for rule extraction.","text":"<p>2015, by Prof. Guido Bologna &amp; Yoichi Hayashi</p>"},{"location":"documentation/references/#elevating-the-discussion-on-security-management-the-data-centric-paradigm","title":"Elevating the discussion on security management: The data centric paradigm.","text":"<p>2007, by Tyrone Grandison, Prof. Marcel Graf et al.</p>"},{"location":"documentation/references/#is-it-worth-generating-rules-from-neural-network-ensembles","title":"Is it worth generating rules from neural network ensembles?","text":"<p>2004, by Prof. Guido Bologna</p>"},{"location":"documentation/references/#a-model-for-single-and-multiple-knowledge-based-networks","title":"A model for single and multiple knowledge based networks.","text":"<p>2003, by Prof. Guido Bologna</p>"},{"location":"documentation/references/#a-fuzzy-genetic-approach-to-breast-cancer-diagnosis","title":"A fuzzy-genetic approach to breast cancer diagnosis","text":"<p>1999, by Prof. Carlos Andr\u00e9s Pe\u00f1a-Reyes &amp; Moshe Sipper</p>"},{"location":"documentation/references/#online-resources","title":"Online resources","text":""},{"location":"documentation/references/#dimlpfidex-github-repository","title":"dimlpfidex GitHub Repository","text":"<p>This is the official GitHub repository containing the code for the dimlpfidex algorithms.</p>"},{"location":"documentation/references/#mlxplain-github-repository","title":"mlxplain GitHub Repository","text":"<p>This repository contains the mlxplain package, which serves as a comprehensive framework designed to extend the capabilities of OmniXAI.</p>"},{"location":"documentation/references/#rules-extraction-github-repository","title":"rules-extraction GitHub Repository","text":"<p>This is the official GitHub repository containing the code for the rules-extraction algorithms.</p>"},{"location":"documentation/references/#docker-base-image-for-hes-xplain-notebooks","title":"Docker base image for HES-XPLAIN notebooks","text":"<p>The Docker base image is built upon the Jupyter Docker Stacks Pytorch image. It includes Jupyter and all dependency packages necessary to run the provided notebooks, while allowing Pytorch operations to use compatible NVIDIA GPUs for accelerated computations.</p>"},{"location":"documentation/dimlpfidex/getting-started/","title":"Getting started","text":"<p>To help you get started quickly in the field of XAI, specifically using the dimlpfidex algorithms, here is a recommended plan to follow:</p> <ol> <li>Install our algorithms following the installation guide.</li> <li>(Optional) Install our user interface following the GUI page.</li> <li>Take a moment to follow one of our notebooks. Here is a selection for you to dive into the use of <code>dimlpfidex</code> tools:</li> </ol> <ul> <li> <p>BCW Notebook</p> <p>Dive into breast cancer classification and rule extraction with dimlpBT and various Fidex algorithms.</p> <p> More</p> </li> <li> <p>OCD Notebook</p> <p>Dive into breast obesity risk classification and rule extraction with our random forest and various Fidex algorithms.</p> <p> More</p> </li> <li> <p>MNIST Notebook</p> <p>Dive into handwritten digits classification and rule extraction with our CNN and various Fidex algorithms.</p> <p> More</p> </li> <li> <p>Cracks Notebook</p> <p>Dive into surface cracks detection and rule extraction with our CNN using <code>VGG16</code> and various fidex algorithms.</p> <p> More</p> </li> <li> <p>OmniXAI Notebook</p> <p>Learn to use dimlpfidex within the OmniXAI library by exploring the heart attack prediction and extracting rules.</p> <p> More</p> </li> <li> <p>GUI Notebook</p> <p>Learn to use our user interface to ease your interaction with configuration files.</p> <p> More</p> </li> </ul>"},{"location":"documentation/dimlpfidex/gui/","title":"DimlpFidex Graphical User Interface","text":"<p>The dimlpfidex Graphical User Interface was made to help with <code>JSON configuration files</code>. All dimlpfidex algorithms can be fed with these files to supply all the data needed to execute them. However, you may not be experienced with <code>JSON</code> and <code>configuration files</code>. This is the reason why we offer you two outcomes: </p> <ol> <li>Learn by yourself how to write configuration files with our JSON configuration file documentation.</li> <li>Follow the next section to learn how to generate configuration files with this GUI.</li> </ol> <p> Welcome page</p>"},{"location":"documentation/dimlpfidex/gui/#installation-guide","title":"Installation guide","text":"<p>To install the dimlpfidex GUI, follow these steps:</p> WindowsLinux &amp; macOSWeb (OS agnostic) <ol> <li>Download the latest release</li> <li>Decompress the archive.</li> <li>Execute the program named <code>dimlpfidex_gui.exe</code>.</li> <li>Done!</li> </ol> <ol> <li>Download the latest release</li> <li>Decompress the archive.</li> <li>Execute the program named <code>dimlpfidex_gui</code>.</li> <li>Done!</li> </ol> <ol> <li>Download the latest release</li> <li>Decompress the archive.</li> <li>Execute the web app by installing node.js if needed and Running the following commands:     Linux<pre><code>cd PATH/TO/GUI-SOURCES/\nnpm install express\nnode app.js\n</code></pre> Windows<pre><code>dir PATH\\TO\\GUI-SOURCES\\\nnpm install express\nnode app.js\n</code></pre></li> <li>Open your browser and search for <code>localhost:8000</code></li> <li>Done!</li> </ol>"},{"location":"documentation/dimlpfidex/gui/#usage-guide","title":"Usage guide","text":"<p>To quickly learn how to use the GUI for generating configuration files, you can explore our notebook for a step-by-step guide.</p> <p>To get started with the GUI, open the app, choose the form corresponding to the algorithm you want to use, fill it out, and generate the configuration file by clicking the button at the bottom of the form.</p>"},{"location":"documentation/dimlpfidex/gui/#features-of-the-gui","title":"Features of the GUI","text":"<ul> <li>User-Friendly Forms: The GUI provides forms with dropdowns, checkboxes, and text inputs to simplify the creation and editing of JSON files.</li> <li>Validation: The GUI includes validation checks to ensure that the JSON configuration files and its embedded informations are correctly formatted.</li> <li>Large palette: It can generate a configuration file for every algorithm from <code>Fidex</code>, <code>DIMLP</code>, and <code>Training methods</code> ensembles.</li> <li>Embedded documentation: Has descriptions for every form's component and has a glossary explaining every single field purpose. </li> </ul> <p> Example of form</p>"},{"location":"documentation/dimlpfidex/gui/#fields-anatomy","title":"Field's anatomy","text":"<p>The GUI forms are composed of multiple fields, some are more complex than others. Here is an example of a field 'anatomy':</p> <p> Field anatomy</p> <p>Info</p> <p>Some numeric fields can have the upper bound <code>inf</code>, meaning infinity (which is not really infinite but it idicates that there is no fixed upper bound)</p> <ol> <li>Current Field Datatype Selector: Some fields are dynamic and can accept various types of input. This selector allows you to switch between different types, and it is currently active.  </li> <li>Unselected Field Datatype Selector: This selector is inactive but can be clicked to switch to a different field type.</li> <li>Lower Bound of a Numeric Field: In this example, a numeric field is displayed with a lower limit, preventing values from being set below this boundary.</li> <li>Field Name: Displays the <code>[datatype]</code> and the label of the field.</li> <li>Upper Bound of a Numeric Field: Similar to item #3, this field has an upper limit, preventing values from exceeding this boundary.</li> <li>Default Button: Clicking this button (when highlighted) automatically applies a default value to the field.</li> <li>Information Icon: When hovered over, this icon provides a description of the field.</li> <li>Required Icon: If highlighted, it indicates that the field is mandatory and cannot be left empty. </li> </ol> <p>Warning</p> <p>The web application cannot use the file browsing feature because of technical limitations.</p>"},{"location":"documentation/dimlpfidex/gui/#field-types","title":"Field types","text":"<p>The GUI is currently able to handle several types of data, including:</p> <p><code>integers</code> (numbers without fractional part)</p> <p> Example of numeric field</p> <p><code>double precision numbers</code> (numbers with fractional part)</p> <p><code>Strings</code> (sequence of characters)</p> <p><code>Restricted choices</code> (pre-defined keywords to select)</p> <p> Example of restricted choices</p> <p><code>File paths</code> (paths present in your system leading to a chosen file)</p> <p> Example of file path field</p> <p><code>Booleans</code> (yes or no answers)</p> <p><code>Directory paths</code> (paths present in your system leading to a chosen directory)</p> <p><code>Dictionaries</code> (key-pair collection)</p> <p><code>List of strings</code></p> <p><code>List of integers</code></p> <p><code>List of file paths</code></p> <p><code>List of double precision numbers</code></p>"},{"location":"documentation/dimlpfidex/overview/","title":"DimlpFidex Algorithms","text":"<p>Here you can find an overview of the different algorithm ensembles within the <code>dimlpfidex</code> framework. These ensembles are part of the dimlpfidex repository and are collectively referred to by this term.</p> <ul> <li> <p>Fidex</p> <p>Algorithms for rule extraction and interpretability.</p> <p> More</p> </li> <li> <p>DIMLP</p> <p>Algorithms for the Discretized Interpretable Multi-Layer Perceptron (DIMLP) model.</p> <p> More</p> </li> <li> <p>Training methods</p> <p>A variety of tools for machine learning training and additional functionalities.</p> <p> More</p> </li> <li> <p>File formats</p> <p>Need help with files used or generated by our algorithms?</p> <p> Help</p> </li> </ul>"},{"location":"documentation/dimlpfidex/dimlp/denscls/","title":"DensCls","text":""},{"location":"documentation/dimlpfidex/dimlp/denscls/#description","title":"Description","text":"<p>The <code>DimlpBT</code> model is an extension of the standard <code>Dimlp (Discretized Interpretable Multi-Layer Perceptron)</code> architecture, which applies the powerful technique of bagging to improve model accuracy and robustness. Bagging, or Bootstrap Aggregating, generates multiple versions of the training set by resampling and trains separate <code>Dimlp</code> networks on each dataset. The ensemble of networks is then aggregated to make final predictions, reducing variance and improving predictive performance, particularly on complex datasets. Like the base <code>Dimlp</code> model, this version leverages a discretized multi-layer perceptron, which uses a staircase activation function in the first hidden layer, creating a grid of hyper-rectangles in the feature space. These hyper-rectangles help define discriminant decision boundaries between classes, facilitating the extraction of symbolic rules.</p> <p>Through the use of <code>Dimlp</code>'s rule extraction process, this algorithm is capable of producing symbolic rules at both the single network and ensemble levels, offering interpretable insights into the decision-making process. The rule generation process in the <code>DIMLP</code> model relies on inducing a decision tree, where virtual hyperplanes are identified between these hyper-rectangles. The rule extraction algorithm extracts unordered rules in polynomial time using heuristic methods. This process ensures 100% fidelity with respect to the training data, meaning that the extracted rules perfectly match the network's decisions.</p> <p><code>DensCls</code> generates global explanation rules using the <code>Dimlp</code> algorithm on the training dataset used to train the model with dimlpBT, and calculates predictions and accuracy on a train and test dataset.</p> <p>Additionally, there is another rule extraction algorithm available in the framework called Fidex, which has a better algorithmic complexity and allows for both local and global rule extraction.</p> <p>To get more details on the <code>Dimlp</code> algorithm, you can refer to this paper, and to this one for <code>dimlpBT</code>.</p> <p>Warning</p> <p>You should not execute <code>DensCls</code> for a model trained by DimlpTrn, it should be trained by dimlpBT!</p>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#arguments-list","title":"Arguments list","text":"<p>The <code>densCls</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative from this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#train-data-file","title":"Train data file","text":"<p>File containing the training portion of the dataset. It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the training portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file. </p>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#weights-file","title":"Weights file","text":"<p>Path to the file containing the weights of the model trained with <code>dimlpBT</code>.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--weights_file</code> JSON identifier <code>weights_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#hidden-layers-file","title":"Hidden layers file","text":"<p>Path to the file containing hidden layers sizes.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--hidden_layers_file</code> JSON identifier <code>hidden_layers_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#train-predictions-output-file","title":"Train predictions output file","text":"<p>Name of file generated by <code>densCls</code> containing the predictions from the training portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--train_pred_outfile</code> JSON identifier <code>train_pred_outfile</code> Default value <code>densClsTrain.out</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#test-data-file","title":"Test data file","text":"<p>Path to the file containing the test portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#test-true-classes-file","title":"Test true classes file","text":"<p>Path to the file containing the test true classes of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#test-predictions-output-file","title":"Test predictions output file","text":"<p>Name of file generated by <code>densCls</code> containing the predictions from the test portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>densClsTest.out</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#attributes-file","title":"Attributes file","text":"<p>File containing attributes (inputs) and classes (outputs) names.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--attributes_file</code> JSON identifier <code>attributes_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain statistics concerning the algorithm execution.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#use-rule-extraction","title":"Use rule extraction","text":"<p>Whether to extract rules with <code>dimlpBT</code> algorithm.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--with_rule_extraction</code> JSON identifier <code>with_rule_extraction</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#global-rules-output-file","title":"Global rules output file","text":"<p>Path to the file where the output rule(s) generated by the dimlp algorithm will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--global_rules_outfile</code> JSON identifier <code>global_rules_outfile</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer during training. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#normalization-file","title":"Normalization file","text":"<p>File containing the mean and standard deviation for specified attributes that have been normalized. If specified, it is used to denormalize the rules.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--normalization_file</code> JSON identifier <code>normalization_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#mus","title":"Mus","text":"<p>Mean or median of each attribute index specified in normalization indices that have been normalized. This argument is used alongside sigmas and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--mus</code> JSON identifier <code>mus</code> Default value <code>None</code> <p>Warning</p> <p>If sigmas or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#sigmas","title":"Sigmas","text":"<p>Standard deviation of each attribute index specified in normalization indices that have been normalized. This argument is used alongside mus and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--sigmas</code> JSON identifier <code>sigmas</code> Default value <code>None</code> <p>Warning</p> <p>If mus or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#normalization-indices","title":"Normalization indices","text":"<p>Indices of attributes that have been normalized. If specified, it is used to denormalize the rules. Index starts at 0. Each index takes values in the range <code>[0,nb_attributes-1]</code>.</p> Property Value Is required No** Type <code>List of integers</code> CLI argument syntax <code>--normalization_indices</code> JSON identifier <code>normalization_indices</code> Default value <code>[0,...,nb_attributes-1]</code> <p>Warning</p> <p>If mus or sigmas are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.dimlp import densCls\n\ndensCls(\n\"\"\"--train_data_file train_data.txt \n--train_class_file train_class.txt \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--nb_attributes 16 \n--hidden_layers_file hidden_layers.out \n--nb_classes 2 \n--weights_file weights.wts \n--with_rule_extraction true \n--global_rules_outfile globalRules.rls \n--train_pred_outfile predTrain.out \n--test_pred_outfile testPred.out \n--stats_file stats.txt \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./densCls --train_data_file train_data.txt --train_class_file train_class.txt --test_data_file test_data.txt --test_class_file test_class.txt --nb_attributes 16 --hidden_layers_file hidden_layers.out --nb_classes 2 --weights_file weights.wts --with_rule_extraction true --global_rules_outfile globalRules.rls --train_pred_outfile predTrain.out --test_pred_outfile predTest.out --stats_file stats.txt --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/dimlp/denscls/#traintest-prediction-file","title":"Train/Test prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each train (or test) sample. Each row corresponds to the prediction for a single sample, with <code>N</code> values representing the probability that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The values in each row sum to 1. The class with the highest probability is considered the predicted class for that sample, unless a decision threshold is applied for a specific class. In that case, if the predicted probability for that class exceeds the threshold, the sample is classified as belonging to that class.</p> <p>For example:</p> <pre><code>0.000718874 0.999281\n0.949143 0.050857\n</code></pre> <p>In the first row, the model predicts a probability of approximately 0.0007 that the sample belongs to class 0, and 0.9993 that it belongs to class 1. Therefore, the model predicts class 1 for this sample. In the second row, the model predicts a probability of 0.949 that the sample belongs to class 0, and 0.051 that it belongs to class 1. Hence, the model predicts class 0 for this sample.</p> <p>Each row of probabilities allows you to interpret the model's confidence in its predictions, enabling you to understand the likelihood of each sample belonging to a particular class.</p>"},{"location":"documentation/dimlpfidex/dimlp/denscls/#statistics-file","title":"Statistics file","text":"<p>This file contains the global accuracy on the training and testing sets (if provided) across all the networks. It offers a clear overview of the model\u2019s performance across different datasets, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified samples in each dataset (training, validation, or testing)."},{"location":"documentation/dimlpfidex/dimlp/denscls/#global-rules-output-file_1","title":"Global rules output file","text":"<p>This file contains all the global rules computed with the <code>Dimlp</code> algorithm. The rules are ordered by their covering size and are followed by the performance metrics of each rule on the training and testing sets. Additionally, the file provides performance statistics of the ruleset and its application on testing data.</p> <p>Explanation of Each Rule:</p> <p>Each rule consists of conditions on various attributes, followed by the predicted class, and is accompanied by the number of training samples it covers. Let's break down this rule as an example:</p> <pre><code>Rule 1: (x1 &gt; 0.653808) (x2 &gt; 0.92407) (x8 &lt; 0.44302) Class = 1 (211)\n</code></pre> <code>x1, x2, x8</code> These represent the variables from the dataset (x1 is the first attribute). <code>&gt;0.653808, &gt;0.92407, &lt;0.44302</code> The thresholds that the variable values must meet for the rule to be activated. <code>Class = 1</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 1. <code>(211)</code> The number of training samples covered by the rule. Here, the rule covers 211 samples. <p>Performance Metrics Associated with the Rule:</p> <p>For each rule and each dataset, there is some performances associated with the rule. It appears like this :</p> <pre><code>Rule    1:   143   134     9     0.937063       Class = 1\n</code></pre> <code>143</code> The number of samples covered by this rule.  <code>134</code> The number of samples correctly classified by this rule. <code>9</code> The number of samples incorrectly classified by this rule. <code>0.937063</code> The accuracy of this rule in correctly classifying the samples it covers. <code>Class = 1</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 1. <p>It is followed by the global accuracy of the rules on the whole set. That means the accuracy of the ruleset in predicting the correct class for the samples, regardless of the model's predictions. It is accurate when there is a correct fidel activated rule, when no rule is activated and the model is correct, or when the activated rules are incorrect but all agree on the correct class.</p> <p>Global Statistics:</p> <code>Number of rules</code> Indicates the total number of rules in the ruleset. <code>Number of antecedents</code> Represents the total number of conditions (antecedents) in the ruleset. <code>Number of antecedents per rule</code> Represents the average number of conditions (antecedents) in each rule. <code>Number of examples per rule</code> The average number of training samples covered by each rule. <p>Additional Statistics on testing set:</p> <code>Fidelity</code> Measures how accurately the rules mimic the behavior of the model. This rate reflects the proportion of test samples where the rules' predictions match the model's predictions. <code>Accuracy when rules and network agree</code> The accuracy of the model when the model's predictions match the predictions made by the activated rules. <code>Default rule activations rate</code> The proportion of samples for which no activated rule is found. In such cases, we choose the network's decision."},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/","title":"DimlpBT","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#description","title":"Description","text":"<p>The <code>DimlpBT</code> model is an extension of the standard <code>Dimlp (Discretized Interpretable Multi-Layer Perceptron)</code> architecture, which applies the powerful technique of bagging to improve model accuracy and robustness. Bagging, or Bootstrap Aggregating, generates multiple versions of the training set by resampling and trains separate <code>Dimlp</code> networks on each dataset. The ensemble of networks is then aggregated to make final predictions, reducing variance and improving predictive performance, particularly on complex datasets. Like the base <code>Dimlp</code> model, this version leverages a discretized multi-layer perceptron, which uses a staircase activation function in the first hidden layer, creating a grid of hyper-rectangles in the feature space. These hyper-rectangles help define discriminant decision boundaries between classes, facilitating the extraction of symbolic rules.</p> <p>Through the use of <code>Dimlp</code>'s rule extraction process, this algorithm is capable of producing symbolic rules at both the single network and ensemble levels, offering interpretable insights into the decision-making process. The rule generation process in the <code>DIMLP</code> model relies on inducing a decision tree, where virtual hyperplanes are identified between these hyper-rectangles. The rule extraction algorithm extracts unordered rules in polynomial time using heuristic methods. This process ensures 100% fidelity with respect to the training data, meaning that the extracted rules perfectly match the network's decisions.</p> <p>Additionally, there is another rule extraction algorithm available in the framework called Fidex, which has a better algorithmic complexity and allows for both local and global rule extraction.</p> <p>To get more details on the <code>Dimlp</code> algorithm, you can refer to this paper, and to this one for <code>dimlpBT</code>.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#arguments-list","title":"Arguments list","text":"<p>The <code>dimlpBT</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative from this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#train-data-file","title":"Train data file","text":"<p>File containing the training portion of the dataset. It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the training portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file. </p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#number-of-dimlp-nets","title":"Number of Dimlp nets","text":"<p>Number of networks trained with bagging. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_dimlp_nets</code> JSON identifier <code>nb_dimlp_nets</code> Default value <code>25</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#train-predictions-output-file","title":"Train predictions output file","text":"<p>Path to the file where the train predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--train_pred_outfile</code> JSON identifier <code>train_pred_outfile</code> Default value <code>dimlpBTTrain.out</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#test-data-file","title":"Test data file","text":"<p>Path to the file containing the test portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#test-true-classes-file","title":"Test true classes file","text":"<p>Path to the file containing the test true classes of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#test-prediction-output-file","title":"Test prediction output file","text":"<p>Path to the file where the test predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>dimlpBTTest.out</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#weights-output-file","title":"Weights output file","text":"<p>Path to the file where the output trained weights of the model will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--weights_outfile</code> JSON identifier <code>weights_outfile</code> Default value <code>dimlpBT.wts</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#attributes-file","title":"Attributes file","text":"<p>File containing attributes (inputs) and classes (outputs) names.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--attributes_file</code> JSON identifier <code>attributes_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain statistics concerning the algorithm execution.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>statsDimlpBT.txt</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#first-hidden-layer","title":"First hidden layer","text":"<p>Number of neurons in the first hidden layer. Takes multiples of the number of attributes as values.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--first_hidden_layer</code> JSON identifier <code>first_hidden_layer</code> Default value <code>nb_attributes</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#hidden-layers","title":"Hidden layers","text":"<p>Number of neurons in each hidden layer, from the second layer to the last. Each number takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>List of integers</code> CLI argument syntax <code>--hidden_layers</code> JSON identifier <code>hidden_layers</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#hidden-layers-output-file","title":"Hidden layers output file","text":"<p>Path to the file where output hidden layers sizes will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--hidden_layers_outfile</code> JSON identifier <code>hidden_layers_outfile</code> Default value <code>hidden_layers.out</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#use-rule-extraction","title":"Use rule extraction","text":"<p>Whether to extract rules with dimlpBT algorithm.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--with_rule_extraction</code> JSON identifier <code>with_rule_extraction</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#global-rules-output-file","title":"Global rules output file","text":"<p>Path to the file where the output rule(s) generated by the dimlp algorithm will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--global_rules_outfile</code> JSON identifier <code>global_rules_outfile</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#learning-rate","title":"Learning rate","text":"<p>Back-propagation learning parameter. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--learning_rate</code> JSON identifier <code>learning_rate</code> Default value <code>0.1</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#momentum","title":"Momentum","text":"<p>Back-propagation momentum parameter. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--momentum</code> JSON identifier <code>momentum</code> Default value <code>0.6</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#flat-spot","title":"Flat spot","text":"<p>Back-propagation flat spot elimination parameter. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--flat</code> JSON identifier <code>flat</code> Default value <code>0.01</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#error-threshold","title":"Error threshold","text":"<p>Error threshold to stop training. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--error_thresh</code> JSON identifier <code>error_thresh</code> Default value <code>None</code> <p>Warning</p> <p>You should specify a big number in nb_epochs otherwise it may not have enough time to stop with this criterion.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#accuracy-threshold","title":"Accuracy threshold","text":"<p>Accuracy threshold to stop training. Takes values in the range <code>]0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--acc_thresh</code> JSON identifier <code>acc_thresh</code> Default value <code>None</code> <p>Warning</p> <p>You should specify a big number in nb_epochs otherwise it may not have enough time to stop with this criterion.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#absolute-error-threshold","title":"Absolute error threshold","text":"<p>Absolute difference error threshold, 0 if not using this stopping criteria. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--abs_error_thresh</code> JSON identifier <code>abs_error_thresh</code> Default value <code>0</code> <p>Warning</p> <p>You should specify a big number in nb_epochs otherwise it may not have enough time to stop with this criterion.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#number-of-epochs","title":"Number of epochs","text":"<p>Number of model training epochs. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_epochs</code> JSON identifier <code>nb_epochs</code> Default value <code>1500</code> <p>Warning</p> <p>You should specify a big number of epochs if you want to use a stopping criterion instead.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#number-of-epochs-before-showing-error-metric","title":"Number of epochs before showing error metric","text":"<p>Number of training epochs before showing error. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_epochs_error</code> JSON identifier <code>nb_epochs_error</code> Default value <code>10</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#number-of-examples-per-net","title":"Number of examples per net","text":"<p>Number of examples for one single network, 0 for all examples, it is not recommended to change this value. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_ex_per_net</code> JSON identifier <code>nb_ex_per_net</code> Default value <code>0</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#normalization-file","title":"Normalization file","text":"<p>File containing the mean and standard deviation for specified attributes that have been normalized. If specified, it is used to denormalize the rules.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--normalization_file</code> JSON identifier <code>normalization_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#mus","title":"Mus","text":"<p>Mean or median of each attribute index specified in normalization indices that have been normalized. This argument is used alongside sigmas and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--mus</code> JSON identifier <code>mus</code> Default value <code>None</code> <p>Warning</p> <p>If sigmas or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#sigmas","title":"Sigmas","text":"<p>Standard deviation of each attribute index specified in normalization indices that have been normalized. This argument is used alongside mus and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--sigmas</code> JSON identifier <code>sigmas</code> Default value <code>None</code> <p>Warning</p> <p>If mus or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#normalization-indices","title":"Normalization indices","text":"<p>Indices of attributes that have been normalized. If specified, it is used to denormalize the rules. Index starts at 0. Each index takes values in the range <code>[0,nb_attributes-1]</code>.</p> Property Value Is required No** Type <code>List of integers</code> CLI argument syntax <code>--normalization_indices</code> JSON identifier <code>normalization_indices</code> Default value <code>[0,...,nb_attributes-1]</code> <p>Warning</p> <p>If mus or sigmas are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#seed","title":"Seed","text":"<p>Number to feed the random generator. If <code>0</code>, the randomness cannot be reproduced. If any other number <code>x</code> is used, you can reproduce the same output if <code>x</code> is re-used. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--seed</code> JSON identifier <code>seed</code> Default value <code>0</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.dimlp import dimlpBT\n\ndimlpBT(\n\"\"\"--train_data_file train_data.txt \n--train_class_file train_class.txt \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--nb_attributes 16 \n--hidden_layers 5 \n--nb_classes 2 \n--nb_dimlp_nets 2 \n--weights_outfile weights.wts \n--with_rule_extraction true \n--global_rules_outfile globalRules.rls \n--train_pred_outfile predTrain.out \n--test_pred_outfile predTest.out \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./dimlpBT --train_data_file train_data.txt --train_class_file train_class.txt --test_data_file test_data.txt --test_class_file test_class.txt --nb_attributes 16 --hidden_layers 5 --nb_classes 2 --nb_dimlp_nets 2 --weights_outfile weights.wts --with_rule_extraction true --global_rules_outfile globalRules.rls --train_pred_outfile predTrain.out --test_pred_outfile predTest.out --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#traintest-prediction-file","title":"Train/Test prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each train (or test) sample. Each row corresponds to the prediction for a single sample, with <code>N</code> values representing the probability that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The values in each row sum to 1. The class with the highest probability is considered the predicted class for that sample, unless a decision threshold is applied for a specific class. In that case, if the predicted probability for that class exceeds the threshold, the sample is classified as belonging to that class.</p> <p>For example:</p> <pre><code>0.000718874 0.999281\n0.949143 0.050857\n</code></pre> <p>In the first row, the model predicts a probability of approximately 0.0007 that the sample belongs to class 0, and 0.9993 that it belongs to class 1. Therefore, the model predicts class 1 for this sample. In the second row, the model predicts a probability of 0.949 that the sample belongs to class 0, and 0.051 that it belongs to class 1. Hence, the model predicts class 0 for this sample.</p> <p>Each row of probabilities allows you to interpret the model's confidence in its predictions, enabling you to understand the likelihood of each sample belonging to a particular class.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#weights-output-file_1","title":"Weights output file","text":"<p>This file contains the weights and biases between successive layers of neurons in each neural networks.</p> <ul> <li>Odd rows of each network in the file represent the bias values of neurons related to the next layer l<sub>i+1</sub>. There is one bias value for each neuron in that layer.</li> <li>Even rows represent the values of the weight matrix between the current layer l<sub>i</sub> and the next layer l<sub>i+1</sub>.</li> </ul> <p>If layer l<sub>i</sub> has m neurons and layer l<sub>i+1</sub> has n neurons, the weights are represented as a single row in the file in the following format:</p> <pre><code>w_11 w_21 w_31 ... w_m1  w_12 w_22 w_32 ... w_m2  ...  w_1n w_2n w_3n ... w_mn\n</code></pre> <p>Where w<sub>ij</sub> is the weight connecting the i<sup>th</sup> neuron in layer l<sub>i</sub> to the j<sup>th</sup> neuron in layer l<sub>i+1</sub>.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#statistics-file","title":"Statistics file","text":"<p>This file contains accuracy and error measurements on the training, validation, and testing sets (if provided), as well as the global accuracy for training and testing set across all the networks. It offers a clear overview of the model\u2019s performance across different datasets, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified samples in each dataset (training, validation, or testing). <code>Sum squared error</code> Represents the sum of the squared differences between the predicted and actual values for the samples in each dataset. It is a measure of the model\u2019s overall error for a given set."},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#hidden-layers-file","title":"Hidden layers file","text":"<p>This file contains the configuration of the neural network, specifying the number of neurons in each layer. Each row corresponds to a layer in the network.</p> <ul> <li>The first number indicates the layer number.</li> <li>The second number indicates the number of neurons in that layer.</li> </ul> <p>Example:</p> <pre><code>1 16\n2 5\n</code></pre> <p>In this example the first layer has 16 neurons and the second has 5.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpbt/#global-rules-output-file_1","title":"Global rules output file","text":"<p>This file contains all the global rules computed with the <code>Dimlp</code> algorithm. The rules are ordered by their covering size and are followed by the performance metrics of each rule on the training and testing sets. Additionally, the file provides performance statistics of the ruleset and its application on testing data.</p> <p>Explanation of Each Rule:</p> <p>Each rule consists of conditions on various attributes, followed by the predicted class, and is accompanied by the number of training samples it covers. Let's break down this rule as an example:</p> <pre><code>Rule 1: (x1 &gt; 0.653808) (x2 &gt; 0.92407) (x8 &lt; 0.44302) Class = 1 (211)\n</code></pre> <code>x1, x2, x8</code> These represent the variables from the dataset (x1 is the first attribute). <code>&gt;0.653808, &gt;0.92407, &lt;0.44302</code> The thresholds that the variable values must meet for the rule to be activated. <code>Class = 1</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 1. <code>(211)</code> The number of training samples covered by the rule. Here, the rule covers 211 samples. <p>Performance Metrics Associated with the Rule:</p> <p>For each rule and each dataset, there is some performances associated with the rule. It appears like this :</p> <pre><code>Rule    1:   143   134     9     0.937063       Class = 1\n</code></pre> <code>143</code> The number of samples covered by this rule.  <code>134</code> The number of samples correctly classified by this rule. <code>9</code> The number of samples incorrectly classified by this rule. <code>0.937063</code> The accuracy of this rule in correctly classifying the samples it covers. <code>Class = 1</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 1. <p>It is followed by the global accuracy of the rules on the whole set. That means the accuracy of the ruleset in predicting the correct class for the samples, regardless of the model's predictions. It is accurate when there is a correct fidel activated rule, when no rule is activated and the model is correct, or when the activated rules are incorrect but all agree on the correct class.</p> <p>Global Statistics:</p> <code>Number of rules</code> Indicates the total number of rules in the ruleset. <code>Number of antecedents</code> Represents the total number of conditions (antecedents) in the ruleset. <code>Number of antecedents per rule</code> Represents the average number of conditions (antecedents) in each rule. <code>Number of examples per rule</code> The average number of training samples covered by each rule. <p>Additional Statistics on testing set:</p> <code>Fidelity</code> Measures how accurately the rules mimic the behavior of the model. This rate reflects the proportion of test samples where the rules' predictions match the model's predictions. <code>Accuracy when rules and network agree</code> The accuracy of the model when the model's predictions match the predictions made by the activated rules. <code>Default rule activations rate</code> The proportion of samples for which no activated rule is found. In such cases, we choose the network's decision."},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/","title":"DimlpCls","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#description","title":"Description","text":"<p>The <code>Discretized Interpretable Multi-Layer Perceptron (DIMLP)</code> is a neural network architecture that combines the predictive power of a traditional Multi-Layer Perceptron (MLP) with the ability to extract interpretable rules. Unlike conventional neural networks, <code>DIMLP</code> uses a staircase activation function in the first hidden layer, creating a grid of hyper-rectangles in the feature space. These hyper-rectangles help define discriminant decision boundaries between classes, facilitating the extraction of symbolic rules.</p> <p><code>DimlpCls</code> generates predictions and calculates accuracy on a test dataset using the model trained by dimlpTrn. It also retrieves the values of the neurons in the first hidden layer, making it particularly useful for understanding the intermediate representations of data within the model.</p> <p>For more details on the <code>Dimlp</code> algorithm, you can refer to this paper.</p> <p>Warning</p> <p>You should not execute <code>DimlpCls</code> for a model trained by DimlpBT, it should be trained by dimlpTrn!</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#arguments-list","title":"Arguments list","text":"<p>The <code>dimlpCls</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative from this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#test-data-file","title":"Test data file","text":"<p>File containing the test portion of the dataset. It can also contain test \"true classes\" (see Test true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the test portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the test data file. </p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#weights-file","title":"Weights file","text":"<p>Path to the file containing the weights of the model trained with <code>dimlpTrn</code>.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--weights_file</code> JSON identifier <code>weights_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#hidden-layers-file","title":"Hidden layers file","text":"<p>Path to the file containing hidden layers sizes.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--hidden_layers_file</code> JSON identifier <code>hidden_layers_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#test-predictions-output-file","title":"Test predictions output file","text":"<p>Path to the file where the test predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>dimlpTest.out</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#first-hidden-layer-file","title":"First hidden layer file","text":"<p>Path to the file where the first hidden layer values will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--hid_file</code> JSON identifier <code>hid_file</code> Default value <code>dimlpTest.hid</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain statistics concerning the algorithm execution.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer during training. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.dimlp import dimlpCls\n\ndimlpCls(\n\"\"\"--test_data_file test_data.txt \n--test_class_file test_class.txt \n--weights_file weights.wts \n--nb_attributes 16 \n--hidden_layers_file hidden_layers.out \n--nb_classes 2 \n--test_pred_outfile predTest.out \n--stats_file stats.txt \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./dimlpCls --test_data_file test_data.txt --test_class_file test_class.txt --weights_file weights.wts --nb_attributes 16 --hidden_layers_file hidden_layers.out --nb_classes 2 --test_pred_outfile predTest.out --stats_file stats.txt --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#test-prediction-file","title":"Test prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each test sample. Each row corresponds to the prediction for a single sample, with <code>N</code> values representing the probability that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The values in each row sum to 1. The class with the highest probability is considered the predicted class for that sample, unless a decision threshold is applied for a specific class. In that case, if the predicted probability for that class exceeds the threshold, the sample is classified as belonging to that class.</p> <p>For example:</p> <pre><code>0.000718874 0.999281\n0.949143 0.050857\n</code></pre> <p>In the first row, the model predicts a probability of approximately 0.0007 that the sample belongs to class 0, and 0.9993 that it belongs to class 1. Therefore, the model predicts class 1 for this sample. In the second row, the model predicts a probability of 0.949 that the sample belongs to class 0, and 0.051 that it belongs to class 1. Hence, the model predicts class 0 for this sample.</p> <p>Each row of probabilities allows you to interpret the model's confidence in its predictions, enabling you to understand the likelihood of each sample belonging to a particular class.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#statistics-file","title":"Statistics file","text":"<p>This file contains accuracy and error measurements on the testing set. It offers a clear overview of the model\u2019s performance, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified test samples. <code>Sum squared error</code> Represents the sum of the squared differences between the predicted and actual values for the test samples. It is a measure of the model\u2019s overall error."},{"location":"documentation/dimlpfidex/dimlp/dimlpcls/#hidden-layer-file","title":"Hidden layer file","text":"<p>This file contains the activation values of the neurons in the first hidden layer of the network for each test sample after a forward pass through the network.</p> <ul> <li> <p>Rows: Each row corresponds to a different test sample.</p> </li> <li> <p>Values: Each value within a row represents the activation of a specific neuron in the first hidden layer. The number of values per row corresponds to the number of neurons in that hidden layer.</p> </li> </ul>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/","title":"DimlpPred","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#description","title":"Description","text":"<p>The <code>Discretized Interpretable Multi-Layer Perceptron (DIMLP)</code> is a neural network architecture that combines the predictive power of a traditional Multi-Layer Perceptron (MLP) with the ability to extract interpretable rules. Unlike conventional neural networks, <code>DIMLP</code> uses a staircase activation function in the first hidden layer, creating a grid of hyper-rectangles in the feature space. These hyper-rectangles help define discriminant decision boundaries between classes, facilitating the extraction of symbolic rules.</p> <p><code>DimlpPred</code> generates predictions on a test dataset using the model trained by dimlpTrn.</p> <p>For more details on the <code>Dimlp</code> algorithm, you can refer to this paper.</p> <p>Warning</p> <p>You should not execute <code>DimlpPred</code> for a model trained by DimlpBT, it should be trained by dimlpTrn!</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#arguments-list","title":"Arguments list","text":"<p>The <code>dimlpPred</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative from this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#test-data-file","title":"Test data file","text":"<p>File containing the test portion of the dataset.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#weights-file","title":"Weights file","text":"<p>Path to the file containing the weights of the model trained with <code>dimlpTrn</code>.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--weights_file</code> JSON identifier <code>weights_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#hidden-layers-file","title":"Hidden layers file","text":"<p>Path to the file containing hidden layers sizes.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--hidden_layers_file</code> JSON identifier <code>hidden_layers_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#test-predictions-output-file","title":"Test predictions output file","text":"<p>Path to the file where the test predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>dimlpTest.out</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer during training. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.dimlp import dimlpPred\n\ndimlpPred(\n\"\"\"--test_data_file test_data.txt \n--weights_file weights.wts \n--nb_attributes 16 \n--hidden_layers_file hidden_layers.out \n--nb_classes 2 \n--test_pred_outfile predTest.out \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./dimlpPred --test_data_file test_data.txt --weights_file weights.wts --nb_attributes 16 --hidden_layers_file hidden_layers.out --nb_classes 2 --test_pred_outfile predTest.out --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlppred/#test-prediction-file","title":"Test prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each test sample. Each row corresponds to the prediction for a single sample, with <code>N</code> values representing the probability that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The values in each row sum to 1. The class with the highest probability is considered the predicted class for that sample, unless a decision threshold is applied for a specific class. In that case, if the predicted probability for that class exceeds the threshold, the sample is classified as belonging to that class.</p> <p>For example:</p> <pre><code>0.000718874 0.999281\n0.949143 0.050857\n</code></pre> <p>In the first row, the model predicts a probability of approximately 0.0007 that the sample belongs to class 0, and 0.9993 that it belongs to class 1. Therefore, the model predicts class 1 for this sample. In the second row, the model predicts a probability of 0.949 that the sample belongs to class 0, and 0.051 that it belongs to class 1. Hence, the model predicts class 0 for this sample.</p> <p>Each row of probabilities allows you to interpret the model's confidence in its predictions, enabling you to understand the likelihood of each sample belonging to a particular class.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/","title":"DimlpRul","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#description","title":"Description","text":"<p>The <code>Discretized Interpretable Multi-Layer Perceptron (DIMLP)</code> is a neural network architecture that combines the predictive power of a traditional Multi-Layer Perceptron (MLP) with the ability to extract interpretable rules. Unlike conventional neural networks, <code>DIMLP</code> uses a staircase activation function in the first hidden layer, creating a grid of hyper-rectangles in the feature space. These hyper-rectangles help define discriminant decision boundaries between classes, facilitating the extraction of symbolic rules.</p> <p>The rule generation process in the <code>DIMLP</code> model relies on inducing a decision tree, where virtual hyperplanes are identified between these hyper-rectangles. The rule extraction algorithm extracts unordered rules in polynomial time using heuristic methods. This process ensures 100% fidelity with respect to the training data, meaning that the extracted rules perfectly match the network's decisions.</p> <p><code>DimlpRul</code> generates global explanation rules using the <code>Dimlp</code> algorithm on the training dataset used to train the model with dimlpTrn, and calculates accuracy on a train, test and validation dataset.</p> <p>Additionally, there is another rule extraction algorithm available in the framework called Fidex, which has a better algorithmic complexity and allows for both local and global rule extraction.</p> <p>For more details on the <code>Dimlp</code> algorithm, you can refer to this paper.</p> <p>Warning</p> <p>You should not execute <code>DimlpRul</code> for a model trained by DimlpBT, it should be trained by dimlpTrn!</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#arguments-list","title":"Arguments list","text":"<p>The <code>dimlpRul</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative from this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#train-data-file","title":"Train data file","text":"<p>File containing the training portion of the dataset. It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the training portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file. </p>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#weights-file","title":"Weights file","text":"<p>Path to the file containing the weights of the model trained with <code>dimlpTrn</code>.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--weights_file</code> JSON identifier <code>weights_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#hidden-layers-file","title":"Hidden layers file","text":"<p>Path to the file containing hidden layers sizes.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--hidden_layers_file</code> JSON identifier <code>hidden_layers_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#test-data-file","title":"Test data file","text":"<p>Path to the file containing the test portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#test-true-classes-file","title":"Test true classes file","text":"<p>Path to the file containing the test true classes of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#validation-data-file","title":"Validation data file","text":"<p>Path to the file containing the validation portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--valid_data_file</code> JSON identifier <code>valid_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#validation-true-classes-file","title":"Validation true classes file","text":"<p>Path to the file containing the validation true classes of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--valid_class_file</code> JSON identifier <code>valid_class_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#global-rules-output-file","title":"Global rules output file","text":"<p>Path to the file where the output rule(s) generated by the dimlp algorithm will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--global_rules_outfile</code> JSON identifier <code>global_rules_outfile</code> Default value <code>dimlp.rls</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#attributes-file","title":"Attributes file","text":"<p>File containing attributes (inputs) and classes (outputs) names.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--attributes_file</code> JSON identifier <code>attributes_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain statistics concerning the algorithm execution.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer during training. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#normalization-file","title":"Normalization file","text":"<p>File containing the mean and standard deviation for specified attributes that have been normalized. If specified, it is used to denormalize the rules.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--normalization_file</code> JSON identifier <code>normalization_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#mus","title":"Mus","text":"<p>Mean or median of each attribute index specified in normalization indices that have been normalized. This argument is used alongside sigmas and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--mus</code> JSON identifier <code>mus</code> Default value <code>None</code> <p>Warning</p> <p>If sigmas or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#sigmas","title":"Sigmas","text":"<p>Standard deviation of each attribute index specified in normalization indices that have been normalized. This argument is used alongside mus and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--sigmas</code> JSON identifier <code>sigmas</code> Default value <code>None</code> <p>Warning</p> <p>If mus or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#normalization-indices","title":"Normalization indices","text":"<p>Indices of attributes that have been normalized. If specified, it is used to denormalize the rules. Index starts at 0. Each index takes values in the range <code>[0,nb_attributes-1]</code>.</p> Property Value Is required No** Type <code>List of integers</code> CLI argument syntax <code>--normalization_indices</code> JSON identifier <code>normalization_indices</code> Default value <code>[0,...,nb_attributes-1]</code> <p>Warning</p> <p>If mus or sigmas are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.dimlp import dimlpRul\n\ndimlpRul(\n\"\"\"--train_data_file train_data.txt \n--train_class_file train_class.txt \n--weights_file weights.wts \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--nb_attributes 16 \n--hidden_layers_file hidden_layers.out \n--nb_classes 2 \n--global_rules_outfile globalRules.rls \n--stats_file stats.txt \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./dimlpRul --train_data_file train_data.txt --train_class_file train_class.txt --weights_file weights.wts --test_data_file test_data.txt --test_class_file test_class.txt --nb_attributes 16 --hidden_layers_file hidden_layers.out --nb_classes 2 --global_rules_outfile globalRules.rls --stats_file stats.txt --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#statistics-file","title":"Statistics file","text":"<p>This file contains accuracy and error measurements on the training, validation, and testing sets (if provided). It offers a clear overview of the model\u2019s performance across different datasets, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified samples in each dataset (training, validation, or testing). <code>Sum squared error</code> Represents the sum of the squared differences between the predicted and actual values for the samples in each dataset. It is a measure of the model\u2019s overall error for a given set."},{"location":"documentation/dimlpfidex/dimlp/dimlprul/#global-rules-output-file_1","title":"Global rules output file","text":"<p>This file contains all the global rules computed with the <code>Dimlp</code> algorithm. The rules are ordered by their covering size and are followed by the performance metrics of each rule on the training, validation and testing sets. Additionally, the file provides performance statistics of the ruleset and its application on testing data.</p> <p>Explanation of Each Rule:</p> <p>Each rule consists of conditions on various attributes, followed by the predicted class, and is accompanied by the number of training and validation samples it covers. Let's break down this rule as an example:</p> <pre><code>Rule 1: (x1 &gt; 0.653808) (x2 &gt; 0.92407) (x8 &lt; 0.44302) Class = 1 (211)\n</code></pre> <code>x1, x2, x8</code> These represent the variables from the dataset (x1 is the first attribute). <code>&gt;0.653808, &gt;0.92407, &lt;0.44302</code> The thresholds that the variable values must meet for the rule to be activated. <code>Class = 1</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 1. <code>(211)</code> The number of training and validation samples covered by the rule. Here, the rule covers 211 samples. <p>Performance Metrics Associated with the Rule:</p> <p>For each rule and each dataset, there is some performances associated with the rule. It appears like this :</p> <pre><code>Rule    1:   143   134     9     0.937063       Class = 1\n</code></pre> <code>143</code> The number of samples covered by this rule.  <code>134</code> The number of samples correctly classified by this rule. <code>9</code> The number of samples incorrectly classified by this rule. <code>0.937063</code> The accuracy of this rule in correctly classifying the samples it covers. <code>Class = 1</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 1. <p>It is followed by the global accuracy of the rules on the whole set. That means the accuracy of the ruleset in predicting the correct class for the samples, regardless of the model's predictions. It is accurate when there is a correct fidel activated rule, when no rule is activated and the model is correct, or when the activated rules are incorrect but all agree on the correct class.</p> <p>Global Statistics:</p> <code>Number of rules</code> Indicates the total number of rules in the ruleset. <code>Number of antecedents</code> Represents the total number of conditions (antecedents) in the ruleset. <code>Number of antecedents per rule</code> Represents the average number of conditions (antecedents) in each rule. <code>Number of examples per rule</code> The average number of training and validation samples covered by each rule. <p>Additional Statistics on testing set:</p> <code>Fidelity</code> Measures how accurately the rules mimic the behavior of the model. This rate reflects the proportion of test samples where the rules' predictions match the model's predictions. <code>Accuracy when rules and network agree</code> The accuracy of the model when the model's predictions match the predictions made by the activated rules. <code>Default rule activations rate</code> The proportion of samples for which no activated rule is found. In such cases, we choose the network's decision."},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/","title":"DimlpTrn","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#description","title":"Description","text":"<p>The <code>Discretized Interpretable Multi-Layer Perceptron (DIMLP)</code> is a neural network architecture that combines the predictive power of a traditional Multi-Layer Perceptron (MLP) with the ability to extract interpretable rules. Unlike conventional neural networks, <code>DIMLP</code> uses a staircase activation function in the first hidden layer, creating a grid of hyper-rectangles in the feature space. These hyper-rectangles help define discriminant decision boundaries between classes, facilitating the extraction of symbolic rules.</p> <p>The rule generation process in the <code>DIMLP</code> model relies on inducing a decision tree, where virtual hyperplanes are identified between these hyper-rectangles. The rule extraction algorithm extracts unordered rules in polynomial time using heuristic methods. This process ensures 100% fidelity with respect to the training data, meaning that the extracted rules perfectly match the network's decisions.</p> <p>Additionally, there is another rule extraction algorithm available in the framework called Fidex, which has a better algorithmic complexity and allows for both local and global rule extraction.</p> <p>For more details on the <code>Dimlp</code> algorithm, you can refer to this paper.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#arguments-list","title":"Arguments list","text":"<p>The <code>dimlpTrn</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative to this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#train-data-file","title":"Train data file","text":"<p>File containing the training portion of the dataset. It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the training portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file. </p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#train-predictions-output-file","title":"Train predictions output file","text":"<p>Path to the file where the train predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--train_pred_outfile</code> JSON identifier <code>train_pred_outfile</code> Default value <code>dimlpTrain.out</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#test-data-file","title":"Test data file","text":"<p>Path to the file containing the test portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#test-true-classes-file","title":"Test true classes file","text":"<p>Path to the file containing the test true classes of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#test-prediction-output-file","title":"Test prediction output file","text":"<p>Path to the file where the test predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>dimlpTest.out</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#weights-file","title":"Weights file","text":"<p>File containing the model pretrained weights.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--weights_file</code> JSON identifier <code>weights_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#weights-output-file","title":"Weights output file","text":"<p>Path to the file where the output trained weights of the model will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--weights_outfile</code> JSON identifier <code>weights_outfile</code> Default value <code>dimlp.wts</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#validation-data-file","title":"Validation data file","text":"<p>Path to the file containing the validation portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--valid_data_file</code> JSON identifier <code>valid_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#validation-true-classes-file","title":"Validation true classes file","text":"<p>Path to the file containing the validation true classes of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--valid_class_file</code> JSON identifier <code>valid_class_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#validation-prediction-output-file","title":"Validation prediction output file","text":"<p>Path to the file where the validation predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--valid_pred_outfile</code> JSON identifier <code>valid_pred_outfile</code> Default value <code>dimlpValidation.out</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#attributes-file","title":"Attributes file","text":"<p>File containing attributes (inputs) and classes (outputs) names.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--attributes_file</code> JSON identifier <code>attributes_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain statistics concerning the algorithm execution.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>statsDimlpTrn.txt</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#first-hidden-layer","title":"First hidden layer","text":"<p>Number of neurons in the first hidden layer. Takes multiples of the number of attributes as values. </p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--first_hidden_layer</code> JSON identifier <code>first_hidden_layer</code> Default value <code>nb_attributes</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#hidden-layers","title":"Hidden layers","text":"<p>Number of neurons in each hidden layer, from the second layer to the last. Each number takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>List of integers</code> CLI argument syntax <code>--hidden_layers</code> JSON identifier <code>hidden_layers</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#hidden-layers-output-file","title":"Hidden layers output file","text":"<p>Path to the file where output hidden layers sizes will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--hidden_layers_outfile</code> JSON identifier <code>hidden_layers_outfile</code> Default value <code>hidden_layers.out</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#use-rule-extraction","title":"Use rule extraction","text":"<p>Whether to extract rules with dimlp algorithm.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--with_rule_extraction</code> JSON identifier <code>with_rule_extraction</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#global-rules-output-file","title":"Global rules output file","text":"<p>Path to the file where the output rule(s) generated by the dimlp algorithm will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--global_rules_outfile</code> JSON identifier <code>global_rules_outfile</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#learning-rate","title":"Learning rate","text":"<p>Back-propagation learning parameter. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--learning_rate</code> JSON identifier <code>learning_rate</code> Default value <code>0.1</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#momentum","title":"Momentum","text":"<p>Back-propagation momentum parameter. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--momentum</code> JSON identifier <code>momentum</code> Default value <code>0.6</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#flat-spot","title":"Flat spot","text":"<p>Back-propagation flat spot elimination parameter. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--flat</code> JSON identifier <code>flat</code> Default value <code>0.01</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#error-threshold","title":"Error threshold","text":"<p>Error threshold to stop training. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--error_thresh</code> JSON identifier <code>error_thresh</code> Default value <code>None</code> <p>Warning</p> <p>You should specify a big number in nb_epochs otherwise it may not have enough time to stop with this criterion.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#accuracy-threshold","title":"Accuracy threshold","text":"<p>Accuracy threshold to stop training. Takes values in the range <code>]0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--acc_thresh</code> JSON identifier <code>acc_thresh</code> Default value <code>None</code> <p>Warning</p> <p>You should specify a big number in nb_epochs otherwise it may not have enough time to stop with this criterion.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#absolute-error-threshold","title":"Absolute error threshold","text":"<p>Absolute difference error threshold, 0 if not using this stopping criteria. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--abs_error_thresh</code> JSON identifier <code>abs_error_thresh</code> Default value <code>0</code> <p>Warning</p> <p>You should specify a big number in nb_epochs otherwise it may not have enough time to stop with this criterion.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#number-of-epochs","title":"Number of epochs","text":"<p>Number of model training epochs. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_epochs</code> JSON identifier <code>nb_epochs</code> Default value <code>1500</code> <p>Warning</p> <p>You should specify a big number of epochs if you want to use a stopping criterion instead.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#number-of-epochs-before-showing-error-metric","title":"Number of epochs before showing error metric","text":"<p>Number of training epochs before showing error. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_epochs_error</code> JSON identifier <code>nb_epochs_error</code> Default value <code>10</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#normalization-file","title":"Normalization file","text":"<p>File containing the mean and standard deviation for specified attributes that have been normalized. If specified, it is used to denormalize the rules.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--normalization_file</code> JSON identifier <code>normalization_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#mus","title":"Mus","text":"<p>Mean or median of each attribute index specified in normalization indices that have been normalized. This argument is used alongside sigmas and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--mus</code> JSON identifier <code>mus</code> Default value <code>None</code> <p>Warning</p> <p>If sigmas or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#sigmas","title":"Sigmas","text":"<p>Standard deviation of each attribute index specified in normalization indices that have been normalized. This argument is used alongside mus and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--sigmas</code> JSON identifier <code>sigmas</code> Default value <code>None</code> <p>Warning</p> <p>If mus or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#normalization-indices","title":"Normalization indices","text":"<p>Indices of attributes that have been normalized. If specified, it is used to denormalize the rules. Index starts at 0. Each index takes values in the range <code>[0,nb_attributes-1]</code>.</p> Property Value Is required No** Type <code>List of integers</code> CLI argument syntax <code>--normalization_indices</code> JSON identifier <code>normalization_indices</code> Default value <code>[0,...,nb_attributes-1]</code> <p>Warning</p> <p>If mus or sigmas are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#seed","title":"Seed","text":"<p>Number to feed the random generator. If <code>0</code>, the randomness cannot be reproduced. If any other number <code>x</code> is used, you can reproduce the same output if <code>x</code> is re-used. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--seed</code> JSON identifier <code>seed</code> Default value <code>0</code>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.dimlp import dimlpTrn\n\ndimlpTrn(\n\"\"\"--train_data_file train_data.txt \n--train_class_file train_class.txt \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--nb_attributes 16 \n--hidden_layers 5 \n--nb_classes 2 \n--weights_outfile weights.wts \n--with_rule_extraction true \n--global_rules_outfile globalRules.rls \n--train_pred_outfile predTrain.out \n--test_pred_outfile predTest.out \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./dimlpTrn --train_data_file train_data.txt --train_class_file train_class.txt --test_data_file test_data.txt --test_class_file test_class.txt --nb_attributes 16 --hidden_layers 5 --nb_classes 2 --weights_outfile weights.wts --with_rule_extraction true --global_rules_outfile globalRules.rls --train_pred_outfile predTrain.out --test_pred_outfile predTest.out --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#traintestvalidation-prediction-file","title":"Train/Test/Validation prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each train (or test/validation) sample. Each row corresponds to the prediction for a single sample, with <code>N</code> values representing the probability that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The values in each row sum to 1. The class with the highest probability is considered the predicted class for that sample, unless a decision threshold is applied for a specific class. In that case, if the predicted probability for that class exceeds the threshold, the sample is classified as belonging to that class.</p> <p>For example:</p> <pre><code>0.000718874 0.999281\n0.949143 0.050857\n</code></pre> <p>In the first row, the model predicts a probability of approximately 0.0007 that the sample belongs to class 0, and 0.9993 that it belongs to class 1. Therefore, the model predicts class 1 for this sample. In the second row, the model predicts a probability of 0.949 that the sample belongs to class 0, and 0.051 that it belongs to class 1. Hence, the model predicts class 0 for this sample.</p> <p>Each row of probabilities allows you to interpret the model's confidence in its predictions, enabling you to understand the likelihood of each sample belonging to a particular class.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#weights-output-file_1","title":"Weights output file","text":"<p>This file contains the weights and biases between successive layers of neurons in the neural network.</p> <ul> <li>Odd rows in the file represent the bias values of neurons related to the next layer l<sub>i+1</sub>. There is one bias value for each neuron in that layer.</li> <li>Even rows represent the values of the weight matrix between the current layer l<sub>i</sub> and the next layer l<sub>i+1</sub>.</li> </ul> <p>If layer l<sub>i</sub> has m neurons and layer l<sub>i+1</sub> has n neurons, the weights are represented as a single row in the file in the following format:</p> <pre><code>w_11 w_21 w_31 ... w_m1  w_12 w_22 w_32 ... w_m2  ...  w_1n w_2n w_3n ... w_mn\n</code></pre> <p>Where w<sub>ij</sub> is the weight connecting the i<sup>th</sup> neuron in layer l<sub>i</sub> to the j<sup>th</sup> neuron in layer l<sub>i+1</sub>.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#statistics-file","title":"Statistics file","text":"<p>This file contains accuracy and error measurements on the training, validation, and testing sets (if provided). It offers a clear overview of the model\u2019s performance across different datasets, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified samples in each dataset (training, validation, or testing). <code>Sum squared error</code> Represents the sum of the squared differences between the predicted and actual values for the samples in each dataset. It is a measure of the model\u2019s overall error for a given set."},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#hidden-layers-file","title":"Hidden layers file","text":"<p>This file contains the configuration of the neural network, specifying the number of neurons in each layer. Each row corresponds to a layer in the network.</p> <ul> <li>The first number indicates the layer number.</li> <li>The second number indicates the number of neurons in that layer.</li> </ul> <p>Example:</p> <pre><code>1 16\n2 5\n</code></pre> <p>In this example the first layer has 16 neurons and the second has 5.</p>"},{"location":"documentation/dimlpfidex/dimlp/dimlptrn/#global-rules-output-file_1","title":"Global rules output file","text":"<p>This file contains all the global rules computed with the <code>Dimlp</code> algorithm. The rules are ordered by their covering size and are followed by the performance metrics of each rule on the training, validation and testing sets. Additionally, the file provides performance statistics of the ruleset and its application on testing data.</p> <p>Explanation of Each Rule:</p> <p>Each rule consists of conditions on various attributes, followed by the predicted class, and is accompanied by the number of training and validation samples it covers. Let's break down this rule as an example:</p> <pre><code>Rule 1: (x1 &gt; 0.653808) (x2 &gt; 0.92407) (x8 &lt; 0.44302) Class = 1 (211)\n</code></pre> <code>x1, x2, x8</code> These represent the variables from the dataset (x1 is the first attribute). <code>&gt;0.653808, &gt;0.92407, &lt;0.44302</code> The thresholds that the variable values must meet for the rule to be activated. <code>Class = 1</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 1. <code>(211)</code> The number of training and validation samples covered by the rule. Here, the rule covers 211 samples. <p>Performance Metrics Associated with the Rule:</p> <p>For each rule and each dataset, there is some performances associated with the rule. It appears like this :</p> <pre><code>Rule    1:   143   134     9     0.937063       Class = 1\n</code></pre> <code>143</code> The number of samples covered by this rule.  <code>134</code> The number of samples correctly classified by this rule. <code>9</code> The number of samples incorrectly classified by this rule. <code>0.937063</code> The accuracy of this rule in correctly classifying the samples it covers. <code>Class = 1</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 1. <p>It is followed by the global accuracy of the rules on the whole set. That means the accuracy of the ruleset in predicting the correct class for the samples, regardless of the model's predictions. It is accurate when there is a correct fidel activated rule, when no rule is activated and the model is correct, or when the activated rules are incorrect but all agree on the correct class.</p> <p>Global Statistics:</p> <code>Number of rules</code> Indicates the total number of rules in the ruleset. <code>Number of antecedents</code> Represents the total number of conditions (antecedents) in the ruleset. <code>Number of antecedents per rule</code> Represents the average number of conditions (antecedents) in each rule. <code>Number of examples per rule</code> The average number of training and validation samples covered by each rule. <p>Additional Statistics on testing set:</p> <code>Fidelity</code> Measures how accurately the rules mimic the behavior of the model. This rate reflects the proportion of test samples where the rules' predictions match the model's predictions. <code>Accuracy when rules and network agree</code> The accuracy of the model when the model's predictions match the predictions made by the activated rules. <code>Default rule activations rate</code> The proportion of samples for which no activated rule is found. In such cases, we choose the network's decision."},{"location":"documentation/dimlpfidex/dimlp/overview/","title":"Dimlp algorithms","text":"<p>The Discretized Interpretable Multi-Layer Perceptron (DIMLP) is a specialized feed-forward neural network architecture, derived from the traditional <code>MLP</code> (Multi-Layer Perceptron). <code>DIMLP</code> performs predictive tasks and generates interpretable decision rules that explain the underlying reasoning behind the model's predictions. The <code>DIMLP</code> framework includes a set of algorithms that leverage this capability for model training, evaluation, and rule extraction. To get more details on the <code>Dimlp</code> algorithm, you can refer to this paper, and to this one for <code>dimlpBT</code>.</p>"},{"location":"documentation/dimlpfidex/dimlp/overview/#architecture","title":"Architecture","text":"<p>The architecture is built as shown below:</p> <pre><code>graph TD;\n    DimlpTrn[DimlpTrn] \n    DimlpBT[DimlpBT] \n    DimlpPred[DimlpPred] \n    DimlpCls[DimlpCls]\n    DimlpRul[DimlpRul]\n    DensCls[DensCls]\n\n    d(Dimlp algorithms) --&gt; DimlpTrn;\n    d --&gt; DimlpBT;\n    DimlpTrn --&gt; DimlpPred;\n    DimlpTrn --&gt; DimlpCls;\n    DimlpTrn --&gt; DimlpRul;\n    DimlpBT --&gt; DensCls;</code></pre> <p>Each algorithm has its purpose:</p> <ul> <li>DimlpTrn: Trains the <code>Dimlp</code> model using a training dataset, obtains train/test/validation predictions and model weights, and can optionally extract global rules using the <code>Dimlp</code> algorithm.</li> <li>DimlpPred: Generates predictions from the trained <code>Dimlp</code> model on a test dataset.</li> <li>DimlpCls: Calculates accuracy, generates predictions, and retrieves the values of the first hidden layer from the trained <code>Dimlp</code> model on a test dataset.</li> <li>DimlpRul: Generates global explanation rules using the <code>Dimlp</code> algorithm on the training dataset used to train the <code>Dimlp</code> model, and retrieves training, testing, and validation accuracy, if provided.</li> <li>DimlpBT: Trains the <code>Dimlp</code> model using a training dataset with bagging, obtains train/test/validation predictions and model weights, and can optionally extract global rules using the <code>Dimlp</code> algorithm.</li> <li>DensCls: Generates global explanation rules using the <code>Dimlp</code> algorithm and obtains train and test predictions and accuracy from a <code>Dimlp</code> model trained with bagging.</li> </ul>"},{"location":"documentation/dimlpfidex/fidex/fidex/","title":"Fidex","text":""},{"location":"documentation/dimlpfidex/fidex/fidex/#description","title":"Description","text":"<p>The <code>Fidex</code> algorithm is an approach to rule extraction that can be applied to supervised neural networks and their ensembles, convolutional neural networks, decision tree ensembles, and support vector machines. The name of the algorithm is a contraction of fidelity and explainability. Fidelity refers to how well an extracted rule mimics the behavior of a given model.</p> <p>The core idea behind <code>Fidex</code> is to identify discriminant hyperplanes in the feature space that separate different classes. By leveraging the staircase activation function in models containing a DIMLP layer or using generated decision tree rules from Random Forest and Gradiend Boosting models, <code>Fidex</code> can precisely identify these hyperplanes, allowing it to generate propositional rules in a computationally efficient manner. The algorithm\u2019s complexity is linear with respect to the product of the problem\u2019s dimensionality, the number of training samples, and the maximal number of rule antecedents, making it highly scalable.</p> <p><code>Fidex</code> is particularly effective at extracting local rules for individual samples by optimizing fidelity, ensuring that the rules it generates accurately reflect the decisions made by the model. The method applies a step-by-step process to iteratively improve the fidelity of the rule until it reaches a predefined threshold.</p> <p>For more details on the <code>Fidex</code> algorithm, you can refer to this paper.</p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#arguments-list","title":"Arguments list","text":"<p>The <code>Fidex</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/fidex/fidex/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative from this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#train-data-file","title":"Train data file","text":"<p>File containing the training portion of the dataset used to train the model, from which the ruleset/weights belong. It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#train-predictions-file","title":"Train predictions file","text":"<p>File containing the predictions from the training portion of the dataset used to train the model.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_pred_file</code> JSON identifier <code>train_pred_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the training portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file. </p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#test-data-file","title":"Test data file","text":"<p>File containing the testing portion of the dataset used to train the model. It can also contain training \"true classes\" and training predictions (see Test true classes file and Test predictions files).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#weights-file","title":"Weights file","text":"<p>File containing the model trained weights.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--weights_file</code> JSON identifier <code>weights_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the rules file is specified instead. </p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#rules-file","title":"Rules file","text":"<p>File containing the model trained rules.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--rules_file</code> JSON identifier <code>rules_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the weights file is specified instead. </p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#rules-output-file","title":"Rules output file","text":"<p>Name of the file containing rules generated by <code>Fidex</code>.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--rules_outfile</code> JSON identifier <code>rules_outfile</code> Default value <code>None</code> <p>Info</p> <p>The filename's extension can be specified as <code>.json</code>. Allowing the program to generate a JSON-structured rule output file.</p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#test-predictions-file","title":"Test predictions file","text":"<p>File containing the predictions from the testing portion of the dataset.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--test_pred_file</code> JSON identifier <code>test_pred_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the predictions are already specified inside the test data file.  </p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the testing portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code> <p>Warning</p> <p>The true classes can also be specified inside the test data file. This means it is possible to merge classes into the test data file instead of using this parameter.</p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#attributes-file","title":"Attributes file","text":"<p>File containing attributes (inputs) and classes (outputs) names.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--attributes_file</code> JSON identifier <code>attributes_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain statistics concerning the algorithm execution.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#maximum-number-of-iterations","title":"Maximum number of iterations","text":"<p>Maximum number of <code>Fidex</code> iterations allowed. Also the maximum possible number of antecedents in a rule. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_iterations</code> JSON identifier <code>max_iterations</code> Default value <code>10</code> <p>Tip</p> <p>If you're working with images, we recommend setting this argument to <code>25</code>.</p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#minimum-covering","title":"Minimum covering","text":"<p>Minimal number of samples covered by every generated rule. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--min_covering</code> JSON identifier <code>min_covering</code> Default value <code>2</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#use-dichotomic-search","title":"Use dichotomic search","text":"<p>Whether or not the algorithm uses a dichotomic strategy to compute a rule. This occurs when the algorithm fails to find a rule with the minimum covering value used.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--covering_strategy</code> JSON identifier <code>covering_strategy</code> Default value <code>True</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#maximum-number-of-failed-attempts","title":"Maximum number of failed attempts","text":"<p>Number of attempts allowed to compute a rule that could not be found by the algorithm. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_failed_attempts</code> JSON identifier <code>max_failed_attempts</code> Default value <code>30</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#minimum-fidelity","title":"Minimum fidelity","text":"<p>Lowest fidelity score allowed for a rule to be selected. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--min_fidelity</code> JSON identifier <code>min_fidelity</code> Default value <code>1.0</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#minimum-generated-fidelity","title":"Minimum generated fidelity","text":"<p>Lowest fidelity score to which we agree to go down when a rule must be generated. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--lowest_min_fidelity</code> JSON identifier <code>lowest_min_fidelity</code> Default value <code>0.75</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#dimension-dropout","title":"Dimension dropout","text":"<p>Percentage of dimensions that are ignored during an iteration. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--dropout_dim</code> JSON identifier <code>dropout_dim</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#hyperplane-dropout","title":"Hyperplane dropout","text":"<p>Percentage of hyperplanes that are ignored during an iteration. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--dropout_hyp</code> JSON identifier <code>dropout_hyp</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer during training. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#decision-threshold","title":"Decision threshold","text":"<p>Threshold for predictions to be considered as correct. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--decision_threshold</code> JSON identifier <code>decision_threshold</code> Default value <code>None</code> <p>Warning</p> <p>The index of positive class must be specified too if you want to use this argument. </p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#positive-class-index","title":"Positive class index","text":"<p>Index of positive class for the usage of decision threshold, index starts at <code>0</code>. Takes values in the range <code>[0,nb_classes-1]</code>.</p> Property Value Is required No** Type <code>Integer</code> CLI argument syntax <code>--positive_class_index</code> JSON identifier <code>positive_class_index</code> Default value <code>None</code> <p>Warning</p> <p>If decision threshold is used, then this argument is required. </p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#normalization-file","title":"Normalization file","text":"<p>File containing the mean and standard deviation for specified attributes that have been normalized. If specified, it is used to denormalize the rules.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--normalization_file</code> JSON identifier <code>normalization_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#mus","title":"Mus","text":"<p>Mean or median of each attribute index specified in normalization indices that have been normalized. This argument is used alongside sigmas and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--mus</code> JSON identifier <code>mus</code> Default value <code>None</code> <p>Warning</p> <p>If sigmas or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#sigmas","title":"Sigmas","text":"<p>Standard deviation of each attribute index specified in normalization indices that have been normalized. This argument is used alongside mus and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--sigmas</code> JSON identifier <code>sigmas</code> Default value <code>None</code> <p>Warning</p> <p>If mus or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#normalization-indices","title":"Normalization indices","text":"<p>Indices of attributes that have been normalized. If specified, it is used to denormalize the rules. Index starts at 0. Each index takes values in the range <code>[0,nb_attributes-1]</code>.</p> Property Value Is required No** Type <code>List of integers</code> CLI argument syntax <code>--normalization_indices</code> JSON identifier <code>normalization_indices</code> Default value <code>[0,...,nb_attributes-1]</code> <p>Warning</p> <p>If mus or sigmas are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/fidex/fidex/#seed","title":"Seed","text":"<p>Number to feed the random generator. If <code>0</code>, the randomness cannot be reproduced. If any other number <code>x</code> is used, you can reproduce the same output if <code>x</code> is re-used. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--seed</code> JSON identifier <code>seed</code> Default value <code>0</code>"},{"location":"documentation/dimlpfidex/fidex/fidex/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.fidex import fidex\n\nfidex(\n\"\"\"--root_folder dimlp/datafiles \n--train_data_file train_data.txt \n--train_pred_file predTrain.out \n--train_class_file train_class.txt \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--test_pred_file predTest.out \n--nb_attributes 16 \n--nb_classes 2 \n--weights_file weights.wts \n--rules_outfile output_rules.rls \n--stats_file output_stats.txt\"\"\"\n)\n</code></pre> <pre><code>./fidex --root_folder ../dimlp/datafiles --train_data_file train_data.txt --train_pred_file predTrain.out --train_class_file train_class.txt --test_data_file test_data.txt --test_class_file test_class.txt --test_pred_file predTest.out --nb_attributes 16 --nb_classes 2 --weights_file weights.wts --rules_outfile output_rules.rls --stats_file output_stats.txt\n</code></pre>"},{"location":"documentation/dimlpfidex/fidex/fidex/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/fidex/fidex/#statistics-file","title":"Statistics file","text":"<p>This file contains statistics computed on rules created for a test set. For each sample in the test set, a corresponding rule is generated using a fixed training set. The statistics provide insights into the rules' coverage, fidelity, accuracy, and confidence based on the training data. All metrics are averages of the statistics calculated for each test sample, with all values derived from the training set.</p> <code>Decision threshold</code> Indicates whether a decision threshold was used for prediction and specifies the threshold if applicable. <code>The mean covering size per rule</code> The average number of training samples covered by each rule. <code>The mean number of antecedents per rule</code> Represents the average number of conditions (antecedents) in each rule. <code>The mean rule fidelity rate</code> The average fidelity of the rules across the training set. A fidelity rate of 1 means that, on average, the rules perfectly match the model's predictions for all the samples they cover. <code>The mean rule accuracy</code> The average accuracy of the rules in correctly classifying the training samples they cover. <code>The mean rule confidence</code> This is the average confidence score of the model\u2019s predictions for the training samples covered by the rules. It is based on the prediction scores of the covered samples, indicating the model\u2019s confidence in its classifications."},{"location":"documentation/dimlpfidex/fidex/fidex/#rules-output-file_1","title":"Rules output file","text":"Text fileJSON file <p>This file contains all the local rules computed for each test sample. It begins with an indication whether a decision threshold was used for prediction and specifies the threshold if applicable. Each rule consists of conditions on various attributes, followed by the predicted class, and is accompanied by several performance metrics. Let's break down this rule as an example:</p> <pre><code>Rule 1: X0&gt;=0.65839 X1&gt;=0.423139 X8&gt;=0.105399 -&gt; class 0\n    Train Covering size : 121\n    Train Fidelity : 1\n    Train Accuracy : 0.950413\n    Train Confidence : 0.97161\n</code></pre> <code>X0, X1, X8</code> These represent the variables from the dataset. <code>&gt;=0.65839, &gt;=0.423139, &gt;=0.105399</code> The thresholds that the variable values must meet for the rule to be activated. <code>-&gt; class 0</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 0. <p><p>Performance Metrics Associated with the Rule:</p></p> <code>Train Covering size</code> Indicates the number of training samples that are covered by the rule. For Rule 1, it covers 121 samples. <code>Train Fidelity</code> Measures how well the rule aligns with the model\u2019s predictions. A fidelity of 1 means that the rule exactly matches the model\u2019s predictions for all the samples it covers. <code>Train Accuracy</code> The accuracy of the rule in correctly classifying the samples it covers. In the case of Rule 1, 95.04% of the covered samples are correctly classified. <code>Train Confidence</code> This is the average confidence score of the model\u2019s predictions for the samples covered by the rules. It is computed based on the prediction scores of the covered samples, indicating the model\u2019s confidence in its classifications. For Rule 1, the confidence is 97.16%. <p>Each subsequent rule follows the same structure.</p> <p>This file contains all the local rules computed for each test sample. It begins with an indication whether a decision threshold was used for prediction and specifies the threshold if applicable. It then follows with each individual rule and its associated performance metrics. Let's break down this rule as an example:</p> <pre><code>{\n    \"accuracy\": 1.0,\n    \"antecedents\": [\n        {\n            \"attribute\": 8,\n            \"inequality\": false,\n            \"value\": 0.07228972839342673\n        },\n        {\n            \"attribute\": 3,\n            \"inequality\": true,\n            \"value\": 0.6969069765088105\n        }\n    ],\n    \"confidence\": 0.991161,\n    \"coveredSamples\": [\n        67,\n        213,\n        567\n    ],\n    \"coveringSize\": 3,\n    \"fidelity\": 1.0,\n    \"outputClass\": 1\n}\n</code></pre> <code>accuracy</code> The accuracy of the rule on the samples it covers. For this rule, 100% of the covered samples are correctly classified. <code>antecedents</code> Each antecedant of the rule which is composed of an attribute (a variable from the dataset), an inequality, and a value. A <code>true</code> inequality represents <code>&gt;=</code>, while a <code>false</code> inequality represents <code>&lt;</code>. The value is the threshold that the attribute's value must meet for the rule to be activated. In this rule, the first antecedant specifies that <code>X8 &lt; 0.07228972839342673</code>. <code>confidence</code> Represents the average confidence score of the model\u2019s predictions for the samples covered by the rule. For this rule, the confidence is 99.12%. <code>coveredSamples</code> Indicates the samples covered by the rule. This rule coveres the samples 67, 213 and 567. <code>coveringSize</code> Indicates the number of samples that are covered by the rule. This rule covers 3 samples. <code>fidelity</code> Measures how well the rule aligns with the model\u2019s predictions. A fidelity of 1 means that the rule exactly matches the model\u2019s predictions for all the samples it covers. <code>outputClass</code> Indicates the class prediction of the rule, the predicted class is 1. <p>Each subsequent rule follows the same structure.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/","title":"FidexGlo","text":""},{"location":"documentation/dimlpfidex/fidex/fidexglo/#description","title":"Description","text":"<p>The goal of <code>FidexGlo</code> is to explain the model's decision for each sample by generating one or more explanation rules. It searches through the global ruleset generated by FidexGloRules. If no suitable rule is found, the algorithm calls Fidex to generate a local rule for the sample. The explanations provided by <code>FidexGlo</code> are in the form of activated rules, highlighting both the correct decision class (matching the model's decision) and incorrect decisions (where the attributes match, but the class differs from the model's decision).</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#arguments-list","title":"Arguments list","text":"<p>The <code>FidexGlo</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative to this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#test-data-file","title":"Test data file","text":"<p>Path to the file containing test sample(s) data, it can contain predictions, and true classes too if fidex is used.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#global-rules-file","title":"Global Rules file","text":"<p>Path to the file containing the global rules obtained with <code>fidexGloRules</code> algorithm.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--global_rules_file</code> JSON identifier <code>global_rules_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#test-prediction-file","title":"Test prediction file","text":"<p>Path to the file containing predictions on the test portion of the dataset. If it is used, the test data file must only contain the test data.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_file</code> JSON identifier <code>test_pred_file</code> Default value <code>None</code> <p>Note</p> <p>The test data file can hold the predictions too. This means that it is possible to merge the content of the test prediction file into the test data file instead of using this parameter. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#explanation-file","title":"Explanation file","text":"<p>Path to the file where explanation(s), consisting of one or more explaining rules, will be stored for each test sample.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--explanation_file</code> JSON identifier <code>explanation_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#attributes-file","title":"Attributes file","text":"<p>File containing attributes (inputs) and classes (outputs) names.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--attributes_file</code> JSON identifier <code>attributes_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed in the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#using-the-minimal-version","title":"Using the minimal version","text":"<p>Whether to use the minimal version, which only gets correct activated rules. If fidex is used, it launches <code>Fidex</code> when no such rule is found.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--with_minimal_version</code> JSON identifier <code>with_minimal_version</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#use-fidexglo-with-fidex","title":"Use FidexGlo with Fidex","text":"<p>Whether to call <code>Fidex</code> while executing the <code>FidexGlo</code> algorithm when no rule can exaplain a sample in the global ruleset.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--with_fidex</code> JSON identifier <code>with_fidex</code> Default value <code>False</code> <p>Note</p> <p>If this parameter is set to <code>True</code>, there is another set of parameters to be specified too.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#if-fidex-is-used","title":"If Fidex is used","text":"<p>Note</p> <p>This section is only usable if the parameter named \"use FidexGlo with fidex\" is set to <code>True</code>. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#train-data-file","title":"Train data file","text":"<p>File containing the training portion of the dataset used to train the model, from which the ruleset/weights belong. It can also contain training true classes (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#train-predictions-file","title":"Train predictions file","text":"<p>File containing the predictions from the training portion of the dataset used to train the model.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--train_pred_file</code> JSON identifier <code>train_pred_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the training portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Note</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#weights-file","title":"Weights file","text":"<p>File containing the model trained weights.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--weights_file</code> JSON identifier <code>weights_file</code> Default value <code>None</code> <p>Note</p> <p>This argument is not required if, and only if, the rules file is specified instead. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#rules-file","title":"Rules file","text":"<p>File containing the model trained rules.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--rules_file</code> JSON identifier <code>rules_file</code> Default value <code>None</code> <p>Note</p> <p>This argument is not required if, and only if, the weights file is specified instead. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the test portion of the dataset used to train the model.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code> <p>Note</p> <p>The true classes can also be specified inside the test data file. This means it is possible to merge classes into the test data file instead of using this parameter.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#maximum-number-of-iterations","title":"Maximum number of iterations","text":"<p>Maximum number of <code>Fidex</code> iterations allowed. Also the maximum possible number of antecedents in a rule. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_iterations</code> JSON identifier <code>max_iterations</code> Default value <code>10</code> <p>Tip</p> <p>If you're working with images, we recommend setting this argument to <code>25</code>.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#minimum-covering","title":"Minimum covering","text":"<p>Minimal number of samples covered by every generated rule. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--min_covering</code> JSON identifier <code>min_covering</code> Default value <code>2</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#use-dichotomic-search","title":"Use dichotomic search","text":"<p>Whether or not the algorithm uses a dichotomic strategy to compute a rule. This occurs when the algorithm fails to find a rule with the minimum covering value used.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--covering_strategy</code> JSON identifier <code>covering_strategy</code> Default value <code>True</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#maximum-number-of-failed-attempts","title":"Maximum number of failed attempts","text":"<p>Number of attempts allowed to compute a rule that could not be found by the algorithm. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_failed_attempts</code> JSON identifier <code>max_failed_attempts</code> Default value <code>30</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#minimum-fidelity","title":"Minimum fidelity","text":"<p>Lowest fidelity score allowed for a rule to be selected. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--min_fidelity</code> JSON identifier <code>min_fidelity</code> Default value <code>1.0</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#minimum-generated-fidelity","title":"Minimum generated fidelity","text":"<p>Lowest fidelity score to which we agree to go down when a rule must be generated. Takes values in the range <code>[0,1]</code></p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--lowest_min_fidelity</code> JSON identifier <code>lowest_min_fidelity</code> Default value <code>0.75</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#number-of-rules","title":"Number of rules","text":"<p>Number of <code>Fidex</code> rules to compute per sample when launching the <code>Fidex</code> algorithm. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_fidex_rules</code> JSON identifier <code>nb_fidex_rules</code> Default value <code>1</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#dimension-dropout","title":"Dimension dropout","text":"<p>Percentage of dimensions that are ignored during an iteration. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--dropout_dim</code> JSON identifier <code>dropout_dim</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#hyperplane-dropout","title":"Hyperplane dropout","text":"<p>Percentage of hyperplanes that are ignored during an iteration. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--dropout_hyp</code> JSON identifier <code>dropout_hyp</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer during training. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#normalization-file","title":"Normalization file","text":"<p>File containing the mean and standard deviation for specified attributes that have been normalized. If specified, it is used to denormalize the rules.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--normalization_file</code> JSON identifier <code>normalization_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#mus","title":"Mus","text":"<p>Mean or median of each attribute index specified in normalization indices that have been normalized. This argument is used alongside sigmas and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--mus</code> JSON identifier <code>mus</code> Default value <code>None</code> <p>Warning</p> <p>If sigmas or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#sigmas","title":"Sigmas","text":"<p>Standard deviation of each attribute index specified in normalization indices that have been normalized. This argument is used alongside mus and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--sigmas</code> JSON identifier <code>sigmas</code> Default value <code>None</code> <p>Warning</p> <p>If mus or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#normalization-indices","title":"Normalization indices","text":"<p>Indices of attributes that have been normalized. If specified, it is used to denormalize the rules. Index starts at 0. Each index takes values in the range <code>[0,nb_attributes-1]</code>.</p> Property Value Is required No** Type <code>List of integers</code> CLI argument syntax <code>--normalization_indices</code> JSON identifier <code>normalization_indices</code> Default value <code>[0,...,nb_attributes-1]</code> <p>Warning</p> <p>If mus or sigmas are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#seed","title":"Seed","text":"<p>Number to feed the random generator. If <code>0</code>, the randomness cannot be reproduced. If any other number <code>x</code> is used, you can reproduce the same output if <code>x</code> is re-used. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--seed</code> JSON identifier <code>seed</code> Default value <code>0</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.fidex import fidexGlo\n\nfidexGlo(\"\"\"\n--root_folder dimlp/datafiles \n--test_data_file test_data.txt \n--test_pred_file predTest.out \n--global_rules_file globalRules.rls \n--nb_attributes 16 \n--nb_classes 2 \n--explanation_file explanation.txt \n--with_fidex true \n--train_data_file train_data.txt \n--train_pred_file predTrain.out \n--train_class_file train_class.txt \n--test_class_file test_class.txt \n--weights_file weights.wts\"\"\"\n)\n</code></pre> <pre><code>./fidexGlo --root_folder ../dimlp/datafiles --test_data_file test_data.txt --test_pred_file predTest.out --global_rules_file globalRules.rls --nb_attributes 16 --nb_classes 2 --explanation_file explanation.txt --with_fidex true --train_data_file train_data.txt --train_pred_file predTrain.out --train_class_file train_class.txt --test_class_file test_class.txt --weights_file weights.wts\n</code></pre>"},{"location":"documentation/dimlpfidex/fidex/fidexglo/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/fidex/fidexglo/#explanation-file_1","title":"Explanation file","text":"<p>This file contains the explanations computed for each test data sample. An explanation is given by a bunch of correct activated global rules computed beforehand by FidexGloRules , as well as any incorrectly activated rules if present. If no rule is activated for a sample, one or more local rules are computed by Fidex. The file begins with global statistics about the ruleset, followed by the explanation for each test sample. Each explanation includes the model's prediction class its probability score (confidence). For both the correct and incorrect activated rules, the number of rules is provided, with rules ordered by their covering size and associated with their performance metrics. At the end of the file, a statistic is included showing the percentage of times that Fidex was called to generate a local rule.</p> <p>Global Statistics:</p> <code>Number of rules</code> Indicates the total number of rules in the ruleset. <code>Mean sample covering number per rule</code> The average number of training samples covered by each rule. <code>Mean number of antecedents per rule</code> Represents the average number of conditions (antecedents) in each rule. <code>Decision threshold</code> If present, indicates the decision threshold used for prediction. <p>Explanation of Each Rule:</p> <p>Each rule consists of conditions on various attributes, followed by the predicted class, and is accompanied by several performance metrics. Let's break down this rule as an example:</p> <pre><code>Rule 1: X0&gt;=0.65839 X1&gt;=0.423139 X8&gt;=0.105399 -&gt; class 0\n    Train Covering size : 121\n    Train Fidelity : 1\n    Train Accuracy : 0.950413\n    Train Confidence : 0.97161\n</code></pre> <code>X0, X1, X8</code> These represent the variables from the dataset. <code>&gt;=0.65839, &gt;=0.423139, &gt;=0.105399</code> The thresholds that the variable values must meet for the rule to be activated. <code>-&gt; class 0</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 0. <p>Performance Metrics Associated with the Rule:</p> <code>Train Covering size</code> Indicates the number of training samples that are covered by the rule. For Rule 1, it covers 121 samples. <code>Train Fidelity</code> Measures how well the rule aligns with the model\u2019s predictions. A fidelity of 1 means that the rule exactly matches the model\u2019s predictions for all the samples it covers. <code>Train Accuracy</code> The accuracy of the rule in correctly classifying the samples it covers. In the case of Rule 1, 95.04% of the covered samples are correctly classified. <code>Train Confidence</code> This is the average confidence score of the model\u2019s predictions for the samples covered by the rules. It is computed based on the prediction scores of the covered samples, indicating the model\u2019s confidence in its classifications. For Rule 1, the confidence is 97.16%. <p>Each subsequent rule follows the same structure.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/","title":"FidexGloRules","text":""},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#description","title":"Description","text":"<p>The Fidex algorithm is an approach to rule extraction that can be applied to supervised neural networks and their ensembles, convolutional neural networks, decision tree ensembles, and support vector machines. The name of the algorithm is a contraction of fidelity and explainability. Fidelity refers to how well an extracted rule mimics the behavior of a given model.</p> <p><code>FidexGloRules</code> uses <code>Fidex</code> to generate one rule for each sample in the dataset. These local rules are then aggregated to form a global ruleset that explains the overall behavior of the model. The key idea remains identifying discriminant hyperplanes in the feature space that separate different classes. This is achieved through the staircase activation function in models containing a DIMLP layer, or by leveraging decision tree rules generated from Random Forest and Gradiend Boosting models. The global ruleset is refined using a heuristic to remove redundant rules while ensuring full coverage of the training dataset.</p> <p><code>FidexGloRules</code> retains the efficiency of <code>Fidex</code> in terms of computational complexity, but due to the need to generate one rule per sample and aggregate them into a global ruleset, the complexity becomes quadratic with respect to the number of samples. Specifically, it scales quadratically with the product of the problem's dimensionality, the number of training samples, and the maximal number of rule antecedents.</p> <p>This approach is particularly effective for providing a comprehensive explanation of a model's decision-making process across an entire dataset, rather than just for individual samples. By optimizing fidelity and reducing the rule set through heuristic techniques, <code>FidexGloRules</code> produces a concise and interpretable global explanation.</p> <p>For more details on the <code>Fidex</code> and <code>FidexGloRules</code> (called <code>FidexGlo</code>) algorithms, you can refer to this paper.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#arguments-list","title":"Arguments list","text":"<p>The <code>FidexGloRules</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative to this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#train-data-file","title":"Train data file","text":"<p>File containing the training portion of the dataset used to train the model, from which the ruleset/weights belong. It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#train-predictions-file","title":"Train predictions file","text":"<p>File containing the predictions from the training portion of the dataset used to train the model.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_pred_file</code> JSON identifier <code>train_pred_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the training portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#weights-file","title":"Weights file","text":"<p>File containing the model trained weights.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--weights_file</code> JSON identifier <code>weights_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the rules file is specified instead. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#rules-file","title":"Rules file","text":"<p>File containing the model trained rules.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--rules_file</code> JSON identifier <code>rules_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the weights file is specified instead. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#global-rules-output-file","title":"Global Rules output file","text":"<p>Name of the file containing global rules generated by the algorithm.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--global_rules_outfile</code> JSON identifier <code>global_rules_outfile</code> Default value <code>None</code> <p>Info</p> <p>The filename's extension can be specified as <code>.json</code>. Allowing the program to generate a JSON-structured rule output file.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#heuristic","title":"Heuristic","text":"<p>Defines which heuristic to use when executing the algorithm. Values can be:</p> <ul> <li><code>1</code>: optimal rule generation. Gets the best of the algorithm capabilities but can be time-consuming depending on the size of your dataset.</li> <li><code>2</code>: Faster rules generation. Computes rules faster while keeping a good (but not as good as heuristic <code>1</code>) rule quality. </li> <li><code>3</code>: Fastest rules generation. Gets a set of decent (but not as good as heuristic <code>2</code>) global rules in the fastest way possible.</li> </ul> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--heuristic</code> JSON identifier <code>heuristic</code> Default value <code>None</code> <p>Tip</p> <p>If you use heuristic <code>1</code> or <code>2</code>, you can also specify a number of threads to accelerate the process.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#attributes-file","title":"Attributes file","text":"<p>File containing attributes (inputs) and classes (outputs) names.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--attributes_file</code> JSON identifier <code>attributes_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#maximum-number-of-iterations","title":"Maximum number of iterations","text":"<p>*Maximum number of <code>Fidex</code> iterations allowed. Also the maximum possible number of antecedents in a rule. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_iterations</code> JSON identifier <code>max_iterations</code> Default value <code>10</code> <p>Tip</p> <p>If you're working with images, we recommend setting this argument to <code>25</code>.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#minimum-covering","title":"Minimum covering","text":"<p>Minimal number of samples covered by every generated rule. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--min_covering</code> JSON identifier <code>min_covering</code> Default value <code>2</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#use-dichotomic-search","title":"Use dichotomic search","text":"<p>Whether or not the algorithm uses a dichotomic strategy to compute a rule. This occurs when the algorithm fails to find a rule with the minimum covering value used.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--covering_strategy</code> JSON identifier <code>covering_strategy</code> Default value <code>True</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#maximum-number-of-failed-attempts","title":"Maximum number of failed attempts","text":"<p>Number of attempts allowed to compute a rule that could not be found by the algorithm. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_failed_attempts</code> JSON identifier <code>max_failed_attempts</code> Default value <code>30</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#number-of-threads","title":"Number of threads","text":"<p>Threads used to compute the algorithm. This parameter has no effect if the heuristic used is not <code>1</code> or <code>2</code>. Takes values in the range <code>[1,nb_cores]</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_threads</code> JSON identifier <code>nb_threads</code> Default value <code>1</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#minimum-fidelity","title":"Minimum fidelity","text":"<p>Lowest fidelity score allowed for a rule to be selected. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--min_fidelity</code> JSON identifier <code>min_fidelity</code> Default value <code>1.0</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#minimum-generated-fidelity","title":"Minimum generated fidelity","text":"<p>Lowest fidelity score to which we agree to go down when a rule must be generated. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--lowest_min_fidelity</code> JSON identifier <code>lowest_min_fidelity</code> Default value <code>0.75</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#dimension-dropout","title":"Dimension dropout","text":"<p>Percentage of dimensions that are ignored during an iteration. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--dropout_dim</code> JSON identifier <code>dropout_dim</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#hyperplane-dropout","title":"Hyperplane dropout","text":"<p>Percentage of hyperplanes that are ignored during an iteration. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--dropout_hyp</code> JSON identifier <code>dropout_hyp</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer during training. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#decision-threshold","title":"Decision threshold","text":"<p>Threshold for predictions to be considered as correct. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--decision_threshold</code> JSON identifier <code>decision_threshold</code> Default value <code>None</code> <p>Warning</p> <p>The index of positive class must be specified too if you want to use this argument. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#positive-class-index","title":"Positive class index","text":"<p>Index of positive class for the usage of decision threshold, index starts at <code>0</code>. Takes values in the range <code>[0,nb_classes-1]</code>.</p> Property Value Is required No** Type <code>Integer</code> CLI argument syntax <code>--positive_class_index</code> JSON identifier <code>positive_class_index</code> Default value <code>None</code> <p>Warning</p> <p>If decision threshold is used, then this argument is required. </p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#normalization-file","title":"Normalization file","text":"<p>File containing the mean and standard deviation for specified attributes that have been normalized. If specified, it is used to denormalize the rules.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--normalization_file</code> JSON identifier <code>normalization_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#mus","title":"Mus","text":"<p>Mean or median of each attribute index specified in normalization indices that have been normalized. This argument is used alongside sigmas and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--mus</code> JSON identifier <code>mus</code> Default value <code>None</code> <p>Warning</p> <p>If sigmas or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#sigmas","title":"Sigmas","text":"<p>Standard deviation of each attribute index specified in normalization indices that have been normalized. This argument is used alongside mus and normalization indices. If specified, it is used to denormalize the rules. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--sigmas</code> JSON identifier <code>sigmas</code> Default value <code>None</code> <p>Warning</p> <p>If mus or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#normalization-indices","title":"Normalization indices","text":"<p>Indices of attributes that have been normalized. If specified, it is used to denormalize the rules. Index starts at 0. Each index takes values in the range <code>[0,nb_attributes-1]</code>.</p> Property Value Is required No** Type <code>List of integers</code> CLI argument syntax <code>--normalization_indices</code> JSON identifier <code>normalization_indices</code> Default value <code>[0,...,nb_attributes-1]</code> <p>Warning</p> <p>If mus or sigmas are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#seed","title":"Seed","text":"<p>Number to feed the random generator. If <code>0</code>, the randomness cannot be reproduced. If any other number <code>x</code> is used, you can reproduce the same output if <code>x</code> is re-used. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--seed</code> JSON identifier <code>seed</code> Default value <code>0</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.fidex import fidexGloRules\n\nfidexGloRules(\n\"\"\"--root_folder dimlp/datafiles \n--train_data_file train_data.txt \n--train_pred_file predTrain.out \n--train_class_file train_class.txt \n--nb_attributes 16 \n--nb_classes 2 \n--weights_file weights.wts \n--global_rules_outfile globalRules.rls \n--heuristic 1\n--nb_threads 4\"\"\"\n)\n</code></pre> <pre><code>./fidexGloRules --root_folder ../dimlp/datafiles --train_data_file train_data.txt --train_pred_file predTrain.out --train_class_file train_class.txt  --nb_attributes 16 --nb_classes 2 --weights_file weights.wts --global_rules_outfile globalRules.rls --heuristic 1 --nb_threads 4\n</code></pre>"},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/fidex/fidexglorules/#global-rules-output-file_1","title":"Global rules output file","text":"Text fileJSON file <p>This file contains all the computed global rules. It begins with global statistics about the ruleset, followed by individual rules, ordered by their covering size, and their associated performance metrics.</p> <p><p>Global Statistics:</p></p> <code>Number of rules</code> Indicates the total number of rules in the ruleset. <code>Mean sample covering number per rule</code> The average number of training samples covered by each rule. <code>Mean number of antecedents per rule</code> Represents the average number of conditions (antecedents) in each rule. <code>Decision threshold</code> Indicates whether a decision threshold was used for prediction and specifies the threshold if applicable. <p><p>Explanation of Each Rule:</p></p> <p>Each rule consists of conditions on various attributes, followed by the predicted class, and is accompanied by several performance metrics. Let's break down this rule as an example:</p> <pre><code>Rule 1: X0&gt;=0.65839 X1&gt;=0.423139 X8&gt;=0.105399 -&gt; class 0\n    Train Covering size : 121\n    Train Fidelity : 1\n    Train Accuracy : 0.950413\n    Train Confidence : 0.97161\n</code></pre> <code>X0, X1, X8</code> These represent the variables from the dataset. <code>&gt;=0.65839, &gt;=0.423139, &gt;=0.105399</code> The thresholds that the variable values must meet for the rule to be activated. <code>-&gt; class 0</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 0. <p><p>Performance Metrics Associated with the Rule:</p></p> <code>Train Covering size</code> Indicates the number of training samples that are covered by the rule. For Rule 1, it covers 121 samples. <code>Train Fidelity</code> Measures how well the rule aligns with the model\u2019s predictions. A fidelity of 1 means that the rule exactly matches the model\u2019s predictions for all the samples it covers. <code>Train Accuracy</code> The accuracy of the rule in correctly classifying the samples it covers. In the case of Rule 1, 95.04% of the covered samples are correctly classified. <code>Train Confidence</code> This is the average confidence score of the model\u2019s predictions for the samples covered by the rules. It is computed based on the prediction scores of the covered samples, indicating the model\u2019s confidence in its classifications. For Rule 1, the confidence is 97.16%. <p>Each subsequent rule follows the same structure.</p> <p>This file contains all the computed global rules. It begins with an indication whether a decision threshold was used for prediction and specifies the threshold if applicable. It then follows with each individual rule and its associated performance metrics, ordered by their covering size. Let's break down this rule as an example:</p> <pre><code>{\n    \"accuracy\": 1.0,\n    \"antecedents\": [\n        {\n            \"attribute\": 8,\n            \"inequality\": false,\n            \"value\": 0.07228972839342673\n        },\n        {\n            \"attribute\": 3,\n            \"inequality\": true,\n            \"value\": 0.6969069765088105\n        }\n    ],\n    \"confidence\": 0.991161,\n    \"coveredSamples\": [\n        67,\n        213,\n        567\n    ],\n    \"coveringSize\": 3,\n    \"fidelity\": 1.0,\n    \"outputClass\": 1\n}\n</code></pre> <code>accuracy</code> The accuracy of the rule on the samples it covers. For this rule, 100% of the covered samples are correctly classified. <code>antecedents</code> Each antecedant of the rule which is composed of an attribute (a variable from the dataset), an inequality, and a value. A <code>true</code> inequality represents <code>&gt;=</code>, while a <code>false</code> inequality represents <code>&lt;</code>. The value is the threshold that the attribute's value must meet for the rule to be activated. In this rule, the first antecedant specifies that <code>X8 &lt; 0.07228972839342673</code>. <code>confidence</code> Represents the average confidence score of the model\u2019s predictions for the samples covered by the rule. For this rule, the confidence is 99.12%. <code>coveredSamples</code> Indicates the samples covered by the rule. This rule coveres the samples 67, 213 and 567. <code>coveringSize</code> Indicates the number of samples that are covered by the rule. This rule covers 3 samples. <code>fidelity</code> Measures how well the rule aligns with the model\u2019s predictions. A fidelity of 1 means that the rule exactly matches the model\u2019s predictions for all the samples it covers. <code>outputClass</code> Indicates the class prediction of the rule, the predicted class is 1. <p>Each subsequent rule follows the same structure.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/","title":"FidexGloStats","text":""},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#description","title":"Description","text":"<p>The <code>FidexGloStats</code> program computes a variety of statistics based on the global ruleset generated by FidexGloRules. These metrics provide insights into the fidelity, accuracy, and explainability of the global ruleset in comparison to the model's predictions, as well as additional performance statistics related to classification outcomes. The results are output as text and/or saved to a file for further analysis.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#arguments-list","title":"Arguments list","text":"<p>The <code>FidexGloStats</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative to this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#global-rules-file","title":"Global Rules file","text":"<p>Path to the file containing the global rules obtained with <code>fidexGloRules</code> algorithm.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--global_rules_file</code> JSON identifier <code>global_rules_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#global-rules-output-file","title":"Global Rules output file","text":"<p>Name of the file containing global rules with test stats on test set generated by the algorithm.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--global_rules_outfile</code> JSON identifier <code>global_rules_outfile</code> Default value <code>None</code> <p>Info</p> <p>The filename's extension can be specified as <code>.json</code>. Allowing the program to generate a JSON-structured rule output file.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#test-data-file","title":"Test data file","text":"<p>File containing the testing portion of the dataset used to train the model. It can also contain training \"true classes\" (see Test true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#test-predictions-file","title":"Test predictions file","text":"<p>File containing the predictions from the testing portion of the dataset.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_pred_file</code> JSON identifier <code>test_pred_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the testing portion of the dataset.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the test data file.</p>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#attributes-file","title":"Attributes file","text":"<p>File containing attributes (inputs) and classes (outputs) names.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--attributes_file</code> JSON identifier <code>attributes_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed in the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#positive-class-index","title":"Positive class index","text":"<p>Index of positive class to compute true/false positive/negative rates, index starts at 0. If it is specified in the rules file, it has to be the same value. Takes values in the range <code>[0,nb_classes-1]</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--positive_class_index</code> JSON identifier <code>positive_class_index</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain all computed statistics.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from dimlpfidex.fidex import fidexGloStats\n\nfidexGloStats(\n\"\"\" --test_data_file test_data.txt \n    --test_pred_file predTest.out \n    --test_class_file test_class.txt \n    --nb_attributes 16 \n    --nb_classes 2 \n    --stats_file stats.txt\n    --global_rules_file globalRules.rls\n    --root_folder dimlp/datafiles\n    \"\"\"\n)\n</code></pre> <pre><code>./fidexGloStats --test_data_file test_data.txt --test_pred_file predTest.out --test_class_file test_class.txt --nb_attributes 16 --nb_classes 2 --stats_file stats.txt --global_rules_file globalRules.rls --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#statistics-file","title":"Statistics file","text":"<p>This file contains the statistics computed on the global ruleset generated by fidexGloRules. At the top of the file, there is the total number of rules, the mean number of samples covered by each rule and the mean number of antecedants per rule.</p> <p>The statistics computed for the ruleset are:</p> <code>Global rule fidelity rate</code> Measures how accurately the rules mimic the behavior of the model. This rate reflects the proportion of samples where the rules' predictions match the model's  predictions. <code>Global rule accuracy</code> The accuracy of the ruleset in predicting the correct class for test samples, regardless of the model's predictions. It is accurate when there is a correct fidel activated rule, when no rule is activated and the model is correct, or when the activated rules are incorrect but all agree on the correct class. <code>Explainability rate</code> The rate at which the ruleset provides an explanation for a sample by activating one or more rules that either predict the correct class or all agree on the same class. <code>Default rule rate</code> The proportion of samples for which no activated rule is found. In such cases, we choose the model's decision to generate a local rule. <code>Mean number of correct (fidel) activated rules per sample</code> The average number of activated rules per sample that are in agreement with the model's predictions. <code>Mean number of wrong (not fidel) activated rules per sample</code> The average number of activated rules per sample that do not match the model's predictions. <code>Model test accuracy</code> The overall accuracy of the model on the test dataset, calculated independently from the ruleset. <code>Model test accuracy when rules and models agree</code> The accuracy of the model when the model's predictions match the predictions made by the activated rules. <code>Model test accuracy when activated rules and model agree</code> The accuracy of the model for samples where at least one rule is activated and agrees with the model's prediction. <p>Additional Statistics (if the positive class index parameter is used) computed with both the model decision and the rules decision:</p> <code>True positive test samples</code> The number of test samples where the model (or rules) correctly identify the positive class. <code>False positive test samples</code> The number of test samples where the model (or rules) incorrectly classify a sample as positive when it is not. <code>True negative test samples</code> The number of test samples where the model (or rules) correctly identify the negative class. <code>False negative test samples</code> The number of test samples where the model (or rules) fail to classify a positive sample correctly. <code>False positive rate</code> The proportion of negative samples that were incorrectly classified as positive by the model or rules. <code>False negative rate</code> The proportion of positive samples that were incorrectly classified as negative by the model or rules. <code>Precision</code> The proportion of correctly identified positive samples out of all samples classified as positive (\\( \\frac{\\text{true positives}}{\\text{true positives} + \\text{false positives}} \\)). <code>Recall</code> The proportion of correctly identified positive samples out of all actual positive samples (\\( \\frac{\\text{true positives}}{\\text{true positives} + \\text{false negatives}} \\))."},{"location":"documentation/dimlpfidex/fidex/fidexglostats/#global-rules-output-file_1","title":"Global rules output file","text":"Text fileJSON file <p>This file contains all the global rules computed by FidexGloRules. It begins with global statistics about the ruleset, followed by individual rules, ordered by their covering size, and their associated performance metrics.</p> <p><p>Global Statistics:</p></p> <code>Number of rules</code> Indicates the total number of rules in the ruleset. <code>Mean sample covering number per rule</code> The average number of training samples covered by each rule. <code>Mean number of antecedents per rule</code> Represents the average number of conditions (antecedents) in each rule. <code>Decision threshold</code> Indicates whether a decision threshold was used for prediction and specifies the threshold if applicable. <p><p>Explanation of Each Rule:</p></p> <p>Each rule consists of conditions on various attributes, followed by the predicted class, and is accompanied by several performance metrics. Let's break down this rule as an example:</p> <pre><code>Rule 1: X0&gt;=0.69326 X1&gt;=0.036824 -&gt; class 0\n    Train Covering size : 112 --- Test Covering size : 59\n    Train Fidelity : 1 --- Test Fidelity : 1\n    Train Accuracy : 0.964286 --- Test Accuracy : 0.966102\n    Train Confidence : 0.971227 --- Test Confidence : 0.965577\n</code></pre> <code>X0, X1</code> These represent the variables from the dataset. <code>&gt;=0.69326, &gt;=0.036824</code> The thresholds that the variable values must meet for the rule to be activated. <code>-&gt; class 0</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 0. <p><p>Performance Metrics Associated with the Rule:</p></p> <p>Each statistic is represented for the training and testing set.</p> <code>Train Covering size</code> Indicates the number of training samples that are covered by the rule. For Rule 1, it covers 112 samples. <code>Train Fidelity</code> Measures how well the rule aligns with the model\u2019s predictions. A fidelity of 1 means that the rule exactly matches the model\u2019s predictions for all the samples it covers. <code>Train Accuracy</code> The accuracy of the rule in correctly classifying the samples it covers. In the case of Rule 1, 96.43% of the covered samples are correctly classified. <code>Train Confidence</code> Represents the average confidence score of the model\u2019s predictions for the samples covered by the rules. It is computed based on the prediction scores of the covered samples, indicating the model\u2019s confidence in its classifications. For Rule 1, the confidence is 97.12%. <p>Each subsequent rule follows the same structure.</p> <p>This file contains all the global rules computed by FidexGloRules. It begins with an indication whether a decision threshold was used for prediction and specifies the threshold if applicable. It then follows with each individual rule and its associated performance metrics, ordered by their covering size. Let's break down this rule as an example:</p> <pre><code>{\n    \"test\": {\n        \"accuracy\": 0.5,\n        \"antecedents\": [\n            {\n                \"attribute\": 24,\n                \"inequality\": true,\n                \"value\": 0.51123815959005\n            },\n            {\n                \"attribute\": 6,\n                \"inequality\": true,\n                \"value\": 1.9756892136185598\n            },\n        ],\n        \"confidence\": 0.07883515,\n        \"coveredSamples\": [\n            8,\n            24,\n            26,\n            74,\n            127,\n            176\n        ],\n        \"coveringSize\": 6,\n        \"fidelity\": 0.0,\n        \"outputClass\": 5\n    },\n    \"train\": {\n        \"accuracy\": 0.3333333333333333,\n        \"antecedents\": [\n            {\n                \"attribute\": 24,\n                \"inequality\": true,\n                \"value\": 0.51123815959005\n            },\n            {\n                \"attribute\": 6,\n                \"inequality\": true,\n                \"value\": 1.9756892136185598\n            },\n        ],\n        \"confidence\": 0.5935276666666667,\n        \"coveredSamples\": [\n            151,\n            376,\n            936\n        ],\n        \"coveringSize\": 3,\n        \"fidelity\": 1.0,\n        \"outputClass\": 5\n    }\n}\n</code></pre> <p>Each statistic is represented for the training and testing set.</p> <code>accuracy</code> The accuracy of the rule on the samples it covers. For this rule, 100% of the covered samples are correctly classified. <code>antecedents</code> Each antecedant of the rule which is composed of an attribute (a variable from the dataset), an inequality, and a value. A <code>true</code> inequality represents <code>&gt;=</code>, while a <code>false</code> inequality represents <code>&lt;</code>. The value is the threshold that the attribute's value must meet for the rule to be activated. In this rule, the first antecedant specifies that <code>X8 &lt; 0.07228972839342673</code>. <code>confidence</code> Represents the average confidence score of the model\u2019s predictions for the samples covered by the rule. For this rule, the confidence is 99.12%. <code>coveredSamples</code> Indicates the samples covered by the rule. This rule coveres the samples 67, 213 and 567. <code>coveringSize</code> Indicates the number of samples that are covered by the rule. This rule covers 3 samples. <code>fidelity</code> Measures how well the rule aligns with the model\u2019s predictions. A fidelity of 1 means that the rule exactly matches the model\u2019s predictions for all the samples it covers. <code>outputClass</code> Indicates the class prediction of the rule, the predicted class is 1. <p>Each subsequent rule follows the same structure.</p>"},{"location":"documentation/dimlpfidex/fidex/overview/","title":"Fidex algorithms","text":"<p>The <code>Fidex</code> ensemble consists of four algorithms, all derived from the core eponymous algorithm. The <code>Fidex</code> algorithm itself focuses on extracting local rules to explain the predictions of a pre-trained model for given data samples. Each of the other algorithms builds upon this foundation to offer additional functionalities. For more details on the <code>Fidex</code> algorithm, you can refer to this paper.</p>"},{"location":"documentation/dimlpfidex/fidex/overview/#architecture","title":"Architecture","text":"<p>The ensemble is built as shown below:</p> <pre><code>graph TD;\n    Fidex[Fidex] \n    FidexGloRules[FidexGloRules] \n    FidexGloStats[FidexGloStats] \n    FidexGlo[FidexGlo]\n\n    Fidex --&gt; FidexGloRules\n    FidexGloRules --&gt; FidexGloStats\n    Fidex --&gt; FidexGlo\n    FidexGloRules --&gt; FidexGlo</code></pre> <p>Each algorithm has its purpose:</p> <ul> <li>Fidex: Extracts a local explanation rule for one or more given samples.</li> <li>FidexGloRules: Extracts a set of global explanation rules from a given training dataset.</li> <li>FidexGloStats: Computes statistics from a given global ruleset.</li> <li>FidexGlo: Extracts an explanation for each given sample by generating one or more explaining rules, using the ruleset created by <code>FidexGloRules</code>, or <code>Fidex</code> if necessary.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/","title":"cnnTrn","text":""},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#description","title":"Description","text":"<p>The <code>CNN</code> (Convolutional Neural Network) is a deep learning architecture commonly used for tasks involving image data, such as classification and object detection. In this implementation, we use the <code>Keras</code> library, which allows for easy integration of popular CNN architectures like <code>ResNet</code> and <code>VGG</code>. The algorithm can be applied to a wide range of datasets, including well-known image datasets like <code>MNIST</code>, <code>CIFAR-10</code>, and <code>CIFAR-100</code>. Additionally, the inclusion of the Dimlp layer adds interpretability by enabling the extraction of decision rules via the Fidex algorithm, making the model's decisions more transparent and easier to explain.</p>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#practical-informations","title":"Practical informations","text":"<p>It is important to reduce the size of the images beforehand, as processing high-resolution images can be very time-consuming, especially when using Fidex or FidexGloRules.</p> <p>If you want to add a new model to <code>cnnTrn</code>, go to the cnnTrn file and add the new model name in the <code>--model</code> argument :</p> <pre><code>parser.add_argument(\"--model\", choices=[\"small\", \"large\", \"vgg\", \"resnet\", \"newModel\"], metavar=\"&lt;{small, large, vgg, resnet, newModel}&gt;\", help=\"Training model\", required=True)\n</code></pre> <p>Next, define this model inside the code after the other models, just before the following line:</p> <pre><code>else:\n    raise ValueError(f\"Internal error : No model has been executed, given model : {args.model}.\")\n</code></pre> <p>If your model is not 2D, you will need to change the <code>pair_type</code> of the <code>original_input_size</code> and <code>model_input_size</code> arguments to <code>list_type</code> in order to accept more or fewer than 2 values.</p>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#arguments-list","title":"Arguments list","text":"<p>The <code>cnnTrn</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>Every other specified argument will be ignored.</p>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative to this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#train-data-file","title":"Train data file","text":"<p>File containing the train portion of the dataset, It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#test-data-file","title":"Test data file","text":"<p>Path to the file containing test portion of the dataset, It can also contain testing \"true classes\" (see Test true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#original-input-size","title":"Original input size","text":"<p>Original dimensions of the input. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Pair of Integers</code> CLI argument syntax <code>--original_input_size</code> JSON identifier <code>original_input_size</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#number-of-channels","title":"Number of channels","text":"<p>Number of channels in the input (should be 3 for RGB image and 1 for a grayscaled image). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_channels</code> JSON identifier <code>nb_channels</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#model","title":"Model","text":"<p>Model used to train. Options are <code>small</code>, <code>large</code>, <code>vgg</code> and <code>resnet</code>.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--model</code> JSON identifier <code>model</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#data-format","title":"Data format","text":"<p>Format of the values, <code>normalized_01</code> if the values are normalized between <code>0</code> and <code>1</code>, <code>classic</code> if they are between <code>0</code> and <code>255</code>. Options are <code>normalized_01</code>, <code>classic</code> and <code>other</code>.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--data_format</code> JSON identifier <code>data_format</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the train portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file.</p>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the test portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the test data file. </p>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#train-and-validation-predictions-output-file","title":"Train and validation predictions output file","text":"<p>Path to the file where the output train and validation (in this order) prediction will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--train_valid_pred_outfile</code> JSON identifier <code>train_valid_pred_outfile</code> Default value <code>predTrain.out</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#test-prediction-ouput-file","title":"Test prediction ouput file","text":"<p>Path to the file where the test predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>predTest.out</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#validation-ratio","title":"Validation ratio","text":"<p>Percentage of train data taken for validation. Not used if validation files are given. Takes values in the range <code>]0,1[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--valid_ratio</code> JSON identifier <code>valid_ratio</code> Default value <code>0.1</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#validation-data-file","title":"Validation data file","text":"<p>Path to the file containing the validation portion of the dataset.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--valid_data_file</code> JSON identifier <code>valid_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#validation-true-classes-file","title":"Validation true classes file","text":"<p>Path to the file containing the validation true classes of the dataset, mandatory if classes are not specified in the validation data file.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--valid_class_file</code> JSON identifier <code>valid_class_file</code> Default value <code>None</code> <p>Warning</p> <p>If validation files are given, when using Fidex algorithms, you will need to merge the train data file and validation data file (in this order) as well as the train class file and the validation class file (in this order) and feed them to Fidex as respectively the train data file and the train class file.</p>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#weights-output-file","title":"Weights output file","text":"<p>Path to the file where the output trained weights of the model will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--weights_outfile</code> JSON identifier <code>weights_outfile</code> Default value <code>weights.wts</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain all computed statistics.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>stats.txt</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#number-of-epochs","title":"Number of epochs","text":"<p>Number of model training epochs. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_epochs</code> JSON identifier <code>nb_epochs</code> Default value <code>80</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#k-parameter","title":"K parameter","text":"<p>Parameter to improve dynamics by normalizing input data. Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--K</code> JSON identifier <code>K</code> Default value <code>1.0</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#model-input-size","title":"Model input size","text":"<p>Input size in the model. A small size is recommended to speed up the process. The size is modified if necessary. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Pair of Integers</code> CLI argument syntax <code>--model_input_size</code> JSON identifier <code>model_input_size</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#seed","title":"Seed","text":"<p>Seed for random number generation, <code>0=random</code>. Anything else than <code>0</code> is an arbitrary seed that can be reused to obtain the same randomly generated sequence and therefore getting same results. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--seed</code> JSON identifier <code>seed</code> Default value <code>0</code>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from trainings import cnnTrn\n\ncnnTrn(\n\"\"\"--model small \n--train_data_file train_data.txt \n--train_class_file train_class.txt \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--original_input_size (28,28) \n--nb_channels 1 \n--data_format classic \n--nb_classes 10 \n--root_folder dimlp/datafiles/Mnist\"\"\"\n)\n</code></pre> <pre><code>./cnnTrn --model small --train_data_file train_data.txt --train_class_file train_class.txt --test_data_file test_data.txt --test_class_file test_class.txt --original_input_size (28,28) --nb_channels 1 --data_format classic --nb_classes 10 --root_folder ../dimlp/datafiles/Mnist\n</code></pre>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#train-and-validationtest-prediction-file","title":"Train and validation/Test prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each train and validation (or test) sample. In the train prediction file, there are train predictions followed by validation predictions. Each row corresponds to the prediction for a single sample, with <code>N</code> values representing the probability that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The values in each row sum to 1. The class with the highest probability is considered the predicted class for that sample, unless a decision threshold is applied for a specific class. In that case, if the predicted probability for that class exceeds the threshold, the sample is classified as belonging to that class.</p> <p>For example:</p> <pre><code>0.000718874 0.999281\n0.949143 0.050857\n</code></pre> <p>In the first row, the model predicts a probability of approximately 0.0007 that the sample belongs to class 0, and 0.9993 that it belongs to class 1. Therefore, the model predicts class 1 for this sample. In the second row, the model predicts a probability of 0.949 that the sample belongs to class 0, and 0.051 that it belongs to class 1. Hence, the model predicts class 0 for this sample.</p> <p>Each row of probabilities allows you to interpret the model's confidence in its predictions, enabling you to understand the likelihood of each sample belonging to a particular class.</p>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#weights-output-file_1","title":"Weights output file","text":"<p>This file contains the weights and biases of the first hidden layer of the neural network, which is the Dimlp layer.</p> <ul> <li>The first row in the file represent the bias values. There is one bias value for each neuron.</li> <li>The second row represent the values of the weight matrix between the first layer and the next one.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#hdf5-trained-weights-output-file","title":"HDF5 trained weights output file","text":"<p>This file stores the weights of a trained model in HDF5 format (.h5). The file is used to save the parameters (weights and biases) of the model after it has been trained, allowing you to reload the model later for inference or further training without needing to retrain it from scratch.</p>"},{"location":"documentation/dimlpfidex/training-methods/cnntrn/#statistics-file","title":"Statistics file","text":"<p>This file contains accuracy on the training and testing sets. It offers a clear overview of the model\u2019s performance across different datasets, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified samples in each dataset (training or testing)."},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/","title":"computeRocCurve","text":""},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#description","title":"Description","text":"<p>The <code>computeRocCurve</code> algorithm calculates and plots the <code>ROC</code> (Receiver Operating Characteristic) curve based on a set of test predictions and true classes. The <code>ROC</code> curve is a graphical representation that illustrates the diagnostic ability of a binary classifier as its decision threshold is varied. It plots the true positive rate (sensitivity) against the false positive rate (1 - specificity), allowing for the evaluation of the model's performance across different thresholds. This implementation uses <code>scikit-learn</code>'s built-in functions to efficiently compute and plot the ROC curve, providing insights into the trade-off between sensitivity and specificity for the given predictions. Note that this algorithm is not applicable to SVM models.</p>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#arguments-list","title":"Arguments list","text":"<p>The <code>computeRocCurve</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>Every other specified argument will be ignored.</p>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative from this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the test portion of the dataset used to train the model.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#test-prediction-file","title":"Test prediction file","text":"<p>File containing predictions on the test portion of the dataset.</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_pred_file</code> JSON identifier <code>test_pred_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#positive-class-index","title":"Positive class index","text":"<p>Index of positive class, index starts at <code>0</code>. Takes values in the range <code>[0,nb_classes-1]</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--positive_class_index</code> JSON identifier <code>positive_class_index</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain the AUC score, it can be the training statistics file.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#display-parameter-inputs","title":"Display parameter inputs","text":"<p>Whether to show currently used parameters by the program while running.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--show_params</code> JSON identifier <code>show_params</code> Default value <code>True</code>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#roc-output-file","title":"ROC output file","text":"<p>Path to the file where the output ROC curve will be saved.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--output_roc</code> JSON identifier <code>output_roc</code> Default value <code>roc_curve.png</code>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#estimator","title":"Estimator","text":"<p>Name of the used estimator.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--estimator</code> JSON identifier <code>estimator</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from trainings import computeRocCurve\n\ncomputeRocCurve(\n\"\"\"--test_class_file test_class.txt \n--test_pred_file predTest.out \n--positive_class_index 1 \n--output_roc roc_curve.png \n--stats_file stats.txt \n--root_folder dimlp/datafiles \n--nb_classes 2\"\"\"\n)\n</code></pre> <pre><code>./computeRocCurve --test_class_file test_class.txt --test_pred_file predTest.out --positive_class_index 1 --output_roc roc_curve.png --stats_file stats.txt --root_folder ../dimlp/datafiles --nb_classes 2\n</code></pre>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#roc-curve","title":"Roc curve","text":"<p>This file contains a ROC (Receiver Operating Characteristic) curve, which is used to evaluate the performance of the model during training. The ROC curve is a plot with the following components:</p> <code>X-Axis (False Positive Rate)</code> This represents the proportion of negative samples that are incorrectly classified as positive. It measures the rate of false positives at various classification thresholds. <code>Y-Axis (True Positive Rate)</code> This represents the proportion of positive samples that are correctly classified as positive. <code>Curve</code> The curve itself shows the trade-off between the true positive rate and the false positive rate across different decision thresholds for the classifier. The curve starts at (0, 0) and moves towards (1, 1). <code>AUC (Area Under the Curve)</code> This value quantifies the overall performance of the model. It ranges from 0 to 1, with a value of 1 indicating perfect classification and a value of 0.5 indicating a model with no discriminative power. The higher the AUC, the better the model\u2019s ability to distinguish between the positive and negative classes. <p>This ROC curve visually illustrates how well the model is performing by showing the balance between the true positive rate and the false positive rate, with the AUC providing a summary measure of the model's classification performance.</p>"},{"location":"documentation/dimlpfidex/training-methods/computeroccurve/#statistics-file","title":"Statistics file","text":"<p>This file contains some statistics of the model aleady computed before. The AUC score computed on the test set is written at the end of the file.</p> <code>AUC (Area Under the Curve)</code> This value quantifies the overall performance of the model. It ranges from 0 to 1, with a value of 1 indicating perfect classification and a value of 0.5 indicating a model with no discriminative power. The higher the AUC, the better the model\u2019s ability to distinguish between the positive and negative classes."},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/","title":"gradBoostTrn","text":""},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#description","title":"Description","text":"<p>The <code>Gradient Boosting</code> decision tree model is an ensemble learning technique that builds a series of decision trees, where each tree corrects the errors of the previous ones. This method is widely used for both classification and regression tasks due to its strong predictive performance. In this implementation, we use the version provided by <code>scikit-learn</code>, which allows for flexible and efficient training. The generated decision tree rules allow Fidex to identify hyperplanes in the feature space that discriminate between different classes, thus enabling the extraction of decision rules, making the model's decisions more transparent and easier to explain. For more details on the <code>Gradient Boosting</code> algorithm with <code>Dimlp</code>, you can refer to this paper.</p>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#arguments-list","title":"Arguments list","text":"<p>The <code>gradBoostTrn</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>Every other specified argument will be ignored.</p>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative from this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#train-data-file","title":"Train data file","text":"<p>File containing the train portion of the dataset, It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#test-data-file","title":"Test data file","text":"<p>Path to the file containing test portion of the dataset, It can also contain testing \"true classes\" (see Test true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the train portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file.</p>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the test portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the test data file. </p>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#train-prediction-output-file","title":"Train prediction output file","text":"<p>Path to the file where the train predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--train_pred_outfile</code> JSON identifier <code>train_pred_outfile</code> Default value <code>predTrain.out</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#test-prediction-output-file","title":"Test prediction output file","text":"<p>Path to the file where the test predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>predTest.out</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain all computed statistics.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>stats.txt</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#rules-output-file","title":"Rules output file","text":"<p>Path to the file where the gradient boosting output rules will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--rules_outfile</code> JSON identifier <code>rules_outfile</code> Default value <code>GB_rules.rls</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#number-of-estimators","title":"Number of estimators","text":"<p>Number of generated trees in the forest. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--n_estimators</code> JSON identifier <code>n_estimators</code> Default value <code>100</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#loss-function","title":"Loss function","text":"<p>Loss function to be used and optimized. Options are <code>log_loss</code> and <code>exponential</code>.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--loss</code> JSON identifier <code>loss</code> Default value <code>log_loss</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#learning-rate","title":"Learning rate","text":"<p>Shrinks the contribution of each tree. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--learning_rate</code> JSON identifier <code>learning_rate</code> Default value <code>0.1</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#subsample","title":"Subsample","text":"<p>Fraction of samples to be used for fitting the individual base learners. Takes values in the range <code>]0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--subsample</code> JSON identifier <code>subsample</code> Default value <code>1.0</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#criterion","title":"Criterion","text":"<p>Function to measure split quality. Options are <code>friedman_mse</code> and <code>squared_error</code>.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--criterion</code> JSON identifier <code>criterion</code> Default value <code>friedman_mse</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#maximum-depth","title":"Maximum depth","text":"<p>Maximum depth of the individual regression estimators. Can be an <code>Integer</code> in the range <code>[2,\u221e[</code> or <code>no_max_depth</code>.</p> Property Value Is required No Type <code>Integer</code> or <code>String</code> CLI argument syntax <code>--max_depth</code> JSON identifier <code>max_depth</code> Default value <code>3</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#minimum-of-samples-to-split","title":"Minimum of samples to split","text":"<p>Minimum number of samples required to split an internal node, if float, it is a fraction of the number of samples. Takes <code>integers</code> in the range <code>[2,\u221e[</code> and <code>floats</code> in the range <code>]0,1]</code>.</p> Property Value Is required No Type <code>Integer</code> or <code>Float</code> CLI argument syntax <code>--min_samples_split</code> JSON identifier <code>min_samples_split</code> Default value <code>2</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#minimum-of-samples-to-be-leaf","title":"Minimum of samples to be leaf","text":"<p>Minimum number of samples required to be at a leaf node, if float, it is a fraction of the number of samples. Takes <code>integers</code> in the range <code>[1,\u221e[</code> and <code>floats</code> in the range <code>]0,1[</code>.</p> Property Value Is required No Type <code>Integer</code> or <code>Float</code> CLI argument syntax <code>--min_samples_leaf</code> JSON identifier <code>min_samples_leaf</code> Default value <code>1</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#minimum-weighted-fraction-to-be-leaf","title":"Minimum weighted fraction to be leaf","text":"<p>Minimum weighted fraction of the sum total of input samples weights required to be at a leaf node. Takes values in the range <code>[0,0.5]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--min_weight_fraction_leaf</code> JSON identifier <code>min_weight_fraction_leaf</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#maximum-number-of-features","title":"Maximum number of features","text":"<p>Number of features to consider when looking for the best split. If float, it is a fraction of the number of features. <code>1</code> stand for <code>1 feature</code>, for all features put <code>all</code>, not <code>1.0</code>. Values can be a <code>String</code>, options are: <code>sqrt</code>, <code>log2</code> or <code>all</code>. Takes <code>floats</code> in the range <code>]0,1[</code> and <code>integers</code> in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code>, <code>Float</code> or <code>String</code> CLI argument syntax <code>--max_features</code> JSON identifier <code>max_features</code> Default value <code>sqrt</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#maximum-number-of-leaf-nodes","title":"Maximum number of leaf nodes","text":"<p>Grow trees with a limited amount of leaf nodes in a best-first fashion. Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_leaf_nodes</code> JSON identifier <code>max_leaf_nodes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#minimum-impurity-decrease","title":"Minimum impurity decrease","text":"<p>A node will be split if this split induces a decrease of the impurity greater than or equal to this value. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--min_impurity_decrease</code> JSON identifier <code>min_impurity_decrease</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#initial-estimator","title":"Initial estimator","text":"<p>Estimator object used to compute the initial predictions. Option is <code>zero</code>.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--init</code> JSON identifier <code>init</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#seed","title":"Seed","text":"<p>Seed for random number generation. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--seed</code> JSON identifier <code>seed</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#verbosity-level","title":"Verbosity level","text":"<p>Controls the verbosity when fitting and predicting. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--verbose</code> JSON identifier <code>verbose</code> Default value <code>0</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#warm-start","title":"Warm start","text":"<p>Whether to reuse the solution of the previous call to fit and add more estimators to the ensemble.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--warm_start</code> JSON identifier <code>warm_start</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#validation-fraction","title":"Validation Fraction","text":"<p>Proportion of training data to set aside as validation set for early stopping. Takes values in the range <code>]0,1[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--validation_fraction</code> JSON identifier <code>validation_fraction</code> Default value <code>0.1</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#number-of-non-significant-iterations-before-stopping","title":"Number of non-significant iterations before stopping","text":"<p>Decide if early stopping will be used to terminate training when the validation score is not improving, stopping if the validation doesn't improve during this number of iterations. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--n_iter_no_change</code> JSON identifier <code>n_iter_no_change</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#tolerance","title":"Tolerance","text":"<p>Tolerance for the early stopping. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--tol</code> JSON identifier <code>tol</code> Default value <code>0.0001</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#ccp-alpha","title":"CCP alpha","text":"<p>Complexity parameter used for Minimal Cost-Complexity Pruning. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--ccp_alpha</code> JSON identifier <code>ccp_alpha</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from trainings import gradBoostTrn\n\ngradBoostTrn(\n\"\"\"--train_data_file train_data.txt \n--train_class_file train_class.txt \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--stats_file gb/stats.txt \n--train_pred_outfile gb/predTrain.out \n--test_pred_outfile gb/predTest.out \n--rules_outfile gb/GB_rules.rls \n--nb_attributes 16 \n--nb_classes 2 \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./gradBoostTrn --train_data_file train_data.txt --train_class_file train_class.txt --test_data_file test_data.txt --test_class_file test_class.txt --stats_file gb/stats.txt --train_pred_outfile gb/predTrain.out --test_pred_outfile gb/predTest.out --rules_outfile gb/GB_rules.rls --nb_attributes 16 --nb_classes 2 --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#traintest-prediction-file","title":"Train/Test prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each train (or test) sample. Each row corresponds to the prediction for a single sample, with <code>N</code> values representing the probability that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The values in each row sum to 1. The class with the highest probability is considered the predicted class for that sample, unless a decision threshold is applied for a specific class. In that case, if the predicted probability for that class exceeds the threshold, the sample is classified as belonging to that class.</p> <p>For example:</p> <pre><code>0.000718874 0.999281\n0.949143 0.050857\n</code></pre> <p>In the first row, the model predicts a probability of approximately 0.0007 that the sample belongs to class 0, and 0.9993 that it belongs to class 1. Therefore, the model predicts class 1 for this sample. In the second row, the model predicts a probability of 0.949 that the sample belongs to class 0, and 0.051 that it belongs to class 1. Hence, the model predicts class 0 for this sample.</p> <p>Each row of probabilities allows you to interpret the model's confidence in its predictions, enabling you to understand the likelihood of each sample belonging to a particular class.</p>"},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#rules-output-file_1","title":"Rules output file","text":"<p>This file contains the decision rules generated by the Gradient Boosting Decision Tree model. Each set of rules corresponds to a specific tree in the model, and these rules are used to identify the discriminant hyperplanes in the feature space during the Fidex algorithm.</p> <p>File structure:</p> <p>The file is organized into trees, with each tree containing a series of rules. Each tree contributes to the overall decision-making process in the Gradient Boosting model.</p> <p>Rule structure:</p> <p>Each rule consists of conditions on various attributes, followed by a score value. Let's break down this rule as an example:</p> <pre><code>Rule 1: X2&lt;=0.8075000047683716 X0&lt;=0.7166664898395538 X4&lt;=0.5 -&gt; value [1.69695588]\n</code></pre> <code>X2, X0, X4</code> These represent the variables from the dataset. <code>Rule 1</code> This indicates the rule number within the tree. <code>Conditions</code> The conditions are logical comparisons between a feature (X) and a threshold value (e.g., X1&lt;=0.5). Multiple conditions are combined in a rule, and all conditions must be satisfied for the rule to apply. <code>Value</code> This represents the output value (or prediction) of the tree if the conditions of the rule are satisfied. The value is typically a contribution to the final prediction in the Gradient Boosting model."},{"location":"documentation/dimlpfidex/training-methods/gradboosttrn/#statistics-file","title":"Statistics file","text":"<p>This file contains accuracy on the training and testing sets. It offers a clear overview of the model\u2019s performance across different datasets, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified samples in each dataset (training or testing)."},{"location":"documentation/dimlpfidex/training-methods/mlptrn/","title":"mlpTrn","text":""},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#description","title":"Description","text":"<p>The <code>MLP</code> (Multi-Layer Perceptron) is a class of feedforward artificial neural networks that consists of multiple layers of nodes, including an input layer, one or more hidden layers, and an output layer. It is commonly used for both classification and regression tasks. In this implementation, we use the version provided by <code>scikit-learn</code>, which allows for flexible and efficient training. The inclusion of the Dimlp layer adds interpretability by enabling the extraction of decision rules via the Fidex algorithm, making the model's decisions more transparent and easier to explain.</p>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#arguments-list","title":"Arguments list","text":"<p>The <code>mlpTrn</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>Every other specified argument will be ignored.</p>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative to this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#train-data-file","title":"Train data file","text":"<p>File containing the train portion of the dataset, It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#test-data-file","title":"Test data file","text":"<p>Path to the file containing test portion of the dataset, It can also contain testing \"true classes\" (see Test true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the train portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file.</p>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the test portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the test data file. </p>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#train-prediction-output-file","title":"Train prediction output file","text":"<p>Path to the file where the train predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--train_pred_outfile</code> JSON identifier <code>train_pred_outfile</code> Default value <code>predTrain.out</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#test-prediction-output-file","title":"Test prediction output file","text":"<p>Path to the file where the test predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>predTest.out</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain all computed statistics.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>stats.txt</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#weights-output-file","title":"Weights output file","text":"<p>Path to the file where the output trained weights of the model will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--weights_outfile</code> JSON identifier <code>weights_outfile</code> Default value <code>weights.wts</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#k-parameter","title":"K parameter","text":"<p>Parameter to improve dynamics by normalizing input data. Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--K</code> JSON identifier <code>K</code> Default value <code>1.0</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#hidden-layers-size","title":"Hidden layers size","text":"<p>*Size of each hidden layer. Each size takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>List of integers</code> CLI argument syntax <code>--hidden_layer_sizes</code> JSON identifier <code>hidden_layer_sizes</code> Default value <code>100</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#activation-function","title":"Activation function","text":"<p>Used activation function. Options <code>identity</code>, <code>logistic</code>, <code>tanh</code> and <code>relu</code>.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--activation</code> JSON identifier <code>activation</code> Default value <code>relu</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#solver","title":"Solver","text":"<p>Solver for weight optimization. Options <code>lbfgs</code>, <code>sgd</code> and <code>adam</code>.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--solver</code> JSON identifier <code>solver</code> Default value <code>adam</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#alpha","title":"Alpha","text":"<p>Strength of the <code>L2 regularization</code> term. Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--alpha</code> JSON identifier <code>alpha</code> Default value <code>0.0001</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#batch-size","title":"Batch size","text":"<p>Size of minibatches for stochastic optimizers for <code>adam</code> and <code>stochastic gradient descent</code>. Can be a number in the range <code>[1,\u221e[</code> or <code>auto</code>.</p> Property Value Is required No Type <code>Integer</code> or <code>String</code> CLI argument syntax <code>--batch_size</code> JSON identifier <code>batch_size</code> Default value <code>auto</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#learning-rate","title":"Learning rate","text":"<p>Learning rate schedule for weight updates for <code>stochastic gradient descent</code> solver. Options are <code>constant</code>, <code>invscaling</code>, and <code>adaptive</code>.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--learning_rate</code> JSON identifier <code>learning_rate</code> Default value <code>constant</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#initial-learning-rate","title":"Initial learning rate","text":"<p>Initial learning rate for <code>adam</code> and <code>stochastic gradient descent</code>. Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--learning_rate_init</code> JSON identifier <code>learning_rate_init</code> Default value <code>0.001</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#power-t","title":"Power T","text":"<p>Exponent for inverse scaling learning rate for <code>stochastic gradient descent</code>. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--power_t</code> JSON identifier <code>power_t</code> Default value <code>0.5</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#maximum-number-of-iterations","title":"Maximum number of iterations","text":"<p>Maximum number of training iterations. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_iterations</code> JSON identifier <code>max_iterations</code> Default value <code>200</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#shuffle","title":"Shuffle","text":"<p>Whether to shuffle samples in each iteration for <code>stochastic gradient descent</code> and <code>adam</code>.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--shuffle</code> JSON identifier <code>shuffle</code> Default value <code>True</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#seed","title":"Seed","text":"<p>Seed for random number generation for <code>stochastic gradient descent</code> and <code>adam</code>. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--seed</code> JSON identifier <code>seed</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#tolerance","title":"Tolerance","text":"<p>Tolerance for the optimization. Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--tol</code> JSON identifier <code>tol</code> Default value <code>0.0001</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#verbose","title":"Verbose","text":"<p>Enable verbose output.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--verbose</code> JSON identifier <code>verbose</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#warm-start","title":"Warm start","text":"<p>Whether to reuse the previous solution to fit initialization.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--warm_start</code> JSON identifier <code>warm_start</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#momentum","title":"Momentum","text":"<p>Momentum for gradient descent update for <code>stochastic gradient descent</code>. Takes values in the range <code>[0,1]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--momentum</code> JSON identifier <code>momentum</code> Default value <code>0.9</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#use-nesterovs-momentum","title":"Use Nesterovs momentum","text":"<p>Whether to use the Nesterov\u2019s momentum for <code>stochastic gradient descent</code> and <code>momentum</code>.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--nesterovs_momentum</code> JSON identifier <code>nesterovs_momentum</code> Default value <code>True</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#early-stopping","title":"Early stopping","text":"<p>Whether to use early stopping to terminate training when validation score is not improving for <code>stochastic gradient descent</code> and <code>adam</code>.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--early_stopping</code> JSON identifier <code>early_stopping</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#validation-fraction","title":"Validation fraction","text":"<p>Proportion of training data to set aside as validation set for early stopping. Takes values in the range <code>[0,1[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--validation_fraction</code> JSON identifier <code>validation_fraction</code> Default value <code>0.1</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#beta-1","title":"Beta 1","text":"<p>Exponential decay rate for estimates of first moment vector in <code>adam</code>. Takes values in the range <code>[0,1[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--beta_1</code> JSON identifier <code>beta_1</code> Default value <code>0.9</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#beta-2","title":"Beta 2","text":"<p>Exponential decay rate for estimates of second moment vector in <code>adam</code>. Takes values in the range <code>[0,1[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--beta_2</code> JSON identifier <code>beta_2</code> Default value <code>0.999</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#epsilon","title":"Epsilon","text":"<p>Value for numerical stability in <code>adam</code>. Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--epsilon</code> JSON identifier <code>epsilon</code> Default value <code>1e-08</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#number-of-non-significant-iterations-before-stopping","title":"Number of non-significant iterations before stopping","text":"<p>Maximum number of epochs to not meet <code>tol</code> improvement for <code>stochastic gradient descent</code> and <code>adam</code>. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--n_iter_no_change</code> JSON identifier <code>n_iter_no_change</code> Default value <code>10</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#maximum-number-of-loss-function-calls","title":"Maximum number of loss function calls","text":"<p>Maximum number of loss function calls for <code>lbfgs</code>. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_fun</code> JSON identifier <code>max_fun</code> Default value <code>15000</code>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from trainings import mlpTrn\n\nmlpTrn(\n\"\"\"--train_data_file train_data.txt \n--train_class_file train_class.txt \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--weights_outfile mlp/weights.wts \n--stats_file mlp/stats.txt \n--train_pred_outfile mlp/predTrain.out \n--test_pred_outfile mlp/predTest.out \n--nb_attributes 16 \n--nb_classes 2 \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./mlpTrn --train_data_file train_data.txt --train_class_file train_class.txt --test_data_file test_data.txt --test_class_file test_class.txt --weights_outfile mlp/weights.wts --stats_file mlp/stats.txt --train_pred_outfile mlp/predTrain.out --test_pred_outfile mlp/predTest.out --nb_attributes 16 --nb_classes 2 --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#traintest-prediction-file","title":"Train/Test prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each train (or test) sample. Each row corresponds to the prediction for a single sample, with <code>N</code> values representing the probability that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The values in each row sum to 1. The class with the highest probability is considered the predicted class for that sample, unless a decision threshold is applied for a specific class. In that case, if the predicted probability for that class exceeds the threshold, the sample is classified as belonging to that class.</p> <p>For example:</p> <pre><code>0.000718874 0.999281\n0.949143 0.050857\n</code></pre> <p>In the first row, the model predicts a probability of approximately 0.0007 that the sample belongs to class 0, and 0.9993 that it belongs to class 1. Therefore, the model predicts class 1 for this sample. In the second row, the model predicts a probability of 0.949 that the sample belongs to class 0, and 0.051 that it belongs to class 1. Hence, the model predicts class 0 for this sample.</p> <p>Each row of probabilities allows you to interpret the model's confidence in its predictions, enabling you to understand the likelihood of each sample belonging to a particular class.</p>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#weights-output-file_1","title":"Weights output file","text":"<p>This file contains the weights and biases of the first hidden layer of the neural network, which is the Dimlp layer.</p> <ul> <li>The first row in the file represent the bias values. There is one bias value for each neuron.</li> <li>The second row represent the values of the weight matrix between the first layer and the next one.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/mlptrn/#statistics-file","title":"Statistics file","text":"<p>This file contains accuracy on the training and testing sets. It offers a clear overview of the model\u2019s performance across different datasets, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified samples in each dataset (training or testing)."},{"location":"documentation/dimlpfidex/training-methods/normalization/","title":"normalization","text":""},{"location":"documentation/dimlpfidex/training-methods/normalization/#description","title":"Description","text":"<p>The normalization is a method that adjusts the scale of data attributes, typically by converting values to a standard range (e.g., zero mean and unit variance), facilitating more efficient and accurate model training. This algorithm offers flexibility by allowing normalization based on pre-defined parameters, calculated statistics from provided data files, or manual input of mean and standard deviation. Additionally, it supports denormalizing rule files for more interpretable results. The process generates normalized data files and denormalized rule files, and is especially useful when preparing data for Dimlp models.</p> <p>Keep the following in mind:</p> <ul> <li>Normalization is recommended before training with DimlpTrn and DimlpBT.</li> <li>Normalization is not necessary for CNN, MLP, and SVM as normalization is handled internally during the training process.</li> <li>Decision trees (e.g., Gradient Boosting, Random Forests) do not require normalization as they are robust to unnormalized data.</li> </ul> <p>Do not forget to denormalize the generated rules afterwards if you have normalized your data.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#arguments-list","title":"Arguments list","text":"<p>The <code>normalization</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>Every other specified argument will be ignored.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative to this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#attributes-file","title":"Attributes file","text":"<p>File containing attributes and classes names.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--attributes_file</code> JSON identifier <code>attributes_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#data-files","title":"Data files","text":"<p>List of data files to normalize, they are normalized with respect to the first one if normalization file is not specified.</p> Property Value Is required No** Type <code>List of strings</code> CLI argument syntax <code>--data_files</code> JSON identifier <code>data_files</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the rule files is specified. </p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#rule-files","title":"Rule files","text":"<p>List of rule files to denormalize, denormalization is possible only if a normalization file or mus, sigmas and normalization indices are given.</p> Property Value Is required No** Type <code>List of strings</code> CLI argument syntax <code>--rule_files</code> JSON identifier <code>rule_files</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the data files is specified. </p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#missing-values","title":"Missing values","text":"<p>String representing a missing value in your data.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--normalization_file</code> JSON identifier <code>normalization_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is required for normalization. Put <code>NaN</code> or any string not present in your data if there is no missing data.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#normalization-file","title":"Normalization file","text":"<p>File containing the mean and standard deviation for specified attributes to normalize data or denormalize rules.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--normalization_file</code> JSON identifier <code>normalization_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#mus","title":"Mus","text":"<p>Mean or median of each attribute index specified in normalization indices to normalize data or denormalize rules. This argument is used alongside sigmas and normalization indices. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--mus</code> JSON identifier <code>mus</code> Default value <code>None</code> <p>Warning</p> <p>If sigmas or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#sigmas","title":"Sigmas","text":"<p>Standard deviation of each attribute index specified in normalization indices to normalize data or denormalize rules. This argument is used alongside mus and normalization indices. Takes values in the range <code>]-\u221e,\u221e[</code>.</p> Property Value Is required No** Type <code>Float list</code> CLI argument syntax <code>--sigmas</code> JSON identifier <code>sigmas</code> Default value <code>None</code> <p>Warning</p> <p>If mus or normalization indices are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#normalization-indices","title":"Normalization indices","text":"<p>Indices of attributes to normalize or denormalize. Index starts at 0. Each index takes values in the range <code>[0,nb_attributes-1]</code>.</p> Property Value Is required No** Type <code>List of integers</code> CLI argument syntax <code>--normalization_indices</code> JSON identifier <code>normalization_indices</code> Default value <code>[0,...,nb_attributes-1]</code> <p>Warning</p> <p>If mus or sigmas are used, then this argument is required. Not used if a normalization file is given.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#normalization-output-file","title":"Normalization output file","text":"<p>Path to the file where the mean and standard deviation of the normalized attributes will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--output_normalization_file</code> JSON identifier <code>output_normalization_file</code> Default value <code>normalization_stats.txt</code>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#data-output-files","title":"Data output files","text":"<p>List containing the paths where the normalized data files will be saved.</p> Property Value Is required No Type <code>List of strings</code> CLI argument syntax <code>--output_data_files</code> JSON identifier <code>output_data_files</code> Default value <code>&lt;original_name&gt;_denormalized&lt;original_extension&gt;</code> <p>Warning</p> <p>If one name is specified, all names are required.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#rule-output-files","title":"Rule output files","text":"<p>List containing the paths where the denormalized rule files will be saved.</p> Property Value Is required No Type <code>List of strings</code> CLI argument syntax <code>--output_rule_files</code> JSON identifier <code>output_rule_files</code> Default value <code>&lt;original_name&gt;_denormalized&lt;original_extension&gt;</code> <p>Warning</p> <p>If one name is specified, all names are required.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#use-median","title":"Use median","text":"<p>Whether to use median instead of mean to normalize.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--with_median</code> JSON identifier <code>with_median</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#fill-missing-values","title":"Fill missing values","text":"<p>Whether to fill missing values with mean (or median) during normalization.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--fill_missing_values</code> JSON identifier <code>fill_missing_values</code> Default value <code>True</code>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#usage-example","title":"Usage example","text":"<p>For datafile normalization :</p> <p>Example</p> PythonCLI <pre><code>from trainings import normalization\n\nnormalization(\n\"\"\"--data_files [train_data.txt,test_data.txt]\n--normalization_indices [0,2,4]\n--nb_attributes 16\n--missing_values NaN\n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./normalization --data_files [train_data.txt,test_data.txt] --normalization_indices [0,2,4] --nb_attributes 16 --missing_values NaN --root_folder ../dimlp/datafiles\n</code></pre> <p>For rulefile denormalization :</p> <p>Example</p> PythonCLI <pre><code>from trainings import normalization\n\nnormalization(\n\"\"\"--normalization_file normalization_stats.txt\n--rule_files globalRules.rls\n--nb_attributes 16\n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./normalization --normalization_file normalization_stats.txt --rule_files globalRules.rls --nb_attributes 16 --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/training-methods/normalization/#normalized-output-data-files","title":"Normalized output data files","text":"<p>This file contains the normalized values of a dataset (taken from an original data file), where certain attributes have been adjusted based on a predefined mean (or median) and standard deviation (std). For attributes with defined mean and std values, normalization is applied using the formula: \\( \\text{normalized_value} = \\frac{\\text{(value - mean)}}{std} \\)\u200b. If no mean and std are defined for an attribute, its values remain unchanged during the normalization process. This normalization helps standardize data for more effective use in machine learning models.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#denormalized-output-rule-files","title":"Denormalized output rule files","text":"<p>This file contains denormalized values for a set of rules (taken from an original rules file) based on predefined mean (or median) and standard deviation (std) values for certain attributes. For attributes with defined mean and std values, denormalization is applied using the formula: \\( \\text{denormalized_value} =(\\text{normalized_value}\u00d7std)+\\text{mean} \\). Attributes without defined mean and std values will remain unchanged during the denormalization process. This procedure helps convert normalized rule thresholds back to their original scale, making the rules easier to interpret.</p>"},{"location":"documentation/dimlpfidex/training-methods/normalization/#normalization-output-file_1","title":"Normalization output file","text":"<p>This file stores the mean(or median) and standard deviation (std) values for specific attributes, which are used for normalization or denormalization purposes. Each line corresponds to an attribute, with the format:</p> <pre><code>[attribute index] : original mean: [mean value], original std: [std value]\n</code></pre> <p>These mean(or median) and std values are applied during normalization to transform raw data into normalized values, and during denormalization to revert normalized values back to their original scale.</p> <p>Attribute indices can be replaced with attribute names. In this case, an attribute file is required.</p>"},{"location":"documentation/dimlpfidex/training-methods/overview/","title":"Training methods","text":"<p>This collection of algorithms is designed to train various types of models that incorporate a special <code>Dimlp</code> layer or extract decision rules. This layer and rules enable the subsequent generation of interpretable decision rules that explain the model's decisions using the <code>Fidex</code> algorithm.</p>"},{"location":"documentation/dimlpfidex/training-methods/overview/#architecture","title":"Architecture","text":"<p>The architecture is built as shown below:</p> <pre><code>graph TD;\n    gradBoostTrn[gradBoostTrn] \n    randForestsTrn[randForestsTrn] \n    mlpTrn[mlpTrn] \n    svmTrn[svmTrn]\n    computeRocCurve[computeRocCurve]\n    cnnTrn[cnnTrn]\n\n    d(Training algorithms) --&gt; gradBoostTrn;\n    d --&gt; randForestsTrn;\n    d --&gt; mlpTrn;\n    d --&gt; svmTrn;\n    d --&gt; cnnTrn;\n    gradBoostTrn --&gt; computeRocCurve;\n    randForestsTrn --&gt; computeRocCurve;\n    mlpTrn --&gt; computeRocCurve;\n    cnnTrn --&gt; computeRocCurve;\n    Tools --&gt; normalization;\n    Tools --&gt; computeRocCurve;</code></pre> <p>Each algorithm has its purpose:</p> <ul> <li>gradBoostTrn: Trains a <code>Gradient Boosting</code> decision tree model, generates the decision tree rules for use by <code>Fidex</code> in rule extraction, and provides train and test predictions and accuracy.</li> <li>randForestsTrn: Trains a <code>Random Forest</code> model, generates the decision tree rules for use by <code>Fidex</code> in rule extraction, and provides train and test predictions and accuracy.</li> <li>mlpTrn: Trains an <code>MLP</code> (Multi-Layer Perceptron) model with a <code>Dimlp</code> layer on a training dataset, outputs the weights of this layer for use by <code>Fidex</code> in rule extraction, and also provides train and test predictions and accuracy.</li> <li>svmTrn: Trains an <code>SVM</code> (Support Vector Machine) model with a <code>Dimlp</code> layer on a training dataset, outputs the weights of this layer for use by <code>Fidex</code> in rule extraction, and provides train and test predictions, accuracy, and the ROC curve computed on the testing dataset.</li> <li>computeRocCurve: Calculates and plots the ROC curve based on a set of test predictions and true classes (not applicable to <code>SVM</code> models).</li> <li>normalization: Normalizes data files and denormalizes rules for better interpretation and processing.</li> <li>cnnTrn: Trains an <code>CNN</code> (Convolutional Neural Network) model with a <code>Dimlp</code> layer on a training dataset, outputs the weights of this layer for use by <code>Fidex</code> in rule extraction, and also provides train and test predictions and accuracy.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/","title":"randForestsTrn","text":""},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#description","title":"Description","text":"<p>The <code>Random Forest</code> model is an ensemble learning method that constructs multiple decision trees during training and merges their outputs to improve overall predictive accuracy and reduce overfitting. This method is highly effective for both classification and regression tasks. In this implementation, we use the version provided by <code>scikit-learn</code>, which allows for flexible and efficient training. The generated decision tree rules allow Fidex to identify hyperplanes in the feature space that discriminate between different classes, thus enabling the extraction of decision rules, making the model's decisions more transparent and easier to explain. For more details on the <code>Random Forest</code> algorithm with <code>Dimlp</code>, you can refer to this paper.</p>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#arguments-list","title":"Arguments list","text":"<p>The <code>randForestsTrn</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>Every other specified argument will be ignored.</p>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative to this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#train-data-file","title":"Train data file","text":"<p>File containing the train portion of the dataset, It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#test-data-file","title":"Test data file","text":"<p>Path to the file containing test portion of the dataset, It can also contain testing \"true classes\" (see Test true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the train portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file.</p>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the test portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the test data file. </p>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#train-prediction-output-file","title":"Train prediction output file","text":"<p>Path to the file where the train predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--train_pred_outfile</code> JSON identifier <code>train_pred_outfile</code> Default value <code>predTrain.out</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#test-prediction-output-file","title":"Test prediction output file","text":"<p>Path to the file where the test predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>predTest.out</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain all computed statistics.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>stats.txt</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#rules-output-file","title":"Rules output file","text":"<p>Path to the file where the random forests output rules will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--rules_outfile</code> JSON identifier <code>rules_outfile</code> Default value <code>RF_rules.rls</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#number-of-estimators","title":"Number of estimators","text":"<p>Number of generated trees in the forest. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--n_estimators</code> JSON identifier <code>n_estimators</code> Default value <code>100</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#criterion","title":"Criterion","text":"<p>Function to measure split quality. Options are <code>gini</code>, <code>entropy</code>, and <code>log_loss</code>.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--criterion</code> JSON identifier <code>criterion</code> Default value <code>gini</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#maximum-depth","title":"Maximum depth","text":"<p>Maximum depth of the tree. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_depth</code> JSON identifier <code>max_depth</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#minimum-of-samples-to-split","title":"Minimum of samples to split","text":"<p>Minimum number of samples required to split an internal node, if float, it is a fraction of the number of samples. Takes <code>integers</code> in the range <code>[2,\u221e[</code> and <code>floats</code> in the range <code>]0,1]</code>.</p> Property Value Is required No Type <code>Integer</code> or <code>Float</code> CLI argument syntax <code>--min_samples_split</code> JSON identifier <code>min_samples_split</code> Default value <code>2</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#minimum-of-samples-to-be-leaf","title":"Minimum of samples to be leaf","text":"<p>Minimum number of samples required to be at a leaf node, if float, it is a fraction of the number of samples. Takes <code>integers</code> in the range <code>[1,\u221e[</code> and <code>floats</code> in the range <code>]0,1[</code>.</p> Property Value Is required No Type <code>Integer</code> or <code>Float</code> CLI argument syntax <code>--min_samples_leaf</code> JSON identifier <code>min_samples_leaf</code> Default value <code>1</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#minimum-weighted-fraction-to-be-leaf","title":"Minimum weighted fraction to be leaf","text":"<p>Minimum weighted fraction of the sum total of input samples weights required to be at a leaf node. Takes values in the range <code>[0,0.5]</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--min_weight_fraction_leaf</code> JSON identifier <code>min_weight_fraction_leaf</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#maximum-number-of-features","title":"Maximum number of features","text":"<p>Number of features to consider when looking for the best split. If float, it is a fraction of the number of features. <code>1</code> stand for <code>1 feature</code>, for all features put <code>all</code>, not <code>1.0</code>. Values can be a <code>String</code>, options are: <code>sqrt</code>, <code>log2</code> or <code>all</code>. Takes <code>floats</code> in the range <code>]0,1[</code> and <code>integers</code> in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> or <code>Float</code> or <code>String</code> CLI argument syntax <code>--max_features</code> JSON identifier <code>max_features</code> Default value <code>sqrt</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#maximum-number-of-leaf-nodes","title":"Maximum number of leaf nodes","text":"<p>Grow trees with a limited amount of leaf nodes in a best-first fashion. Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_leaf_nodes</code> JSON identifier <code>max_leaf_nodes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#minimal-impurity-decrease","title":"Minimal impurity decrease","text":"<p>A node will be split if this split induces a decrease of the impurity greater than or equal to this value. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--min_impurity_decrease</code> JSON identifier <code>min_impurity_decrease</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#bootstrap","title":"Bootstrap","text":"<p>Whether bootstrap samples are used when building trees.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--bootstrap</code> JSON identifier <code>bootstrap</code> Default value <code>True</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#out-of-bag-score","title":"Out-of-bag score","text":"<p>Whether to use out-of-bag samples to estimate the generalization score.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--oob_score</code> JSON identifier <code>oob_score</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#number-of-jobs","title":"Number of jobs","text":"<p>Number of jobs to run in parallel, <code>-1</code> = using all processors.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--n_jobs</code> JSON identifier <code>n_jobs</code> Default value <code>1</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#seed","title":"Seed","text":"<p>Seed for random number generation. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--seed</code> JSON identifier <code>seed</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#verbose","title":"Verbose","text":"<p>Controls the verbosity when fitting and predicting. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--verbose</code> JSON identifier <code>verbose</code> Default value <code>0</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#warm-start","title":"Warm start","text":"<p>Whether to reuse the solution of the previous call to fit and add more estimators to the ensemble.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--warm_start</code> JSON identifier <code>warm_start</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#class-weight","title":"Class weight","text":"<p>Class balance, for exemple with a dictionnary and 2 classes : <code>{0:1.2, 1:3.5}</code>. Can also be <code>balanced</code> and <code>balanced_subsample</code>.</p> Property Value Is required No Type <code>String</code> or <code>Dictionnary</code> CLI argument syntax <code>--class_weight</code> JSON identifier <code>class_weight</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#ccp-alpha","title":"CCP alpha","text":"<p>Complexity parameter used for Minimal Cost-Complexity Pruning. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--ccp_alpha</code> JSON identifier <code>ccp_alpha</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#maximum-samples-to-draw","title":"Maximum samples to draw","text":"<p>Number of samples to draw to train each base estimator for bootstrap, if float, it is a fraction of the number of samples. Takes <code>floats</code> in the range <code>]0,1]</code> and <code>integers</code> in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> or <code>Integer</code> CLI argument syntax <code>--max_samples</code> JSON identifier <code>max_samples</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from trainings import randForestsTrn\n\nrandForestsTrn(\n\"\"\"--train_data_file train_data.txt \n--train_class_file train_class.txt \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--stats_file rf/stats.txt \n--train_pred_outfile rf/predTrain.out \n--test_pred_outfile rf/predTest.out \n--rules_outfile rf/RF_rules.rls \n--nb_attributes 16 \n--nb_classes 2 \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./randForestsTrn --train_data_file train_data.txt --train_class_file train_class.txt --test_data_file test_data.txt --test_class_file test_class.txt --stats_file rf/stats.txt --train_pred_outfile rf/predTrain.out --test_pred_outfile rf/predTest.out --rules_outfile rf/RF_rules.rls --nb_attributes 16 --nb_classes 2 --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#traintest-prediction-file","title":"Train/Test prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each train (or test) sample. Each row corresponds to the prediction for a single sample, with <code>N</code> values representing the probability that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The values in each row sum to 1. The class with the highest probability is considered the predicted class for that sample, unless a decision threshold is applied for a specific class. In that case, if the predicted probability for that class exceeds the threshold, the sample is classified as belonging to that class.</p> <p>For example:</p> <pre><code>0.000718874 0.999281\n0.949143 0.050857\n</code></pre> <p>In the first row, the model predicts a probability of approximately 0.0007 that the sample belongs to class 0, and 0.9993 that it belongs to class 1. Therefore, the model predicts class 1 for this sample. In the second row, the model predicts a probability of 0.949 that the sample belongs to class 0, and 0.051 that it belongs to class 1. Hence, the model predicts class 0 for this sample.</p> <p>Each row of probabilities allows you to interpret the model's confidence in its predictions, enabling you to understand the likelihood of each sample belonging to a particular class.</p>"},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#rules-output-file_1","title":"Rules output file","text":"<p>This file contains the decision rules generated by the Random Forest model. Each rule corresponds to a specific decision path within a tree, leading to a prediction for a particular class. These rules are used to identify the discriminant hyperplanes in the feature space during the Fidex algorithm.</p> <p>File structure:</p> <p>The file is organized into trees, with each tree containing a series of rules. Each tree contributes to the overall decision-making process in the Random Forest model.</p> <p>Rule structure:</p> <p>Each rule consists of conditions on various attributes, followed by a score value. Let's break down this rule as an example:</p> <pre><code>Rule 46: X0&gt;0.6833335161209106 X3&lt;=0.4423079937696457 X12&lt;=0.5 X0&lt;=0.75 -&gt; class 1 Covering: [0, 1]\n</code></pre> <code>X0, X3, X12</code> These represent the variables from the dataset. <code>Rule 46</code> This indicates the rule number within the tree. <code>Conditions</code> The conditions are logical comparisons between a feature (X) and a threshold value (e.g., X1&lt;=0.5). Multiple conditions are combined in a rule, and all conditions must be satisfied for the rule to apply. <code>class 1</code> The class predicted by the rule when the conditions are met. Here, the rule predicts class 1. <code>Covering: [0, 1]</code> The covering indicates the number of samples in the training dataset that are covered by the rule and belong to each class. For example, a covering of [1, 0] means that one sample belonging to class 0 is covered by this rule, while [0, 1] means that one sample belonging to class 1 is covered."},{"location":"documentation/dimlpfidex/training-methods/randforeststrn/#statistics-file","title":"Statistics file","text":"<p>This file contains accuracy on the training and testing sets. It offers a clear overview of the model\u2019s performance across different datasets, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified samples in each dataset (training or testing)."},{"location":"documentation/dimlpfidex/training-methods/svmtrn/","title":"svmTrn","text":""},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#description","title":"Description","text":"<p>The <code>SVM</code> (Support Vector Machine) model is a powerful supervised learning algorithm used primarily for classification tasks. It works by finding the hyperplane that best separates different classes in the feature space, maximizing the margin between the classes. In this implementation, we use the version provided by <code>scikit-learn</code>, which allows for flexible and efficient training. The inclusion of the Dimlp layer adds interpretability by enabling the extraction of decision rules via the Fidex algorithm, making the model's decisions more transparent and easier to explain. To get more details on the <code>SVM</code> algorithm with <code>Dimlp</code>, you can refer to this paper, and this one.</p>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#arguments-list","title":"Arguments list","text":"<p>The <code>svmTrn</code> algorithm works with both required and optional arguments. Each argument has specific properties:</p> <ul> <li>Is required means whether an argument must be specified when calling the program or not.</li> <li>Type specifies the argument datatype.</li> <li>CLI argument syntax is the exact name to use if you are writing the argument along with the program call.</li> <li>JSON identifier is the exact name to use if you are writing the argument inside a JSON configuration file.</li> <li>Default value is the value that will be used by the program if the argument is not specified. If <code>None</code>, it could mean that the argument is not used at all during the algorithm execution or could also mean that you have to specify it yourself.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#show-help","title":"Show help","text":"<p>Display parameters and other helpful information concerning the program usage and terminate it when done.</p> Property Value Is required No Type <code>None</code> CLI argument syntax <code>-h</code>, <code>--help</code> or <code>None</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>Every other specified argument will be ignored.</p>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#json-configuration-file","title":"JSON configuration file","text":"<p>File containing the configuration for the algorithm in JSON format (see more about JSON configuration files).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--json-configuration-file</code> JSON identifier <code>N/A</code> Default value <code>None</code> <p>Warning</p> <p>If you use this argument, it must be the only one specified. No other argument can be specified with it.</p>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#root-folder-path","title":"Root folder path","text":"<p>Default path from where all the other arguments related to file paths are going to be based. Using this allows you to work with paths relative to this location and avoid writing absolute paths or lengthy relative paths.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--root_folder</code> JSON identifier <code>root_folder</code> Default value <code>.</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#train-data-file","title":"Train data file","text":"<p>File containing the train portion of the dataset, It can also contain training \"true classes\" (see Train true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--train_data_file</code> JSON identifier <code>train_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#test-data-file","title":"Test data file","text":"<p>Path to the file containing test portion of the dataset, It can also contain testing \"true classes\" (see Test true classes file).</p> Property Value Is required Yes Type <code>String</code> CLI argument syntax <code>--test_data_file</code> JSON identifier <code>test_data_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#number-of-attributes","title":"Number of attributes","text":"<p>Number of attributes in the dataset (should be equal to the number of inputs of the model). Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_attributes</code> JSON identifier <code>nb_attributes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#number-of-classes","title":"Number of classes","text":"<p>Number of classes in the dataset (should be equal to the number of outputs of the model). Takes values in the range <code>[2,\u221e[</code>.</p> Property Value Is required Yes Type <code>Integer</code> CLI argument syntax <code>--nb_classes</code> JSON identifier <code>nb_classes</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#train-true-classes-file","title":"Train true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the train portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--train_class_file</code> JSON identifier <code>train_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the train data file.</p>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#test-true-classes-file","title":"Test true classes file","text":"<p>File containing \"true classes\" (expected predictions), from the test portion of the dataset used to train the model.</p> Property Value Is required No** Type <code>String</code> CLI argument syntax <code>--test_class_file</code> JSON identifier <code>test_class_file</code> Default value <code>None</code> <p>Warning</p> <p>This argument is not required if, and only if, the true classes are already specified inside the test data file. </p>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#train-prediction-ouput-file","title":"Train prediction ouput file","text":"<p>Path to the file where the train predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--train_pred_outfile</code> JSON identifier <code>train_pred_outfile</code> Default value <code>predTrain.out</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#test-prediction-ouput-file","title":"Test prediction ouput file","text":"<p>Path to the file where the test predictions will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--test_pred_outfile</code> JSON identifier <code>test_pred_outfile</code> Default value <code>predTest.out</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#statistics-output-file","title":"Statistics output file","text":"<p>Name of the output file that will contain all computed statistics.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--stats_file</code> JSON identifier <code>stats_file</code> Default value <code>stats.txt</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#logs-output-file","title":"Logs output file","text":"<p>Name of file containing every feedback made by the algorithm during its execution. If not specified, the feedback is displayed into the terminal.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--console_file</code> JSON identifier <code>console_file</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#weights-output-file","title":"Weights output file","text":"<p>Path to the file where the output trained weights of the model will be stored.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--weights_outfile</code> JSON identifier <code>weights_outfile</code> Default value <code>weights.wts</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#roc-output-file","title":"ROC output file","text":"<p>Path to the file where the output ROC curve will be saved.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--output_roc</code> JSON identifier <code>output_roc</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#return-roc","title":"Return ROC","text":"<p>Whether to return ROC statistics.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--return_roc</code> JSON identifier <code>return_roc</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#positive-class-index","title":"Positive class index","text":"<p>Index of positive class, index starts at <code>0</code>. Takes values in the range <code>[0,nb_classes-1]</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--positive_class_index</code> JSON identifier <code>positive_class_index</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#number-of-stairs","title":"Number of stairs","text":"<p>Number of stairs in the staircase activation function used in the Dimlp layer. Takes values in the range <code>[3,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--nb_quant_levels</code> JSON identifier <code>nb_quant_levels</code> Default value <code>50</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#k-parameter","title":"K parameter","text":"<p>Parameter to improve dynamics by normalizing input data. Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--K</code> JSON identifier <code>K</code> Default value <code>1.0</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#c-parameter","title":"C parameter","text":"<p>Regularization parameter. Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--C</code> JSON identifier <code>C</code> Default value <code>1.0</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#kernel","title":"Kernel","text":"<p>Kernel type used in the algorithm. Options are <code>linear</code>, <code>poly</code>, <code>rbf</code>, and <code>sigmoid</code>.</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--kernel</code> JSON identifier <code>kernel</code> Default value <code>rbf</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#polynomial-degree","title":"Polynomial degree","text":"<p>Degree of the <code>polynomial kernel</code> function. Takes values in the range <code>[0,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--degree</code> JSON identifier <code>degree</code> Default value <code>3</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#gamma","title":"Gamma","text":"<p>Gamma value. <code>Kernel</code> coefficient for <code>rbf</code>, <code>poly</code> and <code>sigmoid</code>. Can be <code>float</code> in the range <code>[0,\u221e[</code> or <code>String</code> with the following options: <code>scale</code>, or <code>auto</code>.</p> Property Value Is required No Type <code>Float</code> or <code>String</code> CLI argument syntax <code>--gamma</code> JSON identifier <code>gamma</code> Default value <code>scale</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#coef0","title":"Coef0","text":"<p>Independant term in the <code>kernel</code> function.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--coef0</code> JSON identifier <code>coef0</code> Default value <code>0.0</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#use-shrinking-heuristic","title":"Use shrinking heuristic","text":"<p>Whether to use the shrinking heuristic.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--shrinking</code> JSON identifier <code>shrinking</code> Default value <code>True</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#tolerance","title":"Tolerance","text":"<p>Tolerance for the stopping criterion. Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--tol</code> JSON identifier <code>tol</code> Default value <code>0.001</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#cache-size","title":"Cache size","text":"<p>Kernel cache size(MB). Takes values in the range <code>]0,\u221e[</code>.</p> Property Value Is required No Type <code>Float</code> CLI argument syntax <code>--cache_size</code> JSON identifier <code>cache_size</code> Default value <code>200.0</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#class-weight","title":"Class weight","text":"<p>Class balance, for exemple with a dictionnary and 2 classes : <code>{0:1.2, 1:3.5}</code>. Can also be <code>balanced</code>.</p> Property Value Is required No Type <code>String</code> or <code>Dictionnary</code> CLI argument syntax <code>--class_weight</code> JSON identifier <code>class_weight</code> Default value <code>None</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#verbose","title":"Verbose","text":"<p>Enable verbose output.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--verbose</code> JSON identifier <code>verbose</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#maximum-number-of-iterations","title":"Maximum number of iterations","text":"<p>Maximum number of training iterations. <code>-1</code> means no limit. Takes values in the range <code>[1,\u221e[</code>.</p> Property Value Is required No Type <code>Integer</code> CLI argument syntax <code>--max_iterations</code> JSON identifier <code>max_iterations</code> Default value <code>-1</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#decision-function-shape","title":"Decision function shape","text":"<p>Decision function shape. Options are <code>ovo</code>(one-vs-one), and <code>ovr</code> (one-vs-rest).</p> Property Value Is required No Type <code>String</code> CLI argument syntax <code>--decision_function_shape</code> JSON identifier <code>decision_function_shape</code> Default value <code>ovr</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#break-ties","title":"Break ties","text":"<p>Whether to break tie decision for <code>ovr</code> with more than 2 classes.</p> Property Value Is required No Type <code>Boolean</code> CLI argument syntax <code>--break_ties</code> JSON identifier <code>break_ties</code> Default value <code>False</code>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#usage-example","title":"Usage example","text":"<p>Example</p> PythonCLI <pre><code>from trainings import svmTrn\n\nsvmTrn(\n\"\"\"--train_data_file train_data.txt \n--train_class_file train_class.txt \n--test_data_file test_data.txt \n--test_class_file test_class.txt \n--weights_outfile svm/weights.wts \n--stats_file svm/stats.txt \n--train_pred_outfile svm/predTrain.out \n--test_pred_outfile svm/predTest.out \n--nb_attributes 16 \n--nb_classes 2 \n--root_folder dimlp/datafiles\"\"\"\n)\n</code></pre> <pre><code>./svmTrn --train_data_file train_data.txt --train_class_file train_class.txt --test_data_file test_data.txt --test_class_file test_class.txt --weights_outfile svm/weights.wts --stats_file svm/stats.txt --train_pred_outfile svm/predTrain.out --test_pred_outfile svm/predTest.out --nb_attributes 16 --nb_classes 2 --root_folder ../dimlp/datafiles\n</code></pre>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#output-interpretation","title":"Output interpretation","text":""},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#traintest-prediction-file","title":"Train/Test prediction file","text":"<p>This file contains the predicted probabilities for each possible class for each train (or test) sample. Each row corresponds to the prediction for a single sample, with <code>N</code> values <code>0</code> or <code>1</code> that the sample belongs to class <code>0</code>, <code>1</code>, ... or class <code>N</code>. The class with prediction <code>1</code> is considered the predicted class for that sample.</p> <p>For example:</p> <pre><code>0 1\n1 0\n</code></pre> <p>In the first row, the model predicts that the sample belongs to class 1 and it predicts the class 0 for the second sample.</p>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#weights-output-file_1","title":"Weights output file","text":"<p>This file contains the weights and biases of the first hidden layer of the neural network, which is the Dimlp layer.</p> <ul> <li>The first row in the file represent the bias values. There is one bias value for each neuron.</li> <li>The second row represent the values of the weight matrix between the first layer and the next one.</li> </ul>"},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#statistics-file","title":"Statistics file","text":"<p>This file contains accuracy on the training and testing sets. It offers a clear overview of the model\u2019s performance across different datasets, helping to evaluate how well the model has learned and generalized to unseen data.</p> <code>Accuracy</code> Indicates the proportion of correctly classified samples in each dataset (training or testing)."},{"location":"documentation/dimlpfidex/training-methods/svmtrn/#roc-curve","title":"Roc curve","text":"<p>This file contains a ROC (Receiver Operating Characteristic) curve, which is used to evaluate the performance of the Support Vector Machine (SVM) model during training. The ROC curve is a plot with the following components:</p> <code>X-Axis (False Positive Rate)</code> This represents the proportion of negative samples that are incorrectly classified as positive. It measures the rate of false positives at various classification thresholds. <code>Y-Axis (True Positive Rate)</code> This represents the proportion of positive samples that are correctly classified as positive. <code>Curve</code> The curve itself shows the trade-off between the true positive rate and the false positive rate across different decision thresholds for the classifier. The curve starts at (0, 0) and moves towards (1, 1). <code>AUC (Area Under the Curve)</code> This value quantifies the overall performance of the model. It ranges from 0 to 1, with a value of 1 indicating perfect classification and a value of 0.5 indicating a model with no discriminative power. The higher the AUC, the better the model\u2019s ability to distinguish between the positive and negative classes. <p>This ROC curve visually illustrates how well the SVM model is performing by showing the balance between the true positive rate and the false positive rate, with the AUC providing a summary measure of the model's classification performance.</p>"},{"location":"documentation/file-formats/execution-files/","title":"Execution Files","text":"<p>Execution files refer to all the files that can or must be input to our dimlpfidex algorithms. It is essential that each file follows the correct format to ensure the algorithms run properly. Let's detail the format of each input file.</p>"},{"location":"documentation/file-formats/execution-files/#files-format","title":"Files format","text":""},{"location":"documentation/file-formats/execution-files/#data-files","title":"Data files","text":"<p>These files contain the data for training, testing, or validation datasets, and may also include class labels. Each file should have one sample per line, with values separated by spaces, tabs, semicolons, or commas. The following formats are supported:</p> <ol> <li><code>Only attributes</code>: Each line contains only the attribute values as floats for one sample.</li> <li><code>Attributes followed by an integer class ID</code>: Each line contains attribute values as floats for one sample, followed by an integer representing the class label.</li> <li><code>Attributes followed by a one-hot encoded class</code>: Each line contains attribute values as floats for one sample, followed by a series of binary values (<code>0</code>s and <code>1</code>s) representing the class in a one-hot encoded format where the correct class is represented by <code>1</code> and the other classes by <code>0</code>.</li> </ol> <p>Here is an example for a dataset of 3 samples with 3 attributes and 2 classes, using one-hot encoding :</p> <p>Example</p> <pre><code>0.5 0.3 0.8 0 1\n0.2 0.7 0.4 1 0\n1.1 0.5 0.2 1 0\n</code></pre> <p>Special Format for Test Data Files (Fidex and FidexGlo):</p> <p>In the case of Fidex and FidexGlo, the test data files can also include prediction values. The format for each sample in these files will be as follows:</p> <ul> <li>First Line: Contains data attributes as floats. It may be followed by class information (either as an integer class ID or in one-hot encoded format).</li> <li>Second Line: Contains the prediction values for each class.</li> <li>Third Line (optional): Contains class information, only if it was not included in the first line and if present.</li> <li>Empty Line: Needs to have an empty line between each sample.</li> </ul> <p>Example of 2 test samples with 3 attributes and 2 classes:</p> <p>Example</p> <pre><code>0.5 0.3 0.8\n0.3 0.7\n0 1\n\n0.72 0.12 0.14\n0.6 0.4\n1 0\n</code></pre>"},{"location":"documentation/file-formats/execution-files/#class-files","title":"Class Files","text":"<p>These files should contain the class label of one sample per line, with values separated by spaces, tabs, semicolons, or commas. The following formats are supported:</p> <ol> <li><code>Integer class ID</code>: Each line contains a single integer representing the class label for the corresponding sample.</li> <li><code>One-hot encoded class</code>: Each line contains a series of binary values (<code>0</code>s and <code>1</code>s) representing the class in a one-hot encoded format, where the correct class is <code>1</code> and the others are <code>0</code>.</li> </ol> <p>Here is an example for a dataset of 3 samples with 2 classes, using class labels: These files should contain one line per data sample, each consisting of a series of numerical values ranged between <code>0</code> and <code>1</code> representing the model's prediction scores for each class.</p> <p>Example</p> <pre><code>0\n0\n1\n</code></pre> <p>And here is the same example with one-hot encoding:</p> <p>Example</p> <pre><code>1 0\n1 0\n0 1\n</code></pre>"},{"location":"documentation/file-formats/execution-files/#prediction-files","title":"Prediction files","text":"<p>These files should contain one line per data sample, each consisting of a series of numerical values ranged between <code>0</code> and <code>1</code> representing the model's prediction scores for each class. The sum of the scores in each line should equal 1. The values can be separated by spaces, tabs, semicolons, or commas.</p> <p>Here is an example for a dataset with 3 samples and 2 classes:</p> <p>Example</p> <pre><code>0.25 0.75\n0.80 0.20\n0.60 0.40\n</code></pre>"},{"location":"documentation/file-formats/execution-files/#weights-file","title":"Weights file","text":"<p>This file must contain the weights and biases between successive layers of neurons of one neural network trained beforehand. If the model is DimlpBT, the file can contain more than one network. In this case, each network is separated by a <code>Network &lt;id&gt;</code> marker. For each network :</p> <ul> <li>Odd rows in the file represent the bias values of neurons related to the next layer l<sub>i+1</sub>. There is one bias value for each neuron in that layer.</li> <li>Even rows represent the values of the weight matrix between the current layer l<sub>i</sub> and the next layer l<sub>i+1</sub>.</li> </ul> <p>If layer l<sub>i</sub> has m neurons and layer l<sub>i+1</sub> has n neurons, the weights are represented as a single row in the file in the following format:</p> <pre><code>w_11 w_21 w_31 ... w_m1  w_12 w_22 w_32 ... w_m2  ...  w_1n w_2n w_3n ... w_mn\n</code></pre> <p>Where w<sub>ij</sub> is the weight connecting the i<sup>th</sup> neuron in layer l<sub>i</sub> to the j<sup>th</sup> neuron in layer l<sub>i+1</sub>. The values need to be separated by spaces.</p> <p>For Fidex algorithms, the file can contain only the weights and bias of the first layer as the rest is ignored.</p> <p>Here is an example with 2 networks:</p> <p>Example</p> <pre><code>Network 1\n0.1 0.2 0.3\n0.4 0.5 0.6 0.7 0.8 0.9\n0.15 0.25\n0.35 0.45 0.55 0.65\nNetwork 2\n0.11 0.22 0.33\n0.44 0.55 0.66 0.77 0.88 0.99\n0.155 0.255\n0.355 0.455 0.555 0.655\n</code></pre>"},{"location":"documentation/file-formats/execution-files/#hidden-layers-file","title":"Hidden layers file","text":"<p>This file must contain the configuration of the neural network, specifying the number of neurons in each layer. Each row corresponds to a layer in the network.</p> <ul> <li>The first number indicates the layer number.</li> <li>The second number indicates the number of neurons in that layer.</li> <li>The two numbers need to be separated by a space.</li> </ul> <p>Example:</p> <pre><code>1 16\n2 5\n</code></pre> <p>In this example the first layer has 16 neurons and the second has 5.</p>"},{"location":"documentation/file-formats/execution-files/#attributes-file","title":"Attributes file","text":"<p>Thsi file must contain the names of all the attributes from the dataset, followed optionally by the names of the classes. The format is simple and must be followed precisely:</p> <ul> <li><code>One attribute per line</code>: Each line corresponds to the name of a single attribute.</li> <li><code>Optional class names</code>: If you choose to include class names, they should follow after all attributes, with one class name per line.</li> <li><code>No spaces in names</code>: Attribute and class names can't contain spaces.</li> </ul> <p>It is important to ensure that all attributes are specified. If class names are included, all classes must also be listed. The order is important as the first attribute/class name will represent the first attribute/class in the dataset. Here is an example for a dataset containing 3 attributes and 2 classes :</p> <p>Example</p> <pre><code>Attribute1\nAttribute2\nAttribute3\nClass1\nClass2\n</code></pre>"},{"location":"documentation/file-formats/execution-files/#normalization-file","title":"Normalization file","text":"<p>This file must contain the mean(or median) and standard deviation (std) values for specific attributes, which are used for normalization or denormalization purposes. Each line corresponds to an attribute, with the format:</p> <pre><code>[attribute index/attribute name] : original [mean/median]: [mean value], original std: [std value]\n</code></pre> <p>These mean(or median) and std values are applied during normalization to transform raw data into normalized values, and during denormalization to revert normalized values back to their original scale.</p> <p>Attribute indices can be replaced with attribute names. In this case, an attribute file is required.</p> <p>Here is an example with some attribute names and using median :</p> <p>Example</p> <pre><code>Attribute1 : original median: 12.5, original std: 0.53\nAttribute3 : original median: 46.9, original std: 1.53\nAttribute7 : original median: 30.2, original std: 10.3\n</code></pre>"},{"location":"documentation/file-formats/execution-files/#rules-file","title":"Rules file","text":"<p>When launching a Fidex algorithm</p> <p>This file must contain the decision rules generated by the Random Forest model or the Gradient Boosting model. Each rule corresponds to a specific decision path within a tree, leading to a prediction for a particular class. These rules are used to identify the discriminant hyperplanes in the feature space during the Fidex algorithm. Here is an example of a file generated by a <code>Gradient Boosting</code> and containing 2 trees :</p> <p>Example</p> <pre><code>-------------------\nTree 1\n-------------------\nRule 1: X15&lt;=0.31187500059604645 X1&lt;=0.5 X13&lt;=0.5 -&gt; value [2.59270259]\nRule 2: X15&lt;=0.31187500059604645 X1&lt;=0.5 X13&gt;0.5 -&gt; value [0.86412944]\n-------------------\nTree 2\n-------------------\nRule 1: X4&lt;=0.5 X9&lt;=0.030500000342726707 X3&lt;=0.573076993227005 -&gt; value [0.16391411]\nRule 2: X4&lt;=0.5 X9&lt;=0.030500000342726707 X3&gt;0.573076993227005 -&gt; value [-1.52554885]\n</code></pre> <p>Each tree is separated like this and contain some rules. The format of <code>Gradient Boosting</code> rules is :</p> <pre><code>Rule [id_rule]: [list of antecedants[Xi]{&lt;= OR &gt;}value] -&gt; value [pred_value]\n</code></pre> <p>And the format of <code>Random Forest</code> rules is :</p> <pre><code>Rule [id_rule]: [list of antecedants[Xi]{&lt;= OR &gt;}value] -&gt; class [class_id] Covering: {[1, 0] OR [0,1]}\n\n- **Rule files**: Contain rules in Dimlp or Fidex format. Formats:\\n\n  Dimlp: 'Rule 1: (x2 &gt; 0.785787) (x5 &gt; 0.591247) (x8 &lt; 0.443135) Class = 1 (187)'\\n\n  Fidex: 'X1&gt;=0.414584 X10&lt;0.507982 X5&gt;=0.314835 X6&gt;=0.356158 -&gt; class 0'\\n\n</code></pre> <p>When denormalizing rules</p> <p>This file must contain Fidex rules or Dimlp rules. <code>Fidex</code> rules can also be in JSON format. These rules are meant to be denormalized in order to get more interpretable results. The rules in the file need to be in one of these formats :</p> <p>Example</p> Text fileJSON file <pre><code>Fidex :\n    Rule [id_rule]: [list of antecedants[{Xi OR attribute_name}{&gt;= OR &lt;}value]] -&gt; {class [id_class] OR class_name}\n    Ex : Rule 1: X1&gt;=0.508498 X0&gt;=0.603383 X7&lt;0.463138 -&gt; class 0\nDimlp :\n    Rule [id_rule]: [list of antecedants[{xi OR attribute_name} {&gt; OR &lt;} value]] Class = [id_class] OR class_name ([covering])\n    Ex : Rule 1: (x1 &gt; 0.653808) (x2 &gt; 0.92407) (x8 &lt; 0.44302) Class = 1 (211)\n</code></pre> <pre><code>{\n    \"positive index class\": -1,\n    \"rules\": [\n        {\n            \"accuracy\": 1.0,\n            \"antecedents\": [\n                {\n                    \"attribute\": 8,\n                    \"inequality\": false,\n                    \"value\": 0.07228972839342673\n                },\n                {\n                    \"attribute\": 3,\n                    \"inequality\": true,\n                    \"value\": 0.6969069765088105\n                }\n            ],\n            \"confidence\": 0.991161,\n            \"coveredSamples\": [\n                67,\n                213,\n                567\n            ],\n            \"coveringSize\": 3,\n            \"fidelity\": 1.0,\n            \"outputClass\": 1\n        },\n        {\n            \"accuracy\": 1.0,\n            \"antecedents\": [\n                {\n                    \"attribute\": 8,\n                    \"inequality\": false,\n                    \"value\": 0.07228972839342673\n                },\n                {\n                    \"attribute\": 3,\n                    \"inequality\": true,\n                    \"value\": 0.6969069765088105\n                }\n            ],\n            \"confidence\": 0.991161,\n            \"coveredSamples\": [\n                67,\n                213,\n                567\n            ],\n            \"coveringSize\": 3,\n            \"fidelity\": 1.0,\n            \"outputClass\": 1\n        }\n    ],\n    \"threshold\": -1.0\n}\n</code></pre>"},{"location":"documentation/file-formats/execution-files/#global-rules-file","title":"Global rules file","text":"<p>The global rules file is generated by fidexGloRules and can by in a text or a JSON format. Here are the 2 formats explained :</p> Text fileJSON file <p>This file must contain all the computed global rules. It begins with global statistics about the ruleset, followed by individual rules, ordered by their covering size, and their associated performance metrics. Here is the beginning of such a file :</p> <pre><code>Number of rules : 57, mean sample covering number per rule : 46.140351, mean number of antecedents per rule : 2.754386\nNo decision threshold is used.\n\nRule 1: X1&gt;=0.508498 X0&gt;=0.603383 X7&lt;0.463138 -&gt; class 0\nTrain Covering size : 187\nTrain Fidelity : 1\nTrain Accuracy : 0.935829\nTrain Confidence : 0.954832\n\nRule 2: X14&gt;=0.196762 X1&gt;=0.975078 -&gt; class 0\nTrain Covering size : 180\nTrain Fidelity : 1\nTrain Accuracy : 0.9\nTrain Confidence : 0.934414\n</code></pre> <p>The file must follow this format. Let's specify explicitely the format of each line :</p> <p>First line :</p> <pre><code>Number of rules : [nb_rules], mean sample covering number per rule : [mean_covering], mean number of antecedents per rule : [mean_antecedant]\n</code></pre> <p>Second line :</p> <pre><code>{No decision threshold is used. OR Using a decision threshold of [threshold] for class [positive_class_index]}\n</code></pre> <p>Then, each rule is separated by an empty line and ranked by covering size with increasing rule id starting with 1. A rule is in this format :</p> <pre><code>Rule [id_rule]: [list of antecedants[{Xi OR attribute_name}{&gt;= OR &lt;}value]] -&gt; {class [id_class] OR class_name}\nTrain Covering size : [covering_size]\nTrain Fidelity : [fidelity]\nTrain Accuracy : [accuracy]\nTrain Confidence : [confidence]\n</code></pre> <p>Attributes and classes can be specified either by their name (in this case an attributes file must be given) or by their id.</p> <p>This file must contain all the computed global rules. It begins with an indication whether a decision threshold was used for prediction and specifies the threshold if applicable. It then follows with each individual rule and its associated performance metrics, ordered by their covering size. The file must be in this format (here we have 2 rules in the file) :</p> <p>Example</p> <pre><code>{\n    \"positive index class\": -1,\n    \"rules\": [\n        {\n            \"accuracy\": 1.0,\n            \"antecedents\": [\n                {\n                    \"attribute\": 8,\n                    \"inequality\": false,\n                    \"value\": 0.07228972839342673\n                },\n                {\n                    \"attribute\": 3,\n                    \"inequality\": true,\n                    \"value\": 0.6969069765088105\n                }\n            ],\n            \"confidence\": 0.991161,\n            \"coveredSamples\": [\n                67,\n                213,\n                567\n            ],\n            \"coveringSize\": 3,\n            \"fidelity\": 1.0,\n            \"outputClass\": 1\n        },\n        {\n            \"accuracy\": 1.0,\n            \"antecedents\": [\n                {\n                    \"attribute\": 8,\n                    \"inequality\": false,\n                    \"value\": 0.07228972839342673\n                },\n                {\n                    \"attribute\": 3,\n                    \"inequality\": true,\n                    \"value\": 0.6969069765088105\n                }\n            ],\n            \"confidence\": 0.991161,\n            \"coveredSamples\": [\n                67,\n                213,\n                567\n            ],\n            \"coveringSize\": 3,\n            \"fidelity\": 1.0,\n            \"outputClass\": 1\n        }\n    ],\n    \"threshold\": -1.0\n}\n</code></pre> <p>Note : A <code>true</code> inequality represents <code>&gt;=</code>, while a <code>false</code> inequality represents <code>&lt;</code>. If threshold and positive_class_index have value -1, there was no threshold used for the generation of the rules.</p>"},{"location":"documentation/file-formats/json-configuration-files/","title":"JSON Configuration Files","text":"<p>Configuration files are meant to ease the use of our algorithms. It allows you to write all needed arguments inside a JSON formatted file and use it as input to any <code>dimlpfidex</code> algorithm. This will allow you to write shorter <code>Python</code> function calls and/or <code>CLI</code> commands, improving readability and reusability.</p> <p>Example</p> CLIPython <p>Executing <code>Fidex</code> <code>CLI</code> command without configuration file: <pre><code>./fidex --root_folder my/folder/ --train_data_file train_data.txt --train_pred_file train_predictions.out --train_class_file train_classes.txt --test_data_file test_data.txt --nb_attributes 16 --nb_classes 2 --weights_file weights.wts --rules_outfile output_rules.rls --stats_file output_stats.txt\n</code></pre></p> <p>Executing <code>Fidex</code> with this configuration file <pre><code>./fidex --json_config_file my_conf.json\n</code></pre></p> <p>Executing <code>Fidex</code> <code>Python</code> command without configuration file:</p> <pre><code>from dimlpfidex.fidex import fidex\n\nfidex(\n\"\"\"--root_folder my/folder/ \n    --train_data_file train_data.txt \n    --train_pred_file train_predictions.out \n    --train_class_file train_classes.txt \n    --test_data_file test_data.txt \n    --nb_attributes 16 \n    --nb_classes 2 \n    --weights_file weights.wts \n    --rules_outfile output_rules.rls \n    --stats_file output_stats.txt\"\"\"\n)\n</code></pre> <p>Executing <code>Fidex</code> with this configuration file <pre><code>from dimlpfidex.fidex import fidex\nfidex(\"\"\"--json_config_file my_conf.json\"\"\")\n</code></pre></p> <p>If you are not used to JSON, you can:</p> <ul> <li>learn more about JSON here and try it by yourself.</li> <li>use our graphical user interface and generate your configuration file easily.</li> </ul>"},{"location":"documentation/file-formats/json-configuration-files/#example","title":"Example","text":"<p>Here is a simple example of the content of a configuration file named <code>my_conf.json</code>, this one respects the comparison above.</p> <pre><code>{\n    \"root_folder\": \"my/folder/\",\n    \"train_data_file\": \"train_data.txt\",\n    \"train_pred_file\": \"train_predictions.out\", \n    \"train_class_file\": \"train_classes.txt \",\n    \"test_data_file\": \"test_data.txt \",\n    \"nb_attributes\": 16,\n    \"nb_classes\": 2,\n    \"weights_file\": \"weights.wts \",\n    \"rules_outfile\": \"output_rules.rls\",\n    \"stats_file\": \"output_stats.txt\"\n}\n</code></pre> <p>Tip</p> <p>You can find configuration file templates for every <code>dimlpfidex</code> algorithm here.</p>"},{"location":"documentation/file-formats/overview/","title":"File formats","text":""},{"location":"documentation/file-formats/overview/#important-guidelines-for-file-usage","title":"Important Guidelines for File Usage","text":"<p>Before using our algorithms, consider the following essential guidelines for managing and preprocessing files and data:</p>"},{"location":"documentation/file-formats/overview/#file-naming-conventions","title":"File Naming Conventions:","text":"<p>There are no strict checks on the filenames provided by the user, so it is highly recommended to follow logical and consistent naming conventions to ensure clarity and ease of use. Here are some recommended extensions:</p> <pre><code>Rule Files: .rls\nPrediction Files: .out\nWeight Files: .wts\nImages: .png\nOther Files: .txt\n</code></pre>"},{"location":"documentation/file-formats/overview/#categorization-of-attributes","title":"Categorization of Attributes:","text":"<p>It is crucial to properly categorize attributes that have a set of discrete possible values. Each attribute should be expressed as either an integer or a float. For example, binary attributes such as \"SMOKER\" can take values 0 or 1. For multi-class attributes like color, it is recommended to use separate binary attributes, such as IS_RED, IS_GREEN, etc. This avoids introducing artificial proximity between unrelated categories (e.g., assigning 0 to red, 1 to blue, 2 to green).</p>"},{"location":"documentation/file-formats/overview/#data-normalization","title":"Data Normalization:","text":"<p>Normalizing your data before training can improve the performance of certain models. Keep the following in mind:</p> <ul> <li>Normalization is recommended before training with DimlpTrn and DimlpBT.</li> <li>Normalization is not necessary for CNN, MLP, and SVM as normalization is handled internally during the training process.</li> <li>Decision trees (e.g., Gradient Boosting, Random Forests) do not require normalization as they are robust to unnormalized data.</li> </ul> <p>Do not forget to denormalize the generated rules with the normalization tool afterwards if you have normalized your data.</p> <p>Here you can find all the documentation related to specific file formats used by our algorithms.</p> <ul> <li> <p>JSON configuration files</p> <p>All about our configuration files.</p> <p> More</p> </li> <li> <p>Execution files</p> <p>All about the input files used during the execution of our algorithms.</p> <p> More</p> </li> </ul>"},{"location":"documentation/mlxplain/examples/","title":"MLxplain Examples and Use Cases","text":"<p>In this section, you will find various resources to help you get started with the <code>MLxplain</code> library and explore its full potential through practical examples and use cases.</p> <p>You can get started with the <code>MLxplain</code> using and exploring two use cases: </p> <ul> <li>Aptos 2019 Blindness Detection Use Case</li> <li>Use dimlpfidex within the OmniXAI library</li> </ul> <p>In these use cases, we show how to use our methods and tools through the omnixai explainers and explanations modules, this adaptation is done by the <code>MLxplain</code> library and the omnixai-community package. </p>"},{"location":"documentation/mlxplain/overview/","title":"MLxplain","text":"<p>The MLxplain package serves as a comprehensive framework designed to extend the capabilities of OmniXAI, a well-regarded Python library for explainable AI (XAI). By integrating MLxplain, users can seamlessly access and utilize a broad array of algorithms developed in-house alongside the extensive suite of OmniXAI's explanation methods. This integration provides a robust and versatile environment tailored for advanced XAI tasks.</p>"},{"location":"documentation/mlxplain/overview/#core-idea","title":"Core Idea","text":"<p>Explainable AI (XAI) aims to make the decision-making process of machine learning models more transparent and understandable. MLxplain enhances OmniXAI\u2019s core capabilities by providing additional algorithms that complement and expand the library\u2019s existing methods. This combination allows users to benefit from both our proprietary solutions and OmniXAI's diverse array of explanation techniques, all within a single installation.</p>"},{"location":"documentation/mlxplain/overview/#package-overview","title":"Package Overview","text":"<p>MLxplain can be summarized in the following key components:</p> <ol> <li>Integration with OmniXAI:</li> <li>MLxplain builds upon OmniXAI\u2019s unified interface, which offers a range of explanation methods applicable to different data types and machine learning models.</li> <li> <p>This integration ensures that users have access to a wide variety of XAI techniques in a consistent and unified manner.</p> </li> <li> <p>Inclusion of Proprietary Algorithms:</p> </li> <li>MLxplain incorporates additional algorithms developed by our team, designed to address specific needs and enhance the explanatory power of the models.</li> <li> <p>These algorithms are seamlessly integrated into the OmniXAI framework, providing a richer set of tools for model interpretability.</p> </li> <li> <p>Simplified Installation:</p> </li> <li>With a single installation of MLxplain, users gain access to all integrated algorithms and their APIs.</li> <li>This streamlined approach simplifies the setup process and ensures that users can immediately leverage both OmniXAI and MLxplain\u2019s capabilities.</li> </ol>"},{"location":"documentation/rulesextraction/examples/","title":"Rules extraction Examples and Tutorials","text":"<p>In this section, you'll find various resources to help you get started with the Rules Extraction library and explore its full potential through practical examples and use cases.</p>"},{"location":"documentation/rulesextraction/examples/#getting-started","title":"Getting Started","text":"<p>To quickly get up and running with the library, check out our Getting Started notebook. This guide will walk you through a simple setup and showcase the basic functionality of the library.</p>"},{"location":"documentation/rulesextraction/examples/#demo","title":"Demo","text":"<p>For a more detailed demonstration, you can explore our Demo notebook. This example illustrates how to apply the Rules Extraction method to a sample dataset, explaining the steps involved in extracting and interpreting rules from a CNN.</p>"},{"location":"documentation/rulesextraction/examples/#full-use-case","title":"Full Use Case","text":"<p>To see the Rules Extraction library in action, alongside other methods, refer to the Sport Image Classification Use Case notebook or the Aptos 2019 Blindness Detection Use Case. These comprehensive examples show how the library can be integrated into a larger machine learning and explainable AI workflow, providing insights on how to combine it with other techniques for enhanced interpretability.</p> <p>Feel free to explore these notebooks to deepen your understanding of how to effectively use the Rules Extraction library in your projects.</p>"},{"location":"documentation/rulesextraction/overview/","title":"Rules extraction","text":"<p>The Rules Extraction library is designed to enhance the interpretability of Convolutional Neural Networks (CNNs) by replacing their fully-connected layers with a small set of easily understandable rules. This approach aims to maintain a similar level of accuracy to the original network while providing greater transparency into the decision-making process of the model. </p> <p>PyTorch Support Only</p> <p>Please note that the library currently supports only PyTorch models (nn.Module) as input models. This limitation should be considered when planning to use the Rules Extraction library for your project.</p> <p>This library is based on the Improving neural network interpretability via rule extraction paper.</p>"},{"location":"documentation/rulesextraction/overview/#core-idea","title":"Core Idea","text":"<p>Traditional CNNs, while powerful, are often criticized for being \"black boxes,\" where understanding the decision-making process is challenging. The Rules Extraction method addresses this issue by translating the output of a CNN into human-readable rules. These rules help users gain insights into which features are most influential in the classification task, thus making the model's decisions more interpretable.</p>"},{"location":"documentation/rulesextraction/overview/#algorithm-overview","title":"Algorithm Overview","text":"<p>The algorithm can be summarized in three main steps:</p> <ol> <li>Feature Extraction using CNN:</li> <li>A pre-trained CNN, such as VGG-16, is used to extract feature representations from input images.</li> <li> <p>The feature activations from the last convolutional layer are averaged across a set of images to create a compact representation.</p> </li> <li> <p>Rule Generation using Random Forest:</p> </li> <li>A Random Forest (RF) is trained using the extracted features, where each root-to-leaf path in the forest corresponds to a rule.</li> <li> <p>The RF essentially learns to mimic the decision-making process of the fully-connected layers of the CNN.</p> </li> <li> <p>Rule Ranking using Perceptron:</p> </li> <li>The generated rules are then ranked based on their predictive utility using a simple perceptron model.</li> <li>The perceptron assigns weights to the rules and optimizes them to minimize classification error with a penalty to avoid rule correlation.</li> <li>The top-N rules are selected based on their ranking and used to classify new images through a majority vote.</li> </ol>"},{"location":"documentation/rulesextraction/overview/#high-level-explanation","title":"High-Level Explanation","text":"<ul> <li> <p>CNN Feature Extraction: The CNN serves as a feature extractor, transforming raw input images into high-dimensional feature vectors that capture important patterns relevant to the classification task.</p> </li> <li> <p>Random Forest Rule Extraction: The RF learns decision rules based on these features. Each tree in the forest captures different patterns, and the paths through these trees form logical \"IF-THEN\" rules that can be easily understood and analyzed.</p> </li> <li> <p>Rule Optimization and Selection: The perceptron further refines these rules by weighting their contributions to the classification decision. The most important rules are retained, offering a concise and interpretable model that approximates the original CNN's performance.</p> </li> </ul>"},{"location":"documentation/rulesextraction/overview/#conclusion","title":"Conclusion","text":"<p>The Rules Extraction library bridges the gap between model accuracy and interpretability by translating complex CNN decisions into simple, human-understandable rules. This method enables analysts to better understand and trust the outcomes of deep learning models, making it a valuable tool for tasks where interpretability is as crucial as performance.</p>"}]}